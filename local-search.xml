<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>正确喝水的方法</title>
    <link href="/2024/09/06/%E6%AD%A3%E7%A1%AE%E5%96%9D%E6%B0%B4%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/06/%E6%AD%A3%E7%A1%AE%E5%96%9D%E6%B0%B4%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>每天都在喝水，但是：</p><p>你喝得对吗？喝得够吗？喝得好吗？</p><p>10个最受关注的喝水困惑，今天我们一次说清楚！</p><p><strong>* 极速总结：</strong></p><p>①喝水要少量多次，不要等到口渴再喝水；</p><p>②每天8杯水；出汗环境每小时都要补充水分；</p><p>③不同明目的水在补水方面没有区别；</p><p>④隔夜水可以喝，敞口落入灰尘&#x2F;蚊虫的水不能喝；</p><p>⑤千滚水可以喝；</p><p>⑥一半凉开水一半热水可以喝，生水凉水不建议喝；</p><p>⑦早起喝白开水就可以，蜂蜜水&#x2F;淡盐水反而会加重身体负担；</p><p>⑧肠胃功能正常的情况下，饭前喝水没问题，否则不建议，可能会加重肠胃负担；</p><p>⑨不建议使用功能水补充营养；</p><p>⑩不建议喝不健康、不卫生的水：未经处理的生水、长时间暴露在空气中的水、长期不清理的桶装水、65℃以上的水。</p><span id="more"></span><h1 id="01-什么时候喝水最好？"><a href="#01-什么时候喝水最好？" class="headerlink" title="01 什么时候喝水最好？"></a>01 什么时候喝水最好？</h1><p><strong>任何时候。</strong></p><p>不要等到口渴才喝，平常有事没事就记得喝水，喝水要少量多次，不要一次喝一桶管一天[1]。</p><h1 id="02-每天该喝多少水？"><a href="#02-每天该喝多少水？" class="headerlink" title="02 每天该喝多少水？"></a>02 每天该喝多少水？</h1><p><strong>一次性纸杯大小，大概7~8杯[1]。</strong></p><p><strong>成年男性每天1700毫升，女性1500毫升[2]。</strong></p><p><strong>如果在高温环境里，体力劳动或者剧烈运动，至少每小时喝500~1000毫升[3]。</strong></p><p>如果肾有问题，喝多少水，问医生。</p><h1 id="03-矿泉水、纯净水、白开水、蒸馏水、苏打水，哪种水最好？"><a href="#03-矿泉水、纯净水、白开水、蒸馏水、苏打水，哪种水最好？" class="headerlink" title="03 矿泉水、纯净水、白开水、蒸馏水、苏打水，哪种水最好？"></a>03 矿泉水、纯净水、白开水、蒸馏水、苏打水，哪种水最好？</h1><p><strong>都好，但白开水最省钱。</strong></p><p>这些水名头多，主要是工艺不同，微量元素含量不同[4]。但想补微量元素，不如吃蔬菜、水果、肉等其他食物。</p><p>喝水的主要目的是补水，从这点来看，这些水没区别，选哪种都一样。（有钱任性的除外）</p><h1 id="04-隔夜水能喝吗？"><a href="#04-隔夜水能喝吗？" class="headerlink" title="04 隔夜水能喝吗？"></a>04 隔夜水能喝吗？</h1><p><strong>能！</strong></p><p>上午烧开的水，下午可以喝，为什么隔夜水不能喝？</p><p>烧开的水，如果盖子盖得好，别说隔夜，室温下放3天，里面亚硝酸盐含量仍然在国家安全标准（1毫克&#x2F;升）[5-6]内，不会致癌。</p><p>如果你习惯喝完水，敞开着放，可能会有蚊虫、灰尘等掉落进去，还是别喝了。</p><h1 id="05-千滚水能喝吗？"><a href="#05-千滚水能喝吗？" class="headerlink" title="05 千滚水能喝吗？"></a>05 千滚水能喝吗？</h1><p><strong>日常家里烧水，不用担心。</strong></p><p>有研究测定：</p><p>自来水反复加热8次[7]，亚硝酸盐也只有国家安全标准（1毫克&#x2F;升）的约1&#x2F;300，而我们每天喝一两升水，很难达到中毒剂量（0.2克）[8]。</p><p>老火靓汤能喝，为什么家里烧开几次的水，不能喝？</p><h1 id="06-一半凉水加一半沸水能喝吗？"><a href="#06-一半凉水加一半沸水能喝吗？" class="headerlink" title="06 一半凉水加一半沸水能喝吗？"></a>06 一半凉水加一半沸水能喝吗？</h1><p><strong>看情况。</strong></p><p>人们把一半凉水加一半的沸水，叫阴阳水。</p><p>它能不能喝，要看凉水是什么水。如果凉水是生水（如井水、河水），可能含有细菌、病毒和寄生虫，不要喝[9]。</p><p>如果凉水是凉开水，能喝，因为只是不同温度水的简单混合。</p><h1 id="07-起床该喝蜂蜜水还是淡盐水？"><a href="#07-起床该喝蜂蜜水还是淡盐水？" class="headerlink" title="07 起床该喝蜂蜜水还是淡盐水？"></a>07 起床该喝蜂蜜水还是淡盐水？</h1><p><strong>都不推荐。</strong></p><p>蜂蜜水并没有润肠通便效果，淡盐水反而会加重身体缺水状态，喝它们还增加糖、盐的代谢负担。</p><p>糖尿病、高血压、心脏病等特殊人群，记住不要喝。</p><p>白开水无糖、无盐、无负担，早晨第一杯水，喝它就对了！</p><h1 id="08-饭前喝水会影响消化吗？"><a href="#08-饭前喝水会影响消化吗？" class="headerlink" title="08 饭前喝水会影响消化吗？"></a>08 饭前喝水会影响消化吗？</h1><p><strong>只要胃肠功能正常就不会。</strong></p><p>相反，饭前喝水还有助消化、增加食欲、帮助减肥。</p><p>当然，如果胃肠功能比较弱，或已经有问题，最好不要饭前喝太多水，以免增加胃肠负担。</p><h1 id="09-保健水真能有作用吗？"><a href="#09-保健水真能有作用吗？" class="headerlink" title="09 保健水真能有作用吗？"></a>09 保健水真能有作用吗？</h1><p><strong>忽悠你呢！</strong></p><p>所谓富氢水、富氧水、水素水等保健水，都没有科学依据证明它们有额外的保健功效，更别说治病了。</p><p>遇到这种，不要信，赶紧跑！（有钱再次任性的除外）</p><h1 id="10-真正不能喝的是什么水？"><a href="#10-真正不能喝的是什么水？" class="headerlink" title="10 真正不能喝的是什么水？"></a>10 真正不能喝的是什么水？</h1><p><strong>不安全、不卫生的水。</strong></p><p>比如：</p><ul><li><p>没有经过处理的生水（尤其是井水、泉水、湖水等天然水）；</p></li><li><p>煮开后不盖盖子，长时间暴露在空气中的水；</p></li><li><p>装在受污染容器中的水（如桶装水的水桶超期使用，长期不清理）；</p></li><li><p>偏烫的水（超过65℃可能增加食管癌风险 [10]）。</p></li></ul><hr><p>一天的美好生活</p><p>从喝对水开始吧！</p><p>点个赞</p><p>提醒家人、朋友也多喝水</p><hr><p><strong>参考文献</strong></p><p>[1]中国营养学会.《中国居民膳食指南》（2016版）[M]. 北京: 人民卫生出版社,2016:116，253.<br>[2]中国营养学会. 中国居民膳食营养素参考摄入量（2013版）[M]. 北京: 科学出版社, 2013.<br>[3]中国疾病预防控制中心.公众高温中暑预防与紧急处理指南（2014版）[J].中国实用乡村医生杂志,2015,(11):1-3.<br>[4]杨月欣, 葛可佑.《中国营养科学全书》第2版（上册）[M].北京：人民卫生出版社，2019：513-514.</p><p>[5]陈影, 肖艳杰, 柳晓琳. 饮用水煮沸后放置不同时间亚硝酸盐和硝酸盐含量变化[J]. 锦州医科大学学报, 2018, 39(06):75-77.</p><p>[6]中华人民共和国国家标准. GB 5749-2006,生活饮用水卫生标准[S] .</p><p>[7]佚名. 自来水中余氯和亚硝酸盐含量与加热条件的相关性研究[J]. 食品安全质量检测学报, 2017, 11(No.362):378-382.<br>[8]国家市场监督管理总局.关于预防亚硝酸盐中毒的消费警示<a href="http://shanxi.ipraction.gov.cn/article/gzdt/202004/299091.html">http://shanxi.ipraction.gov.cn/article/gzdt/202004/299091.html</a><br>[9]中国疾病预防控制中心.饮用水二次污染知多少？<a href="https://www.chinacdc.cn/jkzt/hjws/ncgc/_10782/201912/t20191225/_209325.html">https://www.chinacdc.cn/jkzt/hjws/ncgc\_10782/201912/t20191225\_209325.html</a></p><p>[10]Loomis, Dana, Guyton, et al. Carcinogenicity of drinking coffee, mate, and very hot beverages.[J]. L .ancet Oncology, 2016.</p><p>*腾讯医典内容团队出品</p><hr><p>本文转自 <a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1725621717&amp;ver=5490&amp;signature=DBMmIsKEYHuMaBeGpY9UrWNo6RGyO51o5q6B5CNzbosURvL4suCclLavVLgU6qwjmXA7GuHuPPU1xPhpHJt1xCV432vnkNDuR0Q1pPnAaF*q95xM3H7eINq4nw-uYnH2&amp;new=1">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1725621717&amp;ver=5490&amp;signature=DBMmIsKEYHuMaBeGpY9UrWNo6RGyO51o5q6B5CNzbosURvL4suCclLavVLgU6qwjmXA7GuHuPPU1xPhpHJt1xCV432vnkNDuR0Q1pPnAaF*q95xM3H7eINq4nw-uYnH2&amp;new=1</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <categories>
      
      <category>Health</category>
      
    </categories>
    
    
    <tags>
      
      <tag>喝水</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>找回元素</title>
    <link href="/2024/03/09/%E6%89%BE%E5%9B%9E%E5%85%83%E7%B4%A0/"/>
    <url>/2024/03/09/%E6%89%BE%E5%9B%9E%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>找回元素开发实践经验</p><span id="more"></span><h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><h2 id="1-在位置需求严格的场景中，角色被Collider的边角卡住"><a href="#1-在位置需求严格的场景中，角色被Collider的边角卡住" class="headerlink" title="1. 在位置需求严格的场景中，角色被Collider的边角卡住"></a>1. 在位置需求严格的场景中，角色被<code>Collider</code>的边角卡住</h2><ul><li><p>主要解决方案：在<code>Project Settings - Physics 2D - Default Contact Offset</code>中更改为更小的接触偏移量。默认为<code>0.01</code>，如果位置精度要求<code>0.1</code>则会卡住</p></li><li><p>其他的解决办法（无益于本项目但理论可行）</p><ul><li><p>在<code>Sprite Editor</code>中设置缩小<code>Collider</code>边界几个像素的位置</p></li><li><p>如果在位移过程中发生了偏移，使用<code>Rigidbody</code>的<code>constraints</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span>(<span class="hljs-params">GameObject go, Vector2 dir</span>)</span><br>&#123;<br>    go.GetComponent&lt;Rigidbody2D&gt;().constraints = dir.x == <span class="hljs-number">0f</span> ? RigidbodyConstraints2D.FreezePositionX : RigidbodyConstraints2D.FreezePositionY;<br>    go.GetComponent&lt;Rigidbody2D&gt;().freezeRotation = <span class="hljs-literal">true</span>;<br>    go.GetComponent&lt;Rigidbody2D&gt;().velocity = dir * <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="二、组件使用"><a href="#二、组件使用" class="headerlink" title="二、组件使用"></a>二、组件使用</h1><h2 id="1-InputSystem"><a href="#1-InputSystem" class="headerlink" title="1. InputSystem"></a>1. <code>InputSystem</code></h2><ul><li><p><code>Vector2</code>的<code>dpad</code>：<code>Vector2</code>的<code>dpad</code>输入按一下响应两下，因此使用<code>Button</code>的<code>dpad</code>输入代替</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MoveDpadInputAction</span>(<span class="hljs-params">InputAction.CallbackContext context</span>)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (context.control.name)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;up&quot;</span>: inputVector2 = Vector2.up; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;down&quot;</span>: inputVector2 = Vector2.down; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;left&quot;</span>: inputVector2 = Vector2.left; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;right&quot;</span>: inputVector2 = Vector2.right; <span class="hljs-keyword">break</span>;<br>    &#125;<br>    print(inputVector2);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-Tilemap"><a href="#2-Tilemap" class="headerlink" title="2. Tilemap"></a>2. <code>Tilemap</code></h2><ul><li><p><code>Tilemap</code>与<code>GameObject</code>的选择：</p><ul><li>前者不提倡代码动态更改，尽量在编辑器中画好就不再更改，一些静态地图、固定画面使用；后者可以随意动态更改。</li><li>因此使用前者画外部的墙壁，动态画内部的障碍物，以及障碍物的显隐；使用后者处理所有可操作的、频繁变动位置的内容。</li></ul></li><li><p>动态画<code>tiles</code>的相关方法（<code>Tilemap tm = GetComponent&lt;Tilemap&gt;();</code>）</p><ul><li><p><code>tm.SetTile(Vector3Int position, TileBase tile)</code>：设置单个<code>tile</code></p></li><li><p><code>tm.SetTiles(Vector3Int[] positionArray, TileBase[] tileArray)</code>：设置多个<code>tiles</code>，每一个位置对应一个数组值</p></li><li><p><code>tm.SetTilesBlock(BoundsInt position, TileBase[] tileArray)</code>：批量设置<code>tiles</code>。</p><ul><li><p><code>BoundsInt</code>：立方体包围盒。实例化需要参数<code>(int 最小x, int 最小y, int 最小z, int x的长度, int y的长度, int z的长度)</code>或<code>(Vector3Int 最小xyz的位置, Vector3Int xyz的长度)</code></p></li><li><p><code>TileBase[]</code>需要对应数量长度的数组，需要一一赋值。</p></li><li><p>当<code>z的长度</code>为<code>1</code>时为一个平面，画瓦片的顺序为从左下到右上逐行进行（第一行为最小y的所有x）</p></li><li><p>区域批量设置</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">int</span> xmin,ymin,zmin=<span class="hljs-number">0</span>,xsize,ysize,zsize=<span class="hljs-number">1</span>; <span class="hljs-comment">//获得所需区域的6个参数</span><br>TileBase[] contentsTiles; <span class="hljs-comment">//加载区域需要的所有瓦片</span><br>BoundsInt bi = <span class="hljs-keyword">new</span> BoundsInt(xmin, ymin, zmin, xsize, ysize, zsize); <span class="hljs-comment">//设置区域变量</span><br>TileBase[] tiles = <span class="hljs-keyword">new</span> TileBase[xsize * ysize * zsize]; <span class="hljs-comment">//设置整个数组, 建议直接写结果避免运算</span><br><span class="hljs-comment">//给tiles逐一赋值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">byte</span> i = <span class="hljs-number">0</span>; i &lt; tiles.Length; i++)<br>&#123;<br>    tiles[i] = contentsTiles[i]; <span class="hljs-comment">//为数组赋值，可加入其他条件和逻辑</span><br>&#125;<br><span class="hljs-comment">//批量画瓦片函数</span><br>tilemap.SetTilesBlock(bi, tiles);<br></code></pre></td></tr></table></figure></li><li><p>第<code>i</code>（0~xsize*ysize-1）个<code>TileBase</code>的位置：<code>(i % xsize + xmin, i / xsize + ymin, 平面z)</code></p></li></ul></li></ul></li></ul><h1 id="三、快速实现"><a href="#三、快速实现" class="headerlink" title="三、快速实现"></a>三、快速实现</h1><h2 id="1-保留n位小数"><a href="#1-保留n位小数" class="headerlink" title="1. 保留n位小数"></a>1. 保留n位小数</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//保留1位小数</span><br><span class="hljs-function"><span class="hljs-built_in">float</span> <span class="hljs-title">PointOne</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> f</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> Mathf.Round(f * <span class="hljs-number">10f</span>) / <span class="hljs-number">10f</span>;<br>&#125;<br><br><span class="hljs-comment">//保留2位小数</span><br><span class="hljs-function"><span class="hljs-built_in">float</span> <span class="hljs-title">PointOne</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> f</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> Mathf.Round(f * <span class="hljs-number">100f</span>) / <span class="hljs-number">100f</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
      <tag>Unity2D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API记录</title>
    <link href="/2024/02/23/API%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/23/API%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h1><ul><li><p>地址：<a href="https://api.oioweb.cn/api/qrcode/encode">https://api.oioweb.cn/api/qrcode/encode</a></p></li><li><p>返回：JSON</p></li><li><p>请求：GET</p></li><li><p>示例：<a href="https://api.oioweb.cn/api/qrcode/encode?text=https://api.oioweb.cn&m=2&type=svg&size=15">https://api.oioweb.cn/api/qrcode/encode?text=https://api.oioweb.cn&amp;m=2&amp;type=svg&amp;size=15</a></p></li></ul><table><thead><tr><th align="center">参数</th><th align="center">必填</th><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">✔</td><td align="center"><code>string</code></td><td align="left">文本内容</td></tr><tr><td align="center">m</td><td align="center"></td><td align="center"><code>number</code></td><td align="left">边距，可选值{0,10}，默认2</td></tr><tr><td align="center">type</td><td align="center"></td><td align="center"><code>string</code></td><td align="left">二维码类型，可选值{<code>&quot;jpg&quot;</code>,<code>&quot;svg&quot;</code>}，默认<code>SVG</code></td></tr><tr><td align="center">size</td><td align="center"></td><td align="center"><code>number</code></td><td align="left">二维码大小，默认15，可选值5-30,svg类型下该参数无效</td></tr></tbody></table><h1 id="获取网站的favicon-ico"><a href="#获取网站的favicon-ico" class="headerlink" title="获取网站的favicon.ico"></a>获取网站的favicon.ico</h1><ul><li>地址：<a href="https://api.oioweb.cn/api/site/favicon">https://api.oioweb.cn/api/site/favicon</a></li><li>返回：JSON</li><li>请求：GET</li><li>示例：<a href="https://api.oioweb.cn/api/site/favicon?url=https://api.oioweb.cn">https://api.oioweb.cn/api/site/favicon?url=https://api.oioweb.cn</a></li></ul><h1 id="返回必应每日一图的最近7张图"><a href="#返回必应每日一图的最近7张图" class="headerlink" title="返回必应每日一图的最近7张图"></a>返回必应每日一图的最近7张图</h1><ul><li>地址：<a href="https://api.oioweb.cn/api/bing">https://api.oioweb.cn/api/bing</a></li><li>返回：JSON</li><li>请求：GET</li><li>示例：<a href="https://api.oioweb.cn/api/bing">https://api.oioweb.cn/api/bing</a></li></ul><table><thead><tr><th>返回参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>copyright</td><td><code>string</code></td><td>图片版权信息</td></tr><tr><td>copyrightlink</td><td><code>string</code></td><td>版权地址<code>URL</code></td></tr><tr><td>title</td><td><code>string</code></td><td>图片标题</td></tr><tr><td>url</td><td><code>string</code></td><td>图片地址<code>URL</code></td></tr></tbody></table><ul><li>返回示例：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bathing boxes at Brighton Beach, Melbourne, Victoria, Australia (© Prasit photo/Getty Images)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=Brighton+Bathing+boxes&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.BrightonBoxes_ROW8908835470_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240223&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Firefall at Horsetail Fall, Yosemite National Park, California (© Gregory B Cuvelier/Shutterstock)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=horsetail+firefall&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.YosemiteFirefall_ROW8895162487_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240222&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Kinder Scout at sunrise, Peak District National Park, England (© john finney photography/Getty Images)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=Kinder+Scout&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.PeakDistrictNP_ROW8679157126_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240221&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Aerial view of colourful houses on a headland in Puerto de la Cruz, Tenerife, Spain (© Marco Bottigelli/Getty Images)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=Puerto+de+la+Cruz&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.CarnavalTenerife_ROW8519647971_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240220&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Sperm whale pod surfacing, Dominica (© Franco Banfi/Minden Pictures)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=sperm+whale&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.DominicaWhales_ROW8234798817_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240219&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;The Pragser Wildsee in the Dolomites, South Tyrol, Italy (© Marco Bottigelli/Getty Images)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=Pragser+Wildsee&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.LakeDolomites_ROW9668753915_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240218&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Female pyrrhuloxia perched on cactus plant, Texas (© outtakes/Getty Images)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=Pyrrhuloxia&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.BackyardBird_ROW2069245060_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240217&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hippopotamus mother and calf, South Luangwa National Park, Zambia (© Nature Picture Library/Alamy)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;copyrightlink&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.bing.com/search?q=Hippopotamus&amp;form=hpcapt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://cn.bing.com/th?id=OHR.HippopotamusDay_ROW6289598676_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20240216&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#几种深拷贝方法探究及性能比较</title>
    <link href="/2024/02/23/C#%E5%87%A0%E7%A7%8D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6%E5%8F%8A%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <url>/2024/02/23/C#%E5%87%A0%E7%A7%8D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6%E5%8F%8A%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>之前学习了设计模式原型模式，在原型模式中就提到了对象的深拷贝。深拷贝指的是拷贝一个对象时，不仅仅把对象的引用进行复制，还把该对象引用的值也一起拷贝。与浅拷贝不同的就是，深拷贝后的拷贝对象就和源对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。</p><p>在查询资料之后，探究了以下几种C#对象深拷贝方式，同时简单对比了以下列出的几种深拷贝方式的速度（简单测试，仅测试对象深拷贝速度，不考虑性能影响）。</p><p>测试平台：Intel 9700K+DDR4 3600 32G，框架为.NET 5.0。测试方式为创建100万次，比较执行时间。拷贝的对象如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">Serializable</span>]<br><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> UserId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Address &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> UpdateTime &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> CreateTime &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="1、手写创建对象"><a href="#1、手写创建对象" class="headerlink" title="1、手写创建对象"></a>1、手写创建对象</h1><p>简单对象创建，不考虑有构造函数的情况。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">NewUserInfo newInfo = <span class="hljs-built_in">new</span> NewUserInfo()<br>&#123;<br>    <span class="hljs-type">Name</span> = <span class="hljs-keyword">info</span>.Name,<br>    Age = <span class="hljs-keyword">info</span>.Age,<br>    UserId = <span class="hljs-keyword">info</span>.UserId,<br>    Address = <span class="hljs-keyword">info</span>.Address,<br>    UpdateTime = <span class="hljs-keyword">info</span>.UpdateTime,<br>    CreateTime = <span class="hljs-keyword">info</span>.CreateTime,<br>&#125;;<br></code></pre></td></tr></table></figure><p>100万次执行时间为39.4073ms，位居第一。当然，在这种不考虑构造函数的情况下，手写创建肯定是最快的。但是同时，如果遇到复杂对象，代码量也是最多的。</p><h1 id="2、反射"><a href="#2、反射" class="headerlink" title="2、反射"></a>2、反射</h1><p>这也是在日常代码中最常用的方式之一。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TOut <span class="hljs-title">TransReflection</span>&lt;<span class="hljs-title">TIn</span>, <span class="hljs-title">TOut</span>&gt;(<span class="hljs-params">TIn tIn</span>)</span><br>&#123;<br>    TOut tOut = Activator.CreateInstance&lt;TOut&gt;();<br>    <span class="hljs-keyword">var</span> tInType = tIn.GetType();<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> itemOut <span class="hljs-keyword">in</span> tOut.GetType().GetProperties())<br>    &#123;<br>        <span class="hljs-keyword">var</span> itemIn = tInType.GetProperty(itemOut.Name); ;<br>        <span class="hljs-keyword">if</span> (itemIn != <span class="hljs-literal">null</span>)<br>        &#123;<br>            itemOut.SetValue(tOut, itemIn.GetValue(tIn));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tOut;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NewUserInfo</span> <span class="hljs-variable">newInfo</span> <span class="hljs-operator">=</span> TransReflection&lt;UserInfo, NewUserInfo&gt;(info);<br></code></pre></td></tr></table></figure><p>100万次执行时间为1618.4662ms，平均执行时间为0.001618，看起来还行。</p><p>经实践，下面反射方法效果更好一些：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">DeepCopy</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T obj</span>)</span>  <br>&#123;  <br><span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)  <br>&#123;  <br><span class="hljs-keyword">return</span> obj;  <br>&#125;  <br>    <span class="hljs-keyword">var</span> type = obj.GetType();  <br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> <span class="hljs-built_in">string</span> || type.IsValueType)  <br>    &#123;  <br>    <span class="hljs-keyword">return</span> obj;  <br>    &#125;<br><br>    <span class="hljs-keyword">var</span> result = Activator.CreateInstance(type);  <br>    <span class="hljs-keyword">var</span> fields = type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> field <span class="hljs-keyword">in</span> fields)  <br>    &#123;  <br>        field.SetValue(result, field.GetValue(obj));  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> (T)result;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、Json字符串序列化"><a href="#3、Json字符串序列化" class="headerlink" title="3、Json字符串序列化"></a>3、Json字符串序列化</h1><p>使用<code>System.Text.Json</code>作为序列化和反序列化工具。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserInfo</span> <span class="hljs-variable">newInfo</span> <span class="hljs-operator">=</span> JsonSerializer.Deserialize&lt;UserInfo&gt;(JsonSerializer.Serialize(info));<br></code></pre></td></tr></table></figure><p>100万次执行时间为2222.2078ms，比反射慢一点点。</p><h1 id="4、对象二进制序列化"><a href="#4、对象二进制序列化" class="headerlink" title="4、对象二进制序列化"></a>4、对象二进制序列化</h1><p>首先不推荐使用这种方式，一是<code>BinaryFormatter.Serialize</code>微软已不推荐使用（据微软官网文档说是有漏洞，具体有什么漏洞没细究），二是必须在要序列化的对象上面写上<code>Serializable</code>的关键字，三是速度并不理想。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TOut <span class="hljs-title">ObjectMemoryConvert</span>&lt;<span class="hljs-title">TIn</span>, <span class="hljs-title">TOut</span>&gt;(<span class="hljs-params">TIn tIn</span>)</span><br>&#123;<br>    <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream())<br>    &#123;<br>        BinaryFormatter formatter = <span class="hljs-keyword">new</span> BinaryFormatter();<br>        formatter.Serialize(ms, tIn);<br>        ms.Position = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> (TOut)formatter.Deserialize(ms);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>100万次执行时间为8545.9835ms，讲道理应该是比<code>Json</code>序列化要更快的，但是实际上慢了许多。</p><h1 id="5、AutoMapper"><a href="#5、AutoMapper" class="headerlink" title="5、AutoMapper"></a>5、<code>AutoMapper</code></h1><p>熟悉的<code>AutoMapper</code>，性能也没有让我们失望。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//循环外创建MapperConfig</span><br><span class="hljs-keyword">var</span> config = <span class="hljs-keyword">new</span> MapperConfiguration(cfg =&gt; cfg.CreateMap&lt;UserInfo, UserInfo&gt;());<br><span class="hljs-keyword">var</span> mapper = config.CreateMapper();<br><br><span class="hljs-comment">//循环内调用</span><br>UserInfo newInfo = mapper.<span class="hljs-built_in">Map</span>&lt;UserInfo&gt;(info);<br></code></pre></td></tr></table></figure><p>100万次执行时间为267.5073ms，位居第三。</p><h1 id="！6、表达式树"><a href="#！6、表达式树" class="headerlink" title="！6、表达式树"></a>！6、表达式树</h1><p>重头戏来了，此处代码来源于文首中的博客中，性能让人大吃一惊。其原理是反射和表达式树相结合，先用反射获取字段然后缓存起来，再用表达式树赋值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TransExp</span>&lt;<span class="hljs-title">TIn</span>, <span class="hljs-title">TOut</span>&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Func&lt;TIn, TOut&gt; cache = GetFunc();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Func&lt;TIn, TOut&gt; <span class="hljs-title">GetFunc</span>()</span><br>    &#123;<br>        ParameterExpression parameterExpression = Expression.Parameter(<span class="hljs-keyword">typeof</span>(TIn), <span class="hljs-string">&quot;p&quot;</span>);<br>        List&lt;MemberBinding&gt; memberBindingList = <span class="hljs-keyword">new</span> List&lt;MemberBinding&gt;();<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-function"><span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> <span class="hljs-title">typeof</span>(<span class="hljs-params">TOut</span>).<span class="hljs-title">GetProperties</span>())</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!item.CanWrite) <span class="hljs-keyword">continue</span>;<br>            MemberExpression property = Expression.Property(parameterExpression, <span class="hljs-keyword">typeof</span>(TIn).GetProperty(item.Name));<br>            MemberBinding memberBinding = Expression.Bind(item, property);<br>            memberBindingList.Add(memberBinding);<br>        &#125;<br><br>        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(<span class="hljs-keyword">typeof</span>(TOut)), memberBindingList.ToArray());<br>        Expression&lt;Func&lt;TIn, TOut&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;TIn, TOut&gt;&gt;(memberInitExpression, <span class="hljs-keyword">new</span> ParameterExpression[] &#123; parameterExpression &#125;);<br><br>        <span class="hljs-keyword">return</span> lambda.Compile();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TOut <span class="hljs-title">Trans</span>(<span class="hljs-params">TIn tIn</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> cache(tIn);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserInfo</span> <span class="hljs-variable">newInfo</span> <span class="hljs-operator">=</span> TransExp&lt;UserInfo, UserInfo&gt;.Trans(info);<br></code></pre></td></tr></table></figure><p>100万次执行时间为77.3653ms，位居第二。仅比手写慢一点点。</p><h1 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h1><p>简单整理成柱状图，可以很清晰的对比出这几种深拷贝方式之间的速度差距。总结来说就是，一般简单的对象深拷贝，推荐直接手写，复杂对象深拷贝，推荐使用表达式树。当然，如果创建对象中还涉及到构造函数初始化，那又是不同的情况，这里暂不讨论。<br><img src="https://img2022.cnblogs.com/blog/2417643/202204/2417643-20220416101521483-1463198586.png"></p><p>附上本次测试用的完整代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> AutoMapper;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Diagnostics;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Linq.Expressions;<br><span class="hljs-keyword">using</span> System.Runtime.Serialization;<br><span class="hljs-keyword">using</span> System.Runtime.Serialization.Formatters.Binary;<br><span class="hljs-keyword">using</span> System.Text.Json;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">TestObjectDeepCopy</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            UserInfo info = <span class="hljs-keyword">new</span> UserInfo()<br>            &#123;<br>                Name = <span class="hljs-string">&quot;张三&quot;</span>,<br>                Age = <span class="hljs-number">18</span>,<br>                UserId = Guid.NewGuid().ToString(<span class="hljs-string">&quot;N&quot;</span>),<br>                Address = <span class="hljs-string">&quot;银河系地球中国&quot;</span>,<br>                UpdateTime = <span class="hljs-number">1615888888</span>,<br>                CreateTime = <span class="hljs-number">1615895454</span>,<br>            &#125;;<br><br>            <span class="hljs-keyword">var</span> config = <span class="hljs-keyword">new</span> MapperConfiguration(cfg =&gt; cfg.CreateMap&lt;UserInfo, UserInfo&gt;());<br>            <span class="hljs-keyword">var</span> mapper = config.CreateMapper();<br><br>            <span class="hljs-built_in">int</span> count = <span class="hljs-number">1000000</span>;<br>            Stopwatch sw = <span class="hljs-keyword">new</span> Stopwatch();<br>            sw.Start();<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">-0</span>; i &lt; count; i++)<br>            &#123;<br>                <span class="hljs-comment">//手写 39.4073ms</span><br>                <span class="hljs-comment">//UserInfo newInfo = new UserInfo()</span><br>                <span class="hljs-comment">//&#123;</span><br>                <span class="hljs-comment">//    Name = info.Name,</span><br>                <span class="hljs-comment">//    Age = info.Age,</span><br>                <span class="hljs-comment">//    UserId = info.UserId,</span><br>                <span class="hljs-comment">//    Address = info.Address,</span><br>                <span class="hljs-comment">//    UpdateTime = info.UpdateTime,</span><br>                <span class="hljs-comment">//    CreateTime = info.CreateTime,</span><br>                <span class="hljs-comment">//&#125;;</span><br><br>                <span class="hljs-comment">//反射 1618.4662ms</span><br>                <span class="hljs-comment">//UserInfo newInfo = TransReflection&lt;UserInfo, UserInfo&gt;(info);</span><br><br>                <span class="hljs-comment">//Json字符串序列化 2222.2078ms</span><br>                <span class="hljs-comment">//UserInfo newInfo = JsonSerializer.Deserialize&lt;UserInfo&gt;(JsonSerializer.Serialize(info));</span><br><br>                <span class="hljs-comment">//对象二进制序列化 8545.9835ms</span><br>                <span class="hljs-comment">//UserInfo newInfo = ObjectMemoryConvert&lt;UserInfo, UserInfo&gt;(info);</span><br><br>                <span class="hljs-comment">//表达式树 77.3653ms</span><br>                <span class="hljs-comment">//UserInfo newInfo = TransExp&lt;UserInfo, UserInfo&gt;.Trans(info);</span><br><br>                <span class="hljs-comment">//AutoMapper 267.5073ms</span><br>                <span class="hljs-comment">//UserInfo newInfo = mapper.Map&lt;UserInfo&gt;(info);</span><br>            &#125;<br><br>            Console.WriteLine(<span class="hljs-string">&quot;总共花费&#123;0&#125;ms.&quot;</span>, sw.Elapsed.TotalMilliseconds);<br>            sw.Stop();<br><br>            Console.ReadKey();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TOut <span class="hljs-title">TransReflection</span>&lt;<span class="hljs-title">TIn</span>, <span class="hljs-title">TOut</span>&gt;(<span class="hljs-params">TIn tIn</span>)</span><br>        &#123;<br>            TOut tOut = Activator.CreateInstance&lt;TOut&gt;();<br>            <span class="hljs-keyword">var</span> tInType = tIn.GetType();<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> itemOut <span class="hljs-keyword">in</span> tOut.GetType().GetProperties())<br>            &#123;<br>                <span class="hljs-keyword">var</span> itemIn = tInType.GetProperty(itemOut.Name); ;<br>                <span class="hljs-keyword">if</span> (itemIn != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    itemOut.SetValue(tOut, itemIn.GetValue(tIn));<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> tOut;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TOut <span class="hljs-title">ObjectMemoryConvert</span>&lt;<span class="hljs-title">TIn</span>, <span class="hljs-title">TOut</span>&gt;(<span class="hljs-params">TIn tIn</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream())<br>            &#123;<br>                BinaryFormatter formatter = <span class="hljs-keyword">new</span> BinaryFormatter();<br>                formatter.Serialize(ms, tIn);<br>                ms.Position = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">return</span> (TOut)formatter.Deserialize(ms);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TransExp</span>&lt;<span class="hljs-title">TIn</span>, <span class="hljs-title">TOut</span>&gt;<br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Func&lt;TIn, TOut&gt; cache = GetFunc();<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Func&lt;TIn, TOut&gt; <span class="hljs-title">GetFunc</span>()</span><br>        &#123;<br>            ParameterExpression parameterExpression = Expression.Parameter(<span class="hljs-keyword">typeof</span>(TIn), <span class="hljs-string">&quot;p&quot;</span>);<br>            List&lt;MemberBinding&gt; memberBindingList = <span class="hljs-keyword">new</span> List&lt;MemberBinding&gt;();<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-function"><span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> <span class="hljs-title">typeof</span>(<span class="hljs-params">TOut</span>).<span class="hljs-title">GetProperties</span>())</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (!item.CanWrite) <span class="hljs-keyword">continue</span>;<br>                MemberExpression property = Expression.Property(parameterExpression, <span class="hljs-keyword">typeof</span>(TIn).GetProperty(item.Name));<br>                MemberBinding memberBinding = Expression.Bind(item, property);<br>                memberBindingList.Add(memberBinding);<br>            &#125;<br><br>            MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(<span class="hljs-keyword">typeof</span>(TOut)), memberBindingList.ToArray());<br>            Expression&lt;Func&lt;TIn, TOut&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;TIn, TOut&gt;&gt;(memberInitExpression, <span class="hljs-keyword">new</span> ParameterExpression[] &#123; parameterExpression &#125;);<br><br>            <span class="hljs-keyword">return</span> lambda.Compile();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TOut <span class="hljs-title">Trans</span>(<span class="hljs-params">TIn tIn</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> cache(tIn);<br>        &#125;<br>    &#125;<br><br>    [<span class="hljs-meta">Serializable</span>]<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> UserId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Address &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> UpdateTime &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> CreateTime &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>本文转自 <a href="https://www.cnblogs.com/SF8588/p/16152078.html">https://www.cnblogs.com/SF8588/p/16152078.html</a>，如有侵权，请联系删除。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CSharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>深拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity8 - 网络基础</title>
    <link href="/2024/02/21/Unity8%20-%20%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/02/21/Unity8%20-%20%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Unity8 - 网络基础</p><span id="more"></span><!-- omit in toc --><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E6%AD%A3%E6%96%87">正文</a><ul><li><a href="#%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA">基础理论</a><ul><li><a href="#%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">网络基本概念</a></li><li><a href="#ip-%E7%AB%AF%E5%8F%A3-mac%E5%9C%B0%E5%9D%80"><code>IP</code>, 端口, <code>Mac</code>地址</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B">数据通信模型</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE">网络协议</a><ul><li><a href="#osi%E6%A8%A1%E5%9E%8B"><code>OSI</code>模型</a></li><li><a href="#tcpip%E5%8D%8F%E8%AE%AE"><code>TCP</code>&#x2F;<code>IP</code>协议</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1">网络通信</a><ul><li><a href="#%E9%80%9A%E4%BF%A1%E5%89%8D">通信前</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88">网络游戏通信方案</a></li><li><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97socket%E7%B1%BB">套接字<code>Socket</code>类</a><ul><li><a href="#%E5%B8%B8%E7%94%A8api">常用<code>API</code></a></li><li><a href="#%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B">通信流程</a></li><li><a href="#tcp%E5%90%8C%E6%AD%A5"><code>TCP</code>同步</a></li><li><a href="#tcp%E5%BC%82%E6%AD%A5"><code>TCP</code>异步</a></li><li><a href="#udp%E5%90%8C%E6%AD%A5"><code>UDP</code>同步</a></li><li><a href="#udp%E5%BC%82%E6%AD%A5"><code>UDP</code>异步</a></li></ul></li><li><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93ftp">文件传输<code>FTP</code></a><ul><li><a href="#%E6%90%AD%E5%BB%BAftp%E6%9C%8D%E5%8A%A1%E5%99%A8">搭建<code>FTP</code>服务器</a></li><li><a href="#%E4%B8%8A%E4%BC%A0">上传</a></li><li><a href="#%E4%B8%8B%E8%BD%BD">下载</a></li><li><a href="#ftp%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C"><code>FTP</code>其他操作</a></li></ul></li><li><a href="#%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93http">超文本传输<code>HTTP</code></a><ul><li><a href="#%E5%8E%9F%E7%90%86">原理</a></li><li><a href="#%E6%90%AD%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8">搭建<code>http</code>服务器</a></li><li><a href="#c%E7%9B%B8%E5%85%B3%E7%B1%BB"><code>C#</code>相关类</a></li><li><a href="#unity%E7%9B%B8%E5%85%B3%E7%B1%BB"><code>Unity</code>相关类</a></li></ul></li></ul></li><li><a href="#%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86">消息处理</a><ul><li><a href="#%E5%88%86%E5%8C%85%E4%B8%8E%E9%BB%8F%E5%8C%85">分包与黏包</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7">自定义协议工具</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7protobuf">第三方协议工具<code>Protobuf</code></a><ul><li><a href="#protobuf"><code>Protobuf</code></a></li><li><a href="#protobuf-net"><code>Protobuf-Net</code></a></li></ul></li><li><a href="#%E5%A4%A7%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%AD%97%E8%8A%82%E5%BA%8F">大小端模式&#x2F;大小端字节序</a></li><li><a href="#%E6%B6%88%E6%81%AF%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86">消息加密与解密</a></li></ul></li></ul></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><a href="#%E7%9B%AE%E5%BD%95">正文</a></h1><h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a><a href="#%E7%9B%AE%E5%BD%95">基础理论</a></h2><h3 id="网络基本概念"><a href="#网络基本概念" class="headerlink" title="网络基本概念"></a><a href="#%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA">网络基本概念</a></h3><ul><li>网络</li><li>局域网<code>LAN</code>(Local Area Network): 一个小区域内的多台设备相互连接形成的计算机组</li><li>以太网: 一种计算机局域网技术, 目前应用最普遍的局域网技术, 该技术规定了网络连接的一些规则&#x2F;协议<ul><li>以太网网络拓扑结构: 设备相互连接起来的物理布局构成的几何形状<ul><li>树形,网状,总线型,环形,星型</li></ul></li></ul></li><li>城域网<code>MAN</code>(Metropolitan Area Network): 城市范围的网络</li><li>广域网<code>WAN</code>(Wide Area Network): 超长距离专线连接的网络, 网状结构</li><li>互联网(因特网)</li><li>万维网: 存储在连接到因特网的计算机上的网页的集合</li></ul><h3 id="IP-端口-Mac地址"><a href="#IP-端口-Mac地址" class="headerlink" title="IP, 端口, Mac地址"></a><a href="#%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA"><code>IP</code>, 端口, <code>Mac</code>地址</a></h3><blockquote><p>作用: 互联设备中的设备地址</p></blockquote><ul><li><code>IP</code>地址(Internet Protocol Address)&#x2F;网际协议地址: 按协议规定的设备在网络中的具体地址, 用于定位<ul><li>按协议分<ul><li><code>IPv4</code>:从<code>0.0.0.0</code>到<code>255.255.255.255</code></li><li><code>IPv6</code>:从<code>0:0:0:0:0:0:0:0</code>到<code>65535:65535:65535:65535:65535:65535:65535:65535</code></li></ul></li><li>按使用范围分<ul><li>公网<code>IP</code>: 想要连接外网, 和远程设备通信时使用的<code>IP</code></li><li>私网<code>IP</code>&#x2F;局域网<code>IP</code>: 只能在局域网内通信</li></ul></li></ul></li><li>端口: 区分一个设备上的不同应用程序, 从<code>0</code>到<code>65535</code>, 需要自定义不能与其他程序相同的端口号, 一般<code>1024</code>以上</li><li><code>Mac</code>地址Media Access Control Address: 在网络中标识一个网卡的地址, 通常为12个16进制数, 由网卡制造商写入</li></ul><h3 id="数据通信模型"><a href="#数据通信模型" class="headerlink" title="数据通信模型"></a><a href="#%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA">数据通信模型</a></h3><ul><li>数据通信模型<ul><li>分散式<code>Decentralized</code>: 每一个计算机之间没有信息共享</li><li>集中式<code>Centralized</code>: 一个中心计算机保存所有数据, 其他计算机访问中心计算机获得数据</li><li>分布式<code>Distributed</code>: 两者的混合</li></ul></li><li><code>C/S</code>模型: 客户端<code>Client</code>和服务端<code>Server</code>模式</li><li><code>B/S</code>模型: 基于Web的通信模型(<code>Browse/Server</code>), 使用HTTP传送信息, 是一种特殊的<code>C/S</code>模型, 特殊之处在于客户端是浏览器, 不用自己开发</li><li><code>P2P</code>模型: 对等互联(<code>Peer-to-Peer</code>), 每一个设备同时运行<code>Client</code>和<code>Server</code>部分, 游戏一般不用</li></ul><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a><a href="#%E7%9B%AE%E5%BD%95">网络协议</a></h2><ul><li>计算机之间交换信息时约定的规则</li><li><code>OSI</code>模型是网络通信的基本规则, <code>TCP</code>&#x2F;<code>IP</code>协议是基于<code>OSI</code>模型的工业实现</li></ul><h3 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a><a href="#%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE"><code>OSI</code>模型</a></h3><ul><li>Open System Interconnection Reference Model是一种概念模型, 所有计算机都遵守这个规则就可以互相通信, 包含七个层级: 应用层,表示层, 会话层, 传输层, 网络层, 数据链路层, 物理层</li><li>物理层: 真正的二进制数据</li><li>数据链路层: 确定Mac地址head信息, 分离head和data</li><li>网络层: 确定IP地址, 路由等head信息</li><li>传输层: 提供端口, 版本, 协议等head信息</li><li>应用层: 提供原始数据data和协议(FTP,HTTP,SMTP等)head信息</li><li>表示层: 数据格式转化, 能与各系统兼容的格式和统一通用格式之间互换</li><li>会话层: 通信管理, 判断是否发送完毕, 是否收到, 管理断开连接等功能</li></ul><h3 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP&#x2F;IP协议"></a><a href="#%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE"><code>TCP</code>&#x2F;<code>IP</code>协议</a></h3><ul><li>Transmission Control Protocol&#x2F;Internet Protocol: 传输控制&#x2F;网络协议, 网络通讯协议, 包含FTP, SMTP, TCP, UDP等协议簇, TCP和IP最具代表性</li><li><code>OSI</code>模型只是一个描述性概念, 描述了应该如何实现, <code>TCP</code>&#x2F;<code>IP</code>协议是实际实现, 包含4层<ul><li>应用层: 应用层, 表示层, 会话层</li><li>传输层: 传输层</li><li>网络层: 网络层</li><li>网络接口层: 数据链路层, 物理层</li></ul></li><li>重要协议<ul><li>应用层<ul><li>HTTP: 超文本传输协议</li><li>HTTPS: 加密的超文本传输协议</li><li>FTP: 文件传输</li><li>DNS: 域名系统</li><li>SMTP: 简易邮件传输协议</li></ul></li><li>传输层<ul><li>TCP: 传输控制协议</li><li>UDP: 用户数据报协议</li></ul></li><li>网络层<ul><li>IP协议</li></ul></li></ul></li><li>TCP协议:<ul><li>特点<ul><li>必需建立连接</li><li>只能一对一</li><li>消息发送失败会重新发送, 不允许丢包</li><li>有序</li></ul></li><li>三次握手建立连接<ul><li>C -&gt; S 发送连接请求, 监听返回消息</li><li>S -&gt; C 监听请求, 收到请求, 发送同意回执</li><li>C -&gt; S 发送确认状态</li><li>之后就可以互相通信</li></ul></li><li>四次挥手<ul><li>C -&gt; S 发送断开连接请求, 监听返回消息</li><li>S -&gt; C 发送收到, 发送剩余需要发送的数据</li><li>S -&gt; C 发送同意断连信息</li><li>C -&gt; S 发送等待信息并开始倒计时, 倒计时时间内没有回复就正式断开连接</li></ul></li><li>应用于保证信息准确性的场景: 文件传输, 远程登录等</li></ul></li><li>UDP协议:<ul><li>特点<ul><li>无需连接</li><li>可靠性低, 可能丢失, 丢失后不会重发</li><li>传输效率高, 性能消耗小, 处理速度快</li><li>n对n</li></ul></li><li>应用于要求实时性的场景: 直播, 语音视频通话等</li></ul></li><li>TCP与UDP的对比<table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接方面</td><td>必需先建立连接才能通信</td><td>不必连接就可以通讯</td></tr><tr><td>安全方面</td><td>无差错, 不丢失, 不重复, 按序到达</td><td>只会提交, 不保证到达</td></tr><tr><td>传输效率</td><td>相对较低</td><td>相对较高</td></tr><tr><td>连接对象</td><td>一对一</td><td>一对一, 一对多, 多对一, 多对多</td></tr></tbody></table></li></ul><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a><a href="#%E7%9B%AE%E5%BD%95">网络通信</a></h2><h3 id="通信前"><a href="#通信前" class="headerlink" title="通信前"></a><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1">通信前</a></h3><ul><li><code>IPAddress</code>类<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//初始化</span><br>IPAddress ip1 = <span class="hljs-keyword">new</span> IPAddress(<span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[]&#123;<span class="hljs-number">222</span>,<span class="hljs-number">208</span>,<span class="hljs-number">105</span>,<span class="hljs-number">1</span>&#125;); <span class="hljs-comment">//byte[]数组</span><br>IPAddress ip2 = <span class="hljs-keyword">new</span> IPAddress(<span class="hljs-number">0x79666F01</span>); <span class="hljs-comment">//16进制long变量</span><br>IPAddress ip3 = IPAddress.Parse(<span class="hljs-string">&quot;222.208.105.1&quot;</span>); <span class="hljs-comment">//string, 推荐</span><br></code></pre></td></tr></table></figure></li><li><code>IPEndPoint</code>类<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//初始化</span><br>IPEndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;222.208.105.1&quot;</span>),<span class="hljs-number">8080</span>);<br></code></pre></td></tr></table></figure></li><li>域名解析<ul><li>DNS: 一个将域名与IP地址相互映射的分布式数据库</li><li><code>IPHostEntry</code>类<ul><li>实例化没有意义, 作为某些方法的返回值使用</li><li><code>AddressList</code>: 关联IP</li><li><code>HostName</code>: DNS名称</li></ul></li><li><code>Dns</code>静态类<ul><li><code>GetHostName()</code>: 本机名</li><li><code>Dns.GetHostEntry[Async](&quot;www.baidu.com&quot;)</code><ul><li>使用<code>Task</code>声明异步时, 使用<code>task.Result</code>获取结果</li></ul></li></ul></li></ul></li><li>网络数据的序列化与反序列化: <code>BitConverter</code>类和<code>Encoding</code>类<ul><li>常见的字符编码<ul><li><code>ASCII</code>(美国), <code>GB2312</code>(中国), <code>Shift_JIS</code>(日本), 世界通用的<code>Unicode</code>及基于此形成的<code>UTF-8</code>,<code>UTF-16</code>,<code>UTF-32</code></li><li><code>ASCII</code>使用后7位规定了128个字符, 其他字符基本都是对<code>ASCII</code>的扩充</li><li><code>Unicode</code>包含了世界上所有符号, 但只规定了符号和二进制的对应关系, 并没有规定如何存储, <code>UTF-X</code>才是具体的编码方案, <code>UTF-8</code>使用1&#x2F;2&#x2F;3&#x2F;4个字节存储, <code>UTF-16</code>使用2&#x2F;4个字节存储, <code>UTF-32</code>固定使用4个字节存储</li></ul></li><li><code>BitConverter</code>: 除<code>string</code>的其他类型与<code>byte[]</code>互转<ul><li>静态方法<code>GetBytes(除string的所有类型)</code></li></ul></li><li><code>Encoding</code>: <code>string</code>转<code>byte[]</code><ul><li><code>Encoding.string编码类型.GetBytes(string)</code></li></ul></li><li>序列化与反序列化<ul><li>序列化: 计算对象字节数, 创建相应容量的字节数组, <code>CopyTo</code>进去. 普通变量类型的字节长度用<code>sizeof(变量类型)</code>获取, 字符串用<code>Encoding.UTF8.GetBytes(stringName).Length</code>获取</li><li>反序列化: 非<code>string</code>类型用<code>BitConverter.To类型(byte数组变量,起始index)</code>, <code>string</code>类型用<code>Encoding.UTF8.GetString(byte数组,起始index,要转的部分的长度int)</code>, 按照<code>Writing()</code>中的顺序依次从获得的<code>byte[]</code>中取出来</li><li>序列化数据基类  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//序列化数据基类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseData</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetBytesNum</span>()</span>;<span class="hljs-comment">//返回成员变量的size之和</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">Writing</span>()</span>;<br>    <span class="hljs-comment">//在Writing中声明index和byte[GetBytesNum()], 调用Write函数返回byte[]</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Reading</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-built_in">int</span> beginIndex = <span class="hljs-number">0</span></span>)</span>;<br>    <span class="hljs-comment">//在Reading中begin处读取bytes, 返回这个对象的byte[].Length</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteInt</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        BitConverter.GetBytes(<span class="hljs-keyword">value</span>).CopyTo(bytes,index);<br>        index += <span class="hljs-number">4</span>; <span class="hljs-comment">//sizeof(int)</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteShort</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-built_in">short</span> <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        BitConverter.GetBytes(<span class="hljs-keyword">value</span>).CopyTo(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">short</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLong</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-built_in">long</span> <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        BitConverter.GetBytes(<span class="hljs-keyword">value</span>).CopyTo(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">long</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteFloat</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-built_in">float</span> <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        BitConverter.GetBytes(<span class="hljs-keyword">value</span>).CopyTo(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteByte</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-built_in">byte</span> <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        BitConverter.GetBytes(<span class="hljs-keyword">value</span>).CopyTo(bytes,index);<br>        index++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteBool</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-built_in">bool</span> <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        BitConverter.GetBytes(<span class="hljs-keyword">value</span>).CopyTo(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">bool</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteString</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">byte</span>[] valueBytes = Encoding.UTF8.GetBytes(<span class="hljs-keyword">value</span>);<br>        WriteInt(bytes,valueBytes.Length,<span class="hljs-keyword">ref</span> infex);<br>        valueBytes.CopyTo(bytes,index);<br>        index += valueBytes.Length;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteData</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,BaseData <span class="hljs-keyword">value</span>,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">value</span>.Writing().CopyTo(bytes,index);<br>        index += <span class="hljs-keyword">value</span>.GetBytesNum();<br>    &#125;<br>    <span class="hljs-comment">//反序列化</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> <span class="hljs-title">ReadInt</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span> = BitConverter.ToInt32(bytes,index);<br>        index += <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">short</span> <span class="hljs-title">ReadShort</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">short</span> <span class="hljs-keyword">value</span> = BitConverter.ToInt16(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">short</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">long</span> <span class="hljs-title">ReadLong</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">long</span> <span class="hljs-keyword">value</span> = BitConverter.ToInt64(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">long</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">float</span> <span class="hljs-title">ReadFloat</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">float</span> <span class="hljs-keyword">value</span> = BitConverter.ToSingle(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">byte</span> <span class="hljs-title">ReadByte</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">byte</span> <span class="hljs-keyword">value</span> = bytes[index];<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">byte</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReadBool</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">bool</span> <span class="hljs-keyword">value</span> = BitConverter.ToBoolean(bytes,index);<br>        index += <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">bool</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ReadString</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes,<span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> length = BitConverter.ToInt32(bytes,index);<br>        index += <span class="hljs-number">4</span>;<br>        <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> = Encoding.UTF8.GetString(bytes,index,length);<br>        index += length;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> T <span class="hljs-title">ReadData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> index</span>) <span class="hljs-keyword">where</span> T:BaseData,<span class="hljs-keyword">new</span>()</span><br>    &#123;<br>        T <span class="hljs-keyword">value</span> = <span class="hljs-keyword">new</span> T();<br>        index += t.Reading(bytes,index);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//数据类: 根据成员变量填充基类的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Data</span>:<span class="hljs-title">BaseData</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>    <span class="hljs-comment">//List就先传List的int长度</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetBytesNum</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">4</span> + <span class="hljs-comment">/*sizeof(int)*/</span><br>                <span class="hljs-number">4</span> +<span class="hljs-comment">/*sizeof(int)*/</span><br>                Encoding.UTF8.GetBytes(name).Length +<br>                <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">bool</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">Writing</span>()</span>&#123;<br>        <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[GetBytesNum()];<br>        WriteInt(bytes,age,<span class="hljs-keyword">ref</span> index);<br>        <span class="hljs-comment">//每一个string前都要对应一个int存length,用于反序列化时提供string的长度</span><br>        WrityeInt(bytes,Encoding.UTF8.GetBytes(name).Length,<span class="hljs-keyword">ref</span> index);<br>        WriteString(bytes,name,<span class="hljs-keyword">ref</span> index);<br>        WriteBool(bytes,<span class="hljs-keyword">ref</span> index);<br>        <span class="hljs-keyword">return</span> bytes;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Reading</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-built_in">int</span> beginIndex = <span class="hljs-number">0</span></span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> index = beginIndex;<br>        <span class="hljs-comment">//按在Writing()中定义的byte[]顺序取出</span><br>        age = ReadInt(bytes,index);<br>        name = ReadString(bytes,index);<br>        sex = ReadBool(bytes,index);<br>        <span class="hljs-keyword">return</span> index - beginIndex;<br>        <span class="hljs-comment">//返回这个对象的byte[].Length, 用于在ReadData()中用于index的自增</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//外部使用</span><br><span class="hljs-comment">//序列化为byte[]</span><br>Data data = <span class="hljs-keyword">new</span> Data();<br>data.age = <span class="hljs-number">8</span>;<br>data.name = <span class="hljs-string">&quot;John&quot;</span>;<br>data.sex = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">byte</span>[] dataBytes = data.Writing();<br><span class="hljs-comment">//完成序列化,获得dataBytes</span><br><span class="hljs-comment">//反序列化</span><br>Data d = <span class="hljs-keyword">new</span> Data();<br>d.Reading(dataBytes);<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="网络游戏通信方案"><a href="#网络游戏通信方案" class="headerlink" title="网络游戏通信方案"></a><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1">网络游戏通信方案</a></h3><ul><li>弱联网和强联网<blockquote><p>弱联网: 不频繁通信, 每次只处理一次请求, 之后就断开连接<br><br>e.g. 开心消消乐等休闲游戏<br><br>强联网: 频繁通信, 一直保持连接状态<br><br>e.g. MMORPG, MOBA, ACT游戏</p></blockquote></li><li>长连接和短连接<blockquote><p>短连接: 需要传输数据时连接, 然后断开<br><br>通信方式: HTTP, HTTPS<br><br>长连接: 无论是否需要传输数据, 一直处于连接状态<br><br>通信方式: TCP, UDP</p></blockquote></li><li><code>Socket</code>,<code>HTTP</code>,<code>FTP</code><blockquote><p>Socket: 应用层通信字段, 主要用于长连接<br><br>HTTP(S): 简单的请求-响应协议, 通常运行于TCP协议之上, 主要用于短连接和资源下载<br><br>FTP: 用于文件传输, 基于TCP, 用于资源下载和上传</p></blockquote></li></ul><h3 id="套接字Socket类"><a href="#套接字Socket类" class="headerlink" title="套接字Socket类"></a><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1">套接字<code>Socket</code>类</a></h3><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97socket%E7%B1%BB">常用<code>API</code></a></h4><ul><li>三种类型: 流套接字(TCP用), 数据包套接字(UDP用), 原始套接字(直接访问低层数据, 用于侦听和分析数据包, 不常用)</li><li>实例化参数<ul><li><code>AddressFamily</code>网络寻址枚举<ul><li><code>InterNetwork</code>: <code>IPv4</code></li><li><code>InterNetwork6</code>: <code>IPv6</code></li></ul></li><li><code>SocketType0</code>套接字类型枚举<ul><li><code>Dgram</code>: 数据报, UDP</li><li><code>Stream</code>: 字节流, TCP</li></ul></li><li><code>ProtocolType</code>协议类型枚举<ul><li><code>Tcp</code></li><li><code>Udp</code></li></ul></li></ul></li><li>成员属性<ul><li>连接状态(<code>bool</code>): <code>Connected</code></li><li>准备读取的数据的字节数量(<code>int</code>): <code>Available</code></li><li>本机<code>EndPoint</code>对象(<code>as IPEndedPoint</code>): <code>LocalEndedPoint</code></li><li>远程<code>EndPoint</code>对象(<code>as IPEndedPoint</code>): <code>RemoteEndedPoint</code></li></ul></li><li>成员方法<blockquote><p>服务端</p></blockquote><ul><li>绑定<code>IP</code>和端口号: <code>Bind(IPEndedPoint p)</code></li><li>最大连接客户端数量: <code>Listen(int number)</code></li><li>等待客户端连接: <code>Accept()</code><blockquote><p>客户端</p></blockquote></li><li>连接服务器: <code>Connect()</code><blockquote><p>Both</p></blockquote></li><li>同步和异步发送和接收数据: <code>Send[To]()</code>和<code>Receive()</code></li><li>关闭: <code>Shutdown(SocketShutdown type)</code></li><li>关闭连接: <code>Close()</code></li></ul></li></ul><h4 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97socket%E7%B1%BB">通信流程</a></h4><ul><li><code>TCP</code><pre><code class=" Mermaid">stateDiagram    state Server &#123;        s1:创建Socket        s2:用Bind()绑定本地地址        s3:用Listen()监听        s4:用Accept()等待用户连接        s5:建立连接，Accept()返回新Socket        s6:用Send()和Receive()收发数据        s7:用Shutdown()释放连接        s8:关闭Socket        [*] --&gt; s1        s1 --&gt; s2        s2 --&gt; s3        s3 --&gt; s4        s4 --&gt; s5        s5 --&gt; s6        s6 --&gt; s7        s7 --&gt; s8        s8 --&gt; [*]    &#125;    state Client &#123;        c1 : 创建Socket        c2 : 用Connect()连接服务器        c3 : 用Send()和Receive()收发数据        c4 : 用Shutdown()释放连接        c5 : 关闭Socket        [*]--&gt;c1        c1 --&gt; c2        c2 --&gt; c3        c3 --&gt; c4        c4 --&gt; c5        c5--&gt;[*]    &#125;</code></pre></li><li><code>UDP</code><pre><code class=" Mermaid">stateDiagram    state Server &#123;        s1:创建Socket        s2:用Bind()绑定本地地址        s3:用SendTo()和ReceiveFrom()收发数据        s4:用Shutdown()释放连接        s5:关闭Socket        [*] --&gt; s1        s1 --&gt; s2        s2 --&gt; s3        s3 --&gt; s4        s4 --&gt; s5        s5 --&gt; [*]    &#125;    state Client &#123;        c1 : 创建Socket        c2 : 用Bind()绑定本地地址        c3 : 用SendTo()和ReceiveFrom()收发数据        c4 : 用Shutdown()释放连接        c5 : 关闭Socket        [*]--&gt;c1        c1 --&gt; c2        c2 --&gt; c3        c3 --&gt; c4        c4 --&gt; c5        c5--&gt;[*]    &#125;</code></pre></li></ul><h4 id="TCP同步"><a href="#TCP同步" class="headerlink" title="TCP同步"></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97socket%E7%B1%BB"><code>TCP</code>同步</a></h4><ul><li>服务端: 实例化, 绑定监听等待, 收发消息, 断开关闭<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">static</span> List&lt;Socket&gt; clientSockets = <span class="hljs-keyword">new</span> List&lt;Socket&gt;();<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> isClose = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//s1:创建Socket</span><br><span class="hljs-keyword">static</span> Socket socketTCP;<br>socketTCP = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocaolType.Tcp);<br><span class="hljs-comment">//s2:用Bind()绑定本地地址</span><br><span class="hljs-keyword">try</span><br>&#123;<br>  IPEndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8080</span>);<br>  socketTCP.Bind(ipPoint);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception e)<br>&#123;<br>  Console.WriteLine(<span class="hljs-string">&quot;绑定错误: &quot;</span> + e.Message);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//s3:用Listen()监听</span><br>socketTCP.Listen(<span class="hljs-number">200</span>); <span class="hljs-comment">//最大客户端数量</span><br>Console.WriteLine(<span class="hljs-string">&quot;绑定监听结束, 等待客户端连接&quot;</span>)<br><span class="hljs-comment">//s4:用Accept()等待用户连接 &amp; s5:建立连接，Accept()返回新Socket</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Socket socketClient = socketTCP.Accept(); //阻塞式代码, 有连入后才能继续往下执行</span><br><span class="hljs-comment">Console.WriteLine(&quot;有客户端连入&quot;);</span><br><span class="hljs-comment">*/</span><br>Thread acceptThread = <span class="hljs-keyword">new</span> Thread(AcceptClient);<br>acceptThread.Start();<br><span class="hljs-comment">/*在外部创建一个静态函数, 用于放在线程中循环接听*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AcceptClient</span>()</span><br>&#123;<br>  <span class="hljs-keyword">while</span>(!isClose)&#123;<br>    Socket clientSocket = socketTCP.Accept();<br>    clientSockets.Add(clientSocket);<br>    Console.WriteLine(<span class="hljs-string">&quot;有客户端连入&quot;</span>);<br>    <span class="hljs-comment">//s6:用Send()发数据</span><br>    socketClients.Send(Encoding.UTF8.GetBytes(<span class="hljs-string">&quot;欢迎连入&quot;</span>));<br>  &#125;<br>&#125;<br><span class="hljs-comment">//s6:用Receive()收数据</span><br>Thread rcvMsgThread = <span class="hljs-keyword">new</span> Thread(RcvMsg);<br>rcvMsgThread.Start();<br><span class="hljs-comment">/*外部静态函数*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RcvMsg</span>()</span><br>&#123;<br>  <span class="hljs-built_in">byte</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>]; <span class="hljs-comment">//接收byte[]缓存空间</span><br>  Socket clientSocket;<br>  <span class="hljs-built_in">int</span> i; <span class="hljs-comment">//循环i放外部, 减少循环压力</span><br>  <span class="hljs-keyword">while</span>(!isClose)<br>  &#123;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;clientSockets.Count;i++)&#123;<br>      clientSocket = clientSockets[i];<br>      <span class="hljs-keyword">if</span>(clientSocket.Available &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">int</span> length = socketClient.Receive(res);<br>        <span class="hljs-comment">/*res存放,length获取真正的长度*/</span><br>        <span class="hljs-comment">//使用线程池取线程处理得到的数据, 使用(,)元组传入参数</span><br>        ThreadPool.QueueUserWorkItem(HandleMsg, (clientSocket,Encoding.UTF8.GetString(res,<span class="hljs-number">0</span>,length)));<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*处理数据逻辑*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>&#123;<br>  <span class="hljs-comment">//接收元组参数</span><br>  (Socket skt, <span class="hljs-built_in">string</span> str) info = ((Socket skt,<span class="hljs-built_in">string</span> str))obj;<br>  <span class="hljs-comment">//处理info.s和info.str</span><br>&#125;<br><span class="hljs-comment">//s7:用Shutdown()释放连接 &amp; s8:关闭Socket</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>&#123;<br>  <span class="hljs-built_in">string</span> input = Console.ReadLine();<br>  <span class="hljs-keyword">if</span>(input == <span class="hljs-string">&quot;quit&quot;</span>)&#123;<br>    isClose = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;clientSockets.Count;i++)&#123;<br>      socketClients[i].Shutdown(SocketShutdown.Both);<br>      socketClients[i].Close();<br>    &#125;<br>    clientSockets.Clear();<br>    <span class="hljs-keyword">break</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(input.Substring(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;B:&quot;</span>)&#123;<span class="hljs-comment">/*B:发送广播消息*/</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;clientSockets.Count;i++)&#123;<br>      socketClients[i].Send(Encoding.UTF8.GetBytes(input.Substring(<span class="hljs-number">2</span>)));<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>封装<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ServerSocket</span><br>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isClose;<br>  <span class="hljs-keyword">public</span> Socket socket; <span class="hljs-comment">/*成员Socket*/</span><br>  <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">int</span>,ClientSocket&gt; clientDic = <span class="hljs-comment">/*所有clients*/</span><br>                          <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>,ClientSocket&gt;();<br>  <span class="hljs-comment">//待移除, 避免直接移除导致foreach时出问题</span><br>  <span class="hljs-keyword">private</span> List&lt;ClientSocket&gt; delList = <span class="hljs-keyword">new</span> List&lt;ClientSocket&gt;();<br>  <br>  <span class="hljs-comment">//开启</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">int</span> port, <span class="hljs-built_in">int</span> max</span>)</span>&#123;<br>    socket = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br>    IPEndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(ip),port);<br>    socket.Bind(ipPoint);<br>    socket.Listen(max);<br>    ThreadPool.QueueUserWorkItem(Accept);<br>    ThreadPool.QueueUserWorkItem(Receive);<br>    isClose = <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">//接收连接逻辑</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Accept</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span>&#123;<br>    <span class="hljs-keyword">while</span>(!isClose)<br>    &#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        Socket clientSocket = socket.Accept();<br>        ClientSocket client = <span class="hljs-keyword">new</span> ClientSocket(clientSocket);<br>        <span class="hljs-keyword">lock</span>(clientDic)&#123;<br>          clientDic.Add(client.clientID,client);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Console.WriteLine(e.Message);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//接收数据逻辑</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Receive</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span>&#123;<br>    <span class="hljs-keyword">while</span>(!isClose)<br>    &#123;<br>      <span class="hljs-keyword">if</span>(clientDic.Count &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">lock</span>(clientDic)&#123;<br>          <span class="hljs-keyword">foreach</span> (ClientSocket c <span class="hljs-keyword">in</span> clientDic.Values)<br>          &#123;<br>            c.Receive();<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//关闭</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Close</span>()</span>&#123;<br>    isClose = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">foreach</span> (ClientSocket c <span class="hljs-keyword">in</span> clientDic.Values)<br>    &#123;<br>      c.Close();<br>    &#125;<br>    clientDic.Clear();<br>    socket = <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//广播</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Broadcast</span>(<span class="hljs-params">BaseMsg s</span>)</span>&#123;<br>    <span class="hljs-keyword">lock</span>(clientDic)&#123;<br>      <span class="hljs-keyword">foreach</span> (ClientSocket c <span class="hljs-keyword">in</span> clientDic.Values)&#123;<br>      <span class="hljs-comment">/* 广播的处理逻辑, 待完善</span><br><span class="hljs-comment">      c.Send(s);</span><br><span class="hljs-comment">      */</span><br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//客户端关闭事件</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseClientSocket</span>(<span class="hljs-params">ClientSocket c</span>)</span>&#123;<br>    <span class="hljs-keyword">lock</span>(clientDic)&#123;<br>      c.Close();<br>      <span class="hljs-keyword">if</span>(clientDic.ContainsKey(c.clientID))&#123;<br>        clientDic.Remove(c.clientID);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//准备移除ClientSocket</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddDelSocket</span>(<span class="hljs-params">ClientSocket cs</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!delList.Contains(cs))&#123;<br>      delList.Add(cs);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ClientSocket</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> CLIENT_ID = <span class="hljs-number">1</span>;<span class="hljs-comment">/*静态ID*/</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> clientID; <span class="hljs-comment">/*成员ID*/</span><br>  <span class="hljs-keyword">public</span> Socket socket; <span class="hljs-comment">/*成员Socket*/</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] cacheBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> cacheLength = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">//构造函数</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClientSocket</span>(<span class="hljs-params">Socket s</span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.clientID = CLIENT_ID;<br>    <span class="hljs-keyword">this</span>.socket = s;<br>    CLIENT_ID++;<br>  &#125;<br><br>  <span class="hljs-comment">//连接状态</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsConnected =&gt; <span class="hljs-keyword">this</span>.socket.Connected;<br>  <br>  <span class="hljs-comment">//关闭</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Close</span>()</span>&#123;<br>    <span class="hljs-keyword">if</span>(socket!=<span class="hljs-literal">null</span>)&#123;<br>      socket.Shutdown(SocketShutdown.Both);<br>      socket.Close();<br>      socket = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//发送</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>(<span class="hljs-params">BaseMsg msg</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!IsConnected)&#123;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      socket?.Send(msg.Writing());<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(Exception e)<br>    &#123;<br>      Console.WriteLine(e.message);<br>      Close();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//接收</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Receive</span>()</span>&#123;<br>    <span class="hljs-keyword">if</span>(!IsConnected)&#123;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      <span class="hljs-keyword">if</span>(socket.Available &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">byte</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">5</span>];<br>        <span class="hljs-built_in">int</span> length = socketClient.Receive(res);<br>        HandleRcvMsg(res,length);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        int msgID = BitConverter.ToInt32(res,0);</span><br><span class="hljs-comment">        BaseMsg msg = null;</span><br><span class="hljs-comment">        switch(msgID)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">          case 1001:</span><br><span class="hljs-comment">            msg = new PlayerInfo();</span><br><span class="hljs-comment">            msg.Reading(res,4);</span><br><span class="hljs-comment">            break;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        if(msg==nul)&#123; return;&#125;</span><br><span class="hljs-comment">        ThreadPool.QueueUserWorkItem(HandleMsg,msg);</span><br><span class="hljs-comment">        */</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>      Console.WriteLine(e.Message);<br>      Close();<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//接收数据后处理逻辑</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    BaseMsg m = obj <span class="hljs-keyword">as</span> BaseMsg;<br>    <span class="hljs-keyword">if</span>(m <span class="hljs-keyword">is</span> PlayerInfo)&#123;<br>      PlayerInfo pl = m <span class="hljs-keyword">as</span> PlayerInfo;<br>      <span class="hljs-comment">/*接收到PlayerInfo数据的逻辑*/</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleRcvMsg</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-built_in">int</span> len</span>)</span><br>  &#123;<br>    <span class="hljs-built_in">int</span> msgID = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> msgLength = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> nowIndex = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//拼接</span><br>    bytes.CopyTo(cacheBytes,cacheLength);<br>    cacheLength += len;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>      msgLength = <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">if</span>(cacheLength - nowIndex &gt;= <span class="hljs-number">8</span>)&#123;<br>        <span class="hljs-comment">//解析ID</span><br>        msgID = BitConverter.ToInt32(cacheBytes, nowIndex);<br>        nowIndex += <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//解析长度</span><br>        msgLength = BitConverter.ToInt32(cacheBytes, nowIndex);<br>        nowIndex += <span class="hljs-number">4</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(cacheLength - nowIndex &gt;= msgLength &amp;&amp; msgLength != <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-comment">/*保证进去时上一段代码已经执行, 避免上一次的数据影响下次*/</span><br>        <span class="hljs-comment">//解析数据</span><br>        BaseMsg baseMsg = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span>(msgID)<br>        &#123;<br>          <span class="hljs-keyword">case</span> <span class="hljs-number">1001</span>:<br>            PlayerInfo pl = <span class="hljs-keyword">new</span> PlayerInfo();<br>            pl.Reading(cacheBytes,nowIndex);<br>            baseMsg = pl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(baseMsg!=<span class="hljs-literal">null</span>)&#123;<br>          ThreadPool.QueueUserWorkItem(HandleMsg,msg);<br>        &#125;<br>        nowIndex += len;<br>        <span class="hljs-keyword">if</span>(nowIndex==cacheLength)&#123;<br>          cacheLength = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(len != <span class="hljs-number">-1</span>)&#123;<br>          nowIndex -= <span class="hljs-number">8</span>;<br>          Array.Copy(cacheBytes, nowIndex, cacheBytes, <span class="hljs-number">0</span>, len - nowIndex);<br>          cacheLength -= nowIndex;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>外部使用<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#">ServerSocket s = <span class="hljs-keyword">new</span> ServerSocket();<br>s.Start(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">5</span>);<br>Console.WriteLine(<span class="hljs-string">&quot;服务器开启成功&quot;</span>);<br><span class="hljs-keyword">while</span>(!s.isClose)&#123;<br>  <span class="hljs-built_in">string</span> <span class="hljs-keyword">in</span> = Console.ReadLine();<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">in</span> == <span class="hljs-string">&quot;quit&quot;</span>)&#123;<br>    s.Close();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">in</span>.Substring(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;B:&quot;</span>)&#123;<br>    <span class="hljs-comment">/* 广播处理逻辑, 待完善, 可以声明一个继承BaseMsg的广播消息类发送</span><br><span class="hljs-comment">    s.Broadcast(in.Substring(2));</span><br><span class="hljs-comment">    */</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>客户端: 实例化, 连接, 收发消息, 断开关闭<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//c1 : 创建Socket</span><br>Socket socketTCP = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocaolType.Tcp);<br><span class="hljs-comment">//c2 : 用Connect()连接服务器</span><br>IPEndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8080</span> );<br><span class="hljs-keyword">try</span><br>&#123;<br>  socketTCP.Connect(ipPoint);<br>&#125;<br><span class="hljs-keyword">catch</span> (SocketException e)<br>&#123;<br>  <span class="hljs-keyword">if</span>(e.ErrorCode == <span class="hljs-number">10061</span>)&#123;<br>      Console.WriteLine(<span class="hljs-string">&quot;服务器拒绝连接&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span>&#123;<br>      Console.WriteLine(<span class="hljs-string">&quot;连接失败: &quot;</span> + e.ErrorCode);<br>  &#125;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//c3 : 用Send()和Receive()收发数据</span><br><span class="hljs-built_in">byte</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-built_in">int</span> length = socketTCP.Receive(res);<br>Console.WriteLine(<span class="hljs-string">&quot;服务器消息: &quot;</span> + Encoding.UTF8.GetString(res,<span class="hljs-number">0</span>,length));<br>socketTCP.Send(Encoding.UTF8.GetBytes(<span class="hljs-string">&quot;这里是客户端&quot;</span>));<br><span class="hljs-comment">//c4 : 用Shutdown()释放连接</span><br>socketTCP.Shutdown(SocketShutdown.Both);<br><span class="hljs-comment">//c5 : 关闭Socket</span><br>socketTCP.Close();<br></code></pre></td></tr></table></figure><ul><li>Mono单例模式: 客户端网络通信管理器<code>NetMgr</code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NetMgr</span> : <span class="hljs-title">MonoBehavior</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NetMgr instance;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> NetMgr Instance =&gt; instance;<br>  <span class="hljs-keyword">private</span> Socket socket;<br>  <span class="hljs-keyword">private</span> Queue&lt;BaseMsg&gt; sendMsgQueue = <span class="hljs-keyword">new</span> Queue&lt;BaseMsg&gt;();<br>  <span class="hljs-comment">/*用于发送消息的容器队列 主线程存 发送线程取*/</span><br>  <span class="hljs-keyword">private</span> Queue&lt;BaseMsg&gt; rcvMsgQueue = <span class="hljs-keyword">new</span> Queue&lt;BaseMsg&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] cacheBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>]; <span class="hljs-comment">//分包暂存用</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> cacheLength = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isConnected = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>  &#123;<br>    instance = <span class="hljs-keyword">this</span>;<br>    DontDestroyOnLoad(<span class="hljs-keyword">this</span>.gameObject);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(rcvMsgQueue.Count &gt; <span class="hljs-number">0</span>)&#123;<br>      BaseMsg msg = rcvMsgQueue.Dequeue();<br>      <span class="hljs-keyword">if</span>(msg <span class="hljs-keyword">is</span> PlayerInfo)&#123;<br>        PlayerInfo pl = msg <span class="hljs-keyword">as</span> PlayerInfo;<br>        <span class="hljs-comment">/*pl逻辑*/</span><br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>  &#123;<br>    Close();<br>  &#125;<br><br>  <span class="hljs-comment">//连接</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">int</span> port</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(isConnected)&#123; <span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">if</span>(socket == <span class="hljs-literal">null</span>)&#123;<br>      socket = <span class="hljs-keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocaolType.Tcp);<br>    &#125;<br>    IPEndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(ip),port);<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      socket.Connect(ipPoint);<br>      ThreadPool.QueueUserWorkItem(SendMsg);<br>      ThreadPool.QueueUserWorkItem(ReceiveMsg);<br>      isConnected = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (SocketException e)<br>    &#123;<br>      isConnected = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">if</span>(e.ErrorCode == <span class="hljs-number">10061</span>)&#123;<br>          Console.WriteLine(<span class="hljs-string">&quot;服务器拒绝连接&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span>&#123;<br>          Console.WriteLine(<span class="hljs-string">&quot;连接失败: &quot;</span> + e.ErrorCode);<br>      &#125;<br>    &#125;        <br>  &#125;<br><br>  <span class="hljs-comment">//发送数据</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>(<span class="hljs-params">BaseMsg m</span>)</span><br>  &#123;<br>    sendMsgQueue.Enqueue(m);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">while</span>(isConnected)<br>    &#123;<br>      <span class="hljs-keyword">if</span>(sendMsgQueue.Count &gt; <span class="hljs-number">0</span>)&#123;<br>        socket?.Send(sendMsgQueue.Dequeue().Writing());<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//接收数据</span><br>  <span class="hljs-comment">/*这里接收的数据在rcvMsgQueue中, 在Update中监听收取*/</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReceiveMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">while</span>(isConnected)<br>    &#123;<br>      <span class="hljs-keyword">if</span>(socket.Available &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">byte</span>[] rcvBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        <span class="hljs-built_in">int</span> rcvLength = socket.Receive(rcvBytes);<br>        HandleRcvMsg(rcvBytes,rcvLength); <span class="hljs-comment">//分包黏包判断</span><br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HandleRcvMsg</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-built_in">int</span> len</span>) <span class="hljs-comment">//分包黏包判断</span></span><br>  &#123;<br>    <span class="hljs-built_in">int</span> msgID = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> msgLength = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> nowIndex = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//拼接</span><br>    bytes.CopyTo(cacheBytes,cacheLength);<br>    cacheLength += len;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>      msgLength = <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">if</span>(cacheLength - nowIndex &gt;= <span class="hljs-number">8</span>)&#123;<br>        <span class="hljs-comment">//解析ID</span><br>        msgID = BitConverter.ToInt32(cacheBytes, nowIndex);<br>        nowIndex += <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//解析长度</span><br>        msgLength = BitConverter.ToInt32(cacheBytes, nowIndex);<br>        nowIndex += <span class="hljs-number">4</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(cacheLength - nowIndex &gt;= msgLength &amp;&amp; msgLength != <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-comment">/*保证进去时上一段代码已经执行, 避免上一次的数据影响下次*/</span><br>        <span class="hljs-comment">//解析数据</span><br>        BaseMsg baseMsg = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span>(msgID)<br>        &#123;<br>          <span class="hljs-keyword">case</span> <span class="hljs-number">1001</span>:<br>            PlayerInfo pl = <span class="hljs-keyword">new</span> PlayerInfo();<br>            pl.Reading(cacheBytes,nowIndex);<br>            baseMsg = pl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(baseMsg!=<span class="hljs-literal">null</span>)&#123; rcvQueue.Enqueue(baseMsg);&#125;<br>        nowIndex += len;<br>        <span class="hljs-keyword">if</span>(nowIndex==cacheLength)&#123;<br>          cacheLength = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//分包</span><br>        <span class="hljs-comment">//如果解析了头部而不解析数据, 则nowIndex - 8并重新存</span><br>        <span class="hljs-keyword">if</span>(len != <span class="hljs-number">-1</span>)&#123;<br>          nowIndex -= <span class="hljs-number">8</span>;<br>          Array.Copy(cacheBytes, nowIndex, cacheBytes, <span class="hljs-number">0</span>, len - nowIndex);<br>          cacheLength -= nowIndex;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//关闭</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Close</span>()</span><br>  &#123;<br>    isConnected = <span class="hljs-literal">false</span>;<br>    socket?.Shutdown(SocketShutdowm.Both);<br>    socket?.Disconnect(<span class="hljs-literal">false</span>);<br>    socket?.Close();<br>    socket = <span class="hljs-literal">null</span>;<br>    isConnected = <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>外部使用: 在游戏<code>Main</code>方法的<code>Start()</code>中为其专门创建一个GO使用<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>  <span class="hljs-comment">//为NetMgr初始化一个GO    </span><br>  <span class="hljs-keyword">if</span>(NetMgr.Instance == <span class="hljs-literal">null</span>)&#123;<br>    GameObject netmgr = <span class="hljs-keyword">new</span> GameObject(<span class="hljs-string">&quot;netmgr&quot;</span>);<br>    netmgr.AddComponent&lt;NetMgr&gt;();<br>  &#125;<br>  <br>  <span class="hljs-comment">//然后可以连接和发送消息</span><br>  NetMgr.Instance.Connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8080</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>区分消息类型<blockquote><p>获取到的字节数组如何区分是什么类 &gt; 在消息头部添加消息ID用于识别</p></blockquote><ul><li>创建继承<code>BaseData</code>的消息基类<code>BaseMsg</code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseMsg</span>:<span class="hljs-title">BaseData</span><br>&#123;<br>  <span class="hljs-comment">/*三个override*/</span><br><br>  <span class="hljs-comment">//子类重写</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetID</span>()</span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>消息数据类<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerInfo</span>:<span class="hljs-title">BaseMsg</span><br>&#123;<br>  <span class="hljs-built_in">string</span> name;<br>  <span class="hljs-built_in">int</span> age;<br>  <br>  <span class="hljs-comment">//四个override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetBytesNum</span>()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span> + <span class="hljs-comment">/*消息ID的int*/</span><br>            <span class="hljs-number">4</span> + <span class="hljs-comment">/*用于存储消息长度, 以检验分包和黏包*/</span><br>            <span class="hljs-number">4</span> + <span class="hljs-comment">/*string前的int*/</span><br>            Encoding.UTF8.GetBytes(name).Length +<br>            <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">bool</span>) <span class="hljs-comment">/*age的int*/</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">Writing</span>()</span>&#123;<br>    <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>,bytesnum = GetBytesNum();<br>    <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[bytesnum];<br>    WriteInt(bytes,GetID(),<span class="hljs-keyword">ref</span> index); <span class="hljs-comment">//消息ID的位置</span><br>    WriteInt(bytes,bytesnum - <span class="hljs-number">8</span>, <span class="hljs-keyword">ref</span> index); <span class="hljs-comment">//消息的长度</span><br>    WrityeInt(bytes,Encoding.UTF8.GetBytes(name).Length,<span class="hljs-keyword">ref</span> index);<br>    WriteString(bytes,name,<span class="hljs-keyword">ref</span> index);<br>    WriteInt(bytes,age,<span class="hljs-keyword">ref</span> index);<br>    <span class="hljs-keyword">return</span> bytes;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Reading</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-built_in">int</span> beginIndex = <span class="hljs-number">0</span></span>)</span><br>  &#123;<br>    <span class="hljs-built_in">int</span> index = beginIndex;<br>    <span class="hljs-comment">//识别消息ID应在Reading之前, Reading专门处理数据问题</span><br>    name = ReadString(bytes,index);<br>    age = ReadInt(bytes,index);<br>    <span class="hljs-keyword">return</span> index - beginIndex;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetID</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1001</span>; <span class="hljs-comment">//自定义标识ID, 也可以返回short,long</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>Socket</code>接收消息前<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">//临时byte[]</span><br><span class="hljs-built_in">int</span> rcvLength = socket.Receive(bytes); <span class="hljs-comment">//真实长度</span><br><span class="hljs-built_in">int</span> msgID = BitConverter.ToInt32(bytes,<span class="hljs-number">0</span>); <span class="hljs-comment">//获得消息ID</span><br><span class="hljs-keyword">switch</span>(msgID) <span class="hljs-comment">//消息ID识别分支</span><br>&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1001</span>:<br>    PlayerInfo pi = <span class="hljs-keyword">new</span> PlayerInfo();<br>    pi.Reading(bytes,<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>分包和黏包<blockquote><p>分包: 一个消息被分成了多个消息进行发送;<br>黏包: 一个消息和另一个消息黏在了一起<br>( 以上两者可能同时发生 )<br>解决思路: 加一个长度头部, 根据长度判断是否完整&#x2F;分包&#x2F;黏包</p></blockquote></li><li>心跳消息: 长连接游戏中, 客户端按时不断发消息, 服务端一直检测消息<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//消息类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HeartMsg</span>:<span class="hljs-title">BaseMsg</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetBytesNum</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>; <span class="hljs-comment">//不需要内容, 只需要头部ID和Length</span><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">Writing</span>()</span><br>  &#123;<br>    <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[GetBytesNum()];<br>    WriteInt(bytes,GetID(),<span class="hljs-keyword">ref</span> index);<br>    WriteInt(bytes,<span class="hljs-number">0</span>,<span class="hljs-keyword">ref</span> index);<br>    <span class="hljs-keyword">return</span> bytes;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Reading</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-built_in">int</span> beginIndex = <span class="hljs-number">0</span></span>)</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetID</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">999</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//NetMgr类</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> HEART_MSG_TIME = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span> HeartMsg heartMsg = <span class="hljs-keyword">new</span> HeartMsg();<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>&#123;<br>  InvokeRepeating(<span class="hljs-string">&quot;SendHeartMsg&quot;</span>,<span class="hljs-number">0</span>,HEART_MSG_TIME);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendHeartMsg</span>()</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(isConnected)&#123;<br>    Send(heartMsg);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//ClientSocket</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">long</span> crtTime = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TIME_OUT_TIME = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//收到消息的switch</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-number">999</span>: <span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//Handle消息</span><br>  crtTime = DataTime.Now.Ticks / TimeSpan.TicksPerSecond;<br>  <span class="hljs-comment">/*更新时间*/</span><br><span class="hljs-comment">//检查是否超时的函数</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CheckTimeOut</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(crtTime != <span class="hljs-number">-1</span> &amp;&amp; <br>  DataTime.Now.Ticks / TimeSpan.TicksPerSecond &gt;= TIME_OUT_TIME)<br>  &#123;<br>    <span class="hljs-keyword">this</span>.AddDelList(<span class="hljs-keyword">this</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">//在Receive函数中添加该函数</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="TCP异步"><a href="#TCP异步" class="headerlink" title="TCP异步"></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97socket%E7%B1%BB"><code>TCP</code>异步</a></h4><ul><li>异步原理<ul><li>线程回调<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//Async</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CountAsync</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> second, Action callback</span>)</span><br>&#123;<br>  Thread t = <span class="hljs-keyword">new</span> t(() = &#123;<br>    <span class="hljs-keyword">while</span>(second&gt;<span class="hljs-number">0</span>)&#123;<br>      Console.WriteLine(second);<br>      Thread.Sleep(<span class="hljs-number">1000</span>);<br>      second--;<br>    &#125;<br>    callback?.Invoke();<br>  &#125;);<br>  t.Start();<br>&#125;<br><br><span class="hljs-comment">//调用</span><br>CountAsync(<span class="hljs-number">3</span>,() = &#123;<br>  Console.WriteLine(<span class="hljs-string">&quot;结束&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">结束</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li>分步执行, <code>await</code>时返回出去, 执行完毕后继续<code>await</code>后面的<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//async</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CountAsync</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> second</span>)</span><br>&#123;<br>  <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>    <span class="hljs-keyword">while</span>(second&gt;<span class="hljs-number">0</span>)&#123;<br>      Console.WriteLine(second);<br>      Thread.Sleep(<span class="hljs-number">1000</span>);<br>      second--;<br>    &#125;<br>  &#125;);<br>  Console.WriteLine(<span class="hljs-string">&quot;结束&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//调用</span><br>CountAsync(<span class="hljs-number">3</span>);<br>Console.WriteLine(<span class="hljs-string">&quot;a&quot;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">a</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">结束</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul></li><li><code>Socket</code> <code>TCP</code>中的异步方法(<code>Begin</code>与<code>End</code>)<ul><li>函数参数<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//回调函数参数IAsyncResult</span><br><span class="hljs-comment">//AsyncState调用异步方法时传入的参数</span><br><span class="hljs-comment">//AsyncWaitHandle同步等待</span><br></code></pre></td></tr></table></figure></li><li>服务器<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//1. 接收连接</span><br>Socket socketTCP = <span class="hljs-keyword">new</span> Socket(..,..,..);<br>socketTCP.BeginAccpet(BeginBeginAccept(res),socketTCP);<br><span class="hljs-comment">/*res -&gt; IAsyncResult*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">BeginBeginAccept</span>(<span class="hljs-params">IAsyncResult res</span>)</span><br>&#123;<br>  <span class="hljs-keyword">try</span><br>  &#123;<br>    Socket s = res.AsyncState <span class="hljs-keyword">as</span> Socket;<br>    <span class="hljs-comment">/*res.AsyncState -&gt; BeginAccept的第二个参数*/</span><br>    Socket clientSocket = s.EndAccpet(res);<br>    <span class="hljs-comment">/*EndSocket返回值为客户端Socket*/</span><br>    s.BeginAccept(res,s);<br>    <span class="hljs-comment">/*这里不算递归*/</span><br>  &#125;<br>  <span class="hljs-keyword">catch</span> (SocketException e)<br>  &#123;<br>    print(e.SocketErrorCode);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//2. 接收消息</span><br>BeginReceive(存储数组, index, 数组长度, 标识枚举, 回调函数, AsyncState)<br></code></pre></td></tr></table></figure></li><li>客户端<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//1. 开始连接</span><br>IPEndPoint ipPoint = <span class="hljs-keyword">new</span> (IPAddress.Parse(<span class="hljs-string">&quot;localhost&quot;</span>),<span class="hljs-number">8080</span>);<br>Socket socketTCP = <span class="hljs-keyword">new</span> Socket(..,..,..);<br>socketTCP.BeginConnect(ipPoint,(res)=&gt;&#123;<br>  Socket s = res.AsyncState <span class="hljs-keyword">as</span> Socket;<br>  <span class="hljs-keyword">try</span><br>  &#123;<br>    s.EndConnect(res);<br>    <span class="hljs-comment">//连接成功</span><br>  &#125;<br>  <span class="hljs-keyword">catch</span> (SocketException e)<br>  &#123;<br>    <span class="hljs-comment">//连接失败</span><br>  &#125;<br>&#125;,socketTCP);<br><br><span class="hljs-comment">//2. 发送消息</span><br>BeginSend(数组, 标识, 回调, AsyncState)<br></code></pre></td></tr></table></figure></li><li>封装<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ClientSocket</span><br>&#123;<br>  <span class="hljs-keyword">public</span> Socket socket;<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> clientID;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> CLIENT_BEGIN_ID = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] cacheBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> cacheNum = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClientSocket</span>(<span class="hljs-params">Socket socket</span>)</span>&#123;<br>    clientID = CLIENT_BEGIN_ID++;<br>    <span class="hljs-keyword">this</span>.socket = socket;<br><br>    <span class="hljs-keyword">this</span>.socket.BeginReceive(cacheBytes, cacheNum, <br>                            cacheBytes.Length, SocketFlags.None, <br>                            ReceiveCallback, <span class="hljs-literal">null</span>);<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReceiveCallback</span>(<span class="hljs-params">IAsyncResult res</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      cacheNum = <span class="hljs-keyword">this</span>.socket.EndReceive(res);<br>      <span class="hljs-comment">/*处理逻辑*/</span><br>      cacheNum = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.socket.Connected)&#123;<br>        <span class="hljs-keyword">this</span>.socket.BeginReceive(cacheBytes, cacheNum, <br>                            cacheBytes.Length, SocketFlags.None, <br>                            ReceiveCallback, <span class="hljs-literal">null</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (SocketException e)<br>    &#123;<br>      Debug.log(e.SocketErrorCode + e.Message);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.socket.Connected)&#123;<br>      <span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(s);<br>      <span class="hljs-keyword">this</span>.socket.BeginSend(bytes, <span class="hljs-number">0</span>, bytes.Length, SocketFlags.None, SendCallback, <span class="hljs-literal">null</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendCallback</span>(<span class="hljs-params">IAsyncResult res</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.socket.Connected)&#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        <span class="hljs-keyword">this</span>.socket.EndSend(res);<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (SocketException e)<br>      &#123;<br>        Debug.log(e.SocketErrorCode + e.Message);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ServerSocket</span><br>&#123;<br>  <span class="hljs-keyword">public</span> Socket socket;<br>  <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">int</span>,ClientSocket&gt; clientDic = <span class="hljs-keyword">new</span> ();<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">int</span> port, <span class="hljs-built_in">int</span> num</span>)</span>&#123;<br>    socket = <span class="hljs-keyword">new</span> (..,..,..);<br>    IPPoint ipPoint = <span class="hljs-keyword">new</span> (IPAddress.Parse(<span class="hljs-string">&quot;217.0.0.1&quot;</span>),<span class="hljs-number">8080</span>);<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      socket.Bind(ipPoint);<br>      socket.Listen(num);<br>      socket.BeginAccept(AcceptCallback,<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>      Debug.log(e.Message);<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AcceptCallback</span>(<span class="hljs-params">IAsyncResult res</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      ClientSocket client = <span class="hljs-keyword">new</span> (socket.EndAccept(res));<br>      clientDic.Add(client.ID,client);<br>      socket.BeginAccept(AcceptCallback,<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (SocketException e)<br>    &#123;<br>      Debug.log(e.SocketErrorCode + e.Message);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NetAsyncMgr</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NetAsyncMgr instance;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Instance =&gt; instance;<br>  <span class="hljs-keyword">private</span> Socket socket;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] cacheBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> byteNum = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>  &#123;<br>    instance = <span class="hljs-keyword">this</span>;<br>    DontDestroyOnLoad(<span class="hljs-keyword">this</span>.gameObject);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">int</span> port</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span> &amp;&amp; socket.Connected)&#123; <span class="hljs-keyword">return</span>;&#125;<br>    IPPoint ipPoint = <span class="hljs-keyword">new</span> (IPAddress.Parse(ip),port);<br>    socket = <span class="hljs-keyword">new</span> Socket(..,..,..);<br>    SocketAsyncEventArgs args = <span class="hljs-keyword">new</span> ();<br>    args.RemoteEndPoint = ipPoint;<br>    args.Completed += ((socket,args) =&gt; &#123;<br>      <span class="hljs-keyword">if</span>(args.SocketError = SocketError.Success)&#123;<br>        <span class="hljs-comment">//连接成功</span><br>        SocketAsyncEventArgs rcvArgs = <span class="hljs-keyword">new</span> ();<br>        rcvArgs.SetBuffer(cacheBytes,<span class="hljs-number">0</span>,cacheNum);<br>        rcvArgs.Completed += RcvCallback;<br>        <span class="hljs-keyword">this</span>.socket.ReceiveAsync(rcvArgs);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        Debug.log(args.SocketError);<br>      &#125;<br>    &#125;);<br>    socket.ConnectAsync(args);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RcvCallback</span>(<span class="hljs-params">Object obj, SocketAsyncEventArgs args</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(args.SocketError = SocketError.Success)&#123;<br>        <span class="hljs-comment">//连接成功</span><br>        <span class="hljs-comment">//args.Buffer </span><br>        <span class="hljs-comment">//args.BytesTransferred</span><br>        rcvArgs.SetBuffer(<span class="hljs-number">0</span>,args.Buffer.Length);<br>        <span class="hljs-keyword">this</span>.socket.ReceiveAsync(args);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        Debug.log(args.SocketError);<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Close</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span>)&#123;<br>      socket.Shutdown(SocketShutdown.Both);<br>      socket.DisConnect(<span class="hljs-literal">false</span>);<br>      socket.Close();<br>      socket = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>  &#123;<br>    <span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(s);<br>    SocketAsyncEventArgs rcvArgs = <span class="hljs-keyword">new</span> ();<br>        rcvArgs.SetBuffer(cacheBytes,<span class="hljs-number">0</span>,cacheNum);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><code>Socket</code> <code>TCP</code>中的异步方法(<code>Async</code>)(.Net 3.5)<ul><li>传入参数<code>SocketAsyncEventArgs</code></li><li>服务端<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#">Socket socketTCP = <span class="hljs-keyword">new</span> (..,..,.<span class="hljs-number">.0</span>);<br>SocketAsyncEventArgs e = <span class="hljs-keyword">new</span> SocketAsyncEventArgs();<br>e.Completed += (socket, args) =&gt; &#123;<br>  <span class="hljs-keyword">if</span>(args.SocketError = SocketError.Success)&#123;<br>    Socket clientSocket = args.Success;<br>    (socket <span class="hljs-keyword">as</span> Socket).AcceptAsync(args);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    print(args.SocketError);<br>  &#125;<br>&#125;;<br>socketTCP.AcceptAsync(e);<br></code></pre></td></tr></table></figure></li><li>客户端<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#">Socket socketTCP = <span class="hljs-keyword">new</span> (..,..,.<span class="hljs-number">.0</span>);<br>SocketAsyncEventArgs e = <span class="hljs-keyword">new</span> SocketAsyncEventArgs();<br>e.Completed += (socket, args) =&gt; &#123;<br>  <span class="hljs-keyword">if</span>(args.SocketError = SocketError.Success)&#123;<br>    <span class="hljs-comment">//连接成功</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    print(args.SocketError);<br>  &#125;<br>&#125;;<br>socketTCP.ConnectAsync(e);<br></code></pre></td></tr></table></figure></li><li>两端<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//发送消息</span><br>SocketAsyncEventArgs e2 = <span class="hljs-keyword">new</span> ();<br><span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(<span class="hljs-string">&quot;aaa&quot;</span>);<br>e2.SetBuffer(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>e.Completed += (socket, args) =&gt; &#123; <span class="hljs-comment">//监听是否发送成功</span><br>  <span class="hljs-keyword">if</span>(args.SocketError = SocketError.Success)&#123;<br>    <span class="hljs-comment">//成功</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    print(args.SocketError);<br>  &#125;<br>&#125;;<br>socketTCP.SendAsync(e2);<br><br><span class="hljs-comment">//接收消息</span><br>SocketAsyncEventArgs e3 = <span class="hljs-keyword">new</span> ();<br>e3.SetBuffer(<span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>],<span class="hljs-number">0</span>,<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>);<br>e3.Completed += (socket, args) =&gt; &#123; <span class="hljs-comment">//监听是否接收成功</span><br>  <span class="hljs-keyword">if</span>(args.SocketError = SocketError.Success)&#123;<br>    <span class="hljs-comment">//成功处理逻辑</span><br>    Encoding.UTF8.GetString(args.Buffer,<span class="hljs-number">0</span>,args.BytesTransferred);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    args.Buffer 收到的字节</span><br><span class="hljs-comment">    args.BytesTransferred 收到字节的长度</span><br><span class="hljs-comment">    */</span><br>    args.SetBuffer(<span class="hljs-number">0</span>,args.Buffer.Length);<br>    (socket <span class="hljs-keyword">as</span> Socket).ReceiveAsync(args);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    print(args.SocketError);<br>  &#125;<br>&#125;;<br>socketTCP.ReceiveAsync(e3);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="UDP同步"><a href="#UDP同步" class="headerlink" title="UDP同步"></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97socket%E7%B1%BB"><code>UDP</code>同步</a></h4><ul><li><code>UDP</code>不存在黏包问题, 分包问题(因为丢包&#x2F;乱序)更严重, 因此需要控制大小在<strong>最大传输单元</strong>(<code>Max Transmission Unit</code>)内, 一般控制大小: 局域网环境1472字节内, 互联网环境内548字节内<ul><li>消息过小时可以手动黏包, 过大时手动分包, 分包使用序号,长度,ID等信息确定同一个包</li></ul></li><li><code>C/S</code>代码<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//1. 声明</span><br>Socket socket = <span class="hljs-keyword">new</span> (AddressFamily.InterWorknet, SocketType.Dgram, ProtocolType.Udp);<br><span class="hljs-comment">//2. 绑定</span><br>IPEndPoint ipPoint = <span class="hljs-keyword">new</span> (IPAdrress.Parse(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">8080</span>);<br>socket.Bind(ipPoint);<br><span class="hljs-comment">//3. 发送消息</span><br>IPEndPoint remoteIpPoint = <span class="hljs-keyword">new</span> (IPAddress.Parse(<span class="hljs-string">&quot;1.0.0.1&quot;</span>),<span class="hljs-number">8081</span>);<br>socket.SendTo(Encoding.UTF8.GetBytes(<span class="hljs-string">&quot;a&quot;</span>),remoteIpPoint);<br><span class="hljs-comment">//4. 接收消息</span><br><span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">512</span>];<br>EndPoint remoteClientPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Any,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">int</span> length = socket.ReceiveFrom(bytes, <span class="hljs-keyword">ref</span> remoteClientPoint);<br>  <span class="hljs-comment">/*收到的byte[]存入bytes中, 收到的EndPoint存入remoteClientPoint中*/</span><br><span class="hljs-comment">//5. 释放关闭</span><br>socket.Shutdown(SocketShutdown.Both);<br>socket.Close();<br></code></pre></td></tr></table></figure></li><li>封装<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//存储连接过的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Client</span><br>&#123;<br>  <span class="hljs-keyword">private</span> IPEndPoint clientIP;<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> clientID;<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> lastTime = <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Client</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">int</span> port</span>)</span><br>  &#123;<br>    clientIP = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(ip), port);<br>    clientID = ip + <span class="hljs-string">&quot;:&quot;</span> + port;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RcvBytes</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes</span>)</span><br>  &#123;<br>    <span class="hljs-built_in">byte</span>[] cacheBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>    lastTime = DataTime.Now.Ticks / TimeSpan.TicksPerSecond;<br>    bytes.CopyTo(cacheBytes, <span class="hljs-number">0</span>);<br>    ThreadPool.QueueUserWorkItem(RcvHandle,cacheBytes);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RcvHandle</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    <span class="hljs-built_in">byte</span>[] bytes = obj <span class="hljs-keyword">as</span> <span class="hljs-built_in">byte</span>[];<br>    <span class="hljs-built_in">int</span> nowIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> msgID = BitConverter.ToInt32(bytes, nowIndex);<br>    nowIndex += <span class="hljs-number">4</span>;<br>    <span class="hljs-built_in">int</span> msgLength = BitConverter.ToInt32(bytes, nowIndex);<br>    nowIndex += <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">switch</span> (msgID)<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1001</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ServerSocket</span><br>&#123;<br>  Socket sokcet;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isClose;<br>  <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>,Client&gt; clientDic = <span class="hljs-keyword">new</span> ();<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">int</span> port</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(!isClose)&#123;<span class="hljs-keyword">return</span>;&#125;<br>    IPEndPoint ipPoint = <span class="hljs-keyword">new</span> (IPAddress.Parse(ip), port);<br>    socket = <span class="hljs-keyword">new</span> Socket(..,..,..);<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      socket.Bind(ipPoint);<br>      isClose = <span class="hljs-literal">false</span>;<br>      ThreadPool.QueueUserWorkItem(RcvMsg);<br>      ThreadPool.QueueUserWorkItem(CheckTimeOut);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>      Debug.log(e.Message);<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RcvMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">512</span>];<br>    EndPoint ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Any, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">string</span> dicID = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">string</span> ip;<br>    <span class="hljs-built_in">int</span> port;<br>    <span class="hljs-keyword">while</span>(!isClose)<br>    &#123;<br>      <span class="hljs-keyword">if</span>(socket.Available &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">lock</span>(socket)&#123;<br>          socket.ReceiveFrom(bytes, <span class="hljs-keyword">ref</span> ipPoint);<br>        &#125;<br>        <span class="hljs-comment">//处理逻辑</span><br>        ip = (ipPoint <span class="hljs-keyword">as</span> IPEndPoint).Address.ToString();<br>        port = (ipPoint <span class="hljs-keyword">as</span> IPEndPoint).Port;<br>        dicID = ip + <span class="hljs-string">&quot;:&quot;</span> + port;<br>        <span class="hljs-keyword">if</span>(!clientDic.ContainsKey(dicID))&#123;<br>          clientDic.Add(dicID,<span class="hljs-keyword">new</span> Client(ip,port));<br>        &#125;<br>        clientDic[dicID].RcvBytes(bytes);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendTo</span>(<span class="hljs-params">BaseMsg msgIPEndPoint ipPoint</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      <span class="hljs-keyword">lock</span>(socket)<br>      &#123;<br>        socket.SendTo(msg.Writing(),ipPoint);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (SocketException e)<br>    &#123;<br>      Debug.log(e.SocketErrorCode + e.Message);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>      Debug.log(e.Message);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Close</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span>)&#123;<br>      isClose = <span class="hljs-literal">true</span>;<br>      socket.Shutdowm(SocketShutdown.Both);<br>      socket.Close();<br>      socket = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Remove</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> clientID</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(clientDic.ContainsKey(clientID))&#123;<br>      clientDic.Remove(clientID);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CheckTimeOut</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    <span class="hljs-built_in">long</span> nowTime = <span class="hljs-number">0</span>;<br>    List&lt;<span class="hljs-built_in">string</span>&gt; delList = <span class="hljs-keyword">new</span> ();<br>    <span class="hljs-built_in">int</span> fori = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!isClose)<br>    &#123;<br>      Thread.Sleep(<span class="hljs-number">30000</span>);<br>      nowTime = DataTime.Now.Ticks / TimeSpan.TicksPerSecond;<br>      <span class="hljs-keyword">foreach</span>(Client c <span class="hljs-keyword">in</span> clientDic.Values)&#123;<br>        <span class="hljs-keyword">if</span>(nowTime - c.lastTime &gt;= <span class="hljs-number">10</span>)&#123;<br>          delList.Add(c.clientID);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">for</span>(fori = <span class="hljs-number">0</span>; fori&lt; delList.Count;fori++)&#123;<br>        Remove(delList[fori]);<br>      &#125;<br>      fori = <span class="hljs-number">0</span>;<br>      delList.Clear();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UdpNetMgr</span>:<span class="hljs-title">MonoBehaviour</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UdpNetMgr instance;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UdpNetMgr Instance =&gt; instance;<br>  <span class="hljs-keyword">private</span> EndPoint ipPoint;<br>  <span class="hljs-keyword">private</span> Socket socket;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isClose;<br>  <span class="hljs-keyword">private</span> Queue&lt;BaseMsg&gt; sendQueue = <span class="hljs-keyword">new</span> ();<br>  <span class="hljs-keyword">private</span> Queue&lt;BaseMsg&gt; receiveQueue = <span class="hljs-keyword">new</span> ();<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] cacheBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">512</span>];<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>  &#123;<br>    instance = <span class="hljs-keyword">this</span>;<br>    DontDestroyOnLoad(<span class="hljs-keyword">this</span>.gameObject);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(receiveQueue.Count &gt; <span class="hljs-number">0</span>)&#123;<br>      BaseMsg baseMsg = receiveQueue.Dequeue();<br>      <span class="hljs-keyword">switch</span>(baseMsg)<br>      &#123;<br>        <span class="hljs-keyword">case</span> PlayerInfo msg:<br>          print(msg.playerID);<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>  &#123;<br>    Close();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartClient</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">int</span> port</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(!isClose)&#123; <span class="hljs-keyword">return</span> ;&#125;<br>    ipPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(ip),port);<br>    IPEndPoint cliengIpPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="hljs-string">&quot;localhost&quot;</span>),<span class="hljs-number">8080</span>);<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>      socket = <span class="hljs-keyword">new</span> Socket(..,..,..);<br>      socket.Bind(cliengIpPoint);<br>      isClose = <span class="hljs-literal">false</span>;<br>      ThreadPool.QueueUserWorkItem(ReceiveMsg);<br>      ThreadPool.QueueUserWorkItem(SendMsg);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>      Debug.log(e.Message);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReceiveMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    EndPoint tempIpPoint = <span class="hljs-keyword">new</span> IPEndPoint(IPAddress.Any, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">int</span> nowIndex, msgID, msgLength;<br>    BaseMsg msg = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>(!isClose)<br>    &#123;<br>      <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span> &amp;&amp; socket.Available &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>          socket.ReceiveFrom(cacheBytes, <span class="hljs-keyword">ref</span> tempIpPoint);<br>          <span class="hljs-comment">//避免骚扰</span><br>          <span class="hljs-keyword">if</span>(!tempIpPoint.Equals(ipPoint))&#123;<br>            <span class="hljs-keyword">continue</span>;<br>          &#125;<br>          <span class="hljs-comment">//处理消息</span><br>          nowIndex = <span class="hljs-number">0</span>;<br>          msgID = BitConverter.ToInt32(cacheBytes, nowIndex);<br>          nowIndex +=<span class="hljs-number">4</span>;<br>          msgLength = BitConverter.ToInt32(cacheBytes, nowIndex);<br>          nowIndex +=<span class="hljs-number">4</span>;<br>          <span class="hljs-keyword">switch</span>(msgID)<br>          &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1001</span>:<br>              msg = <span class="hljs-keyword">new</span> PlayerInfo();<br>              msg.Reading(cacheBytes, nowIndex);<br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>          <span class="hljs-keyword">if</span>(msg!=nul)&#123;<br>            receiveQueue.Enqueue(msg);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (SocketException e)<br>        &#123;<br>          Debug.Lod(e.SocketErrorCode + e.Message);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)<br>        &#123;<br>          Debug.Log(e.Message);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">while</span>(!isClose)&#123;<br>      <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span> &amp;&amp; sendQueue.Count &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>          socket.SendTo(sendQueue.Dequeue().Writing(),ipPoint);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)<br>        &#123;<br>          Debug.Log(e.SocketErrorCode + e.Message);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Send</span>(<span class="hljs-params">BaseMsg msg</span>)</span><br>  &#123;<br>    sendQueue.Enqueue(msg);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Close</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span>)&#123;<br>      isClose = <span class="hljs-literal">true</span>;<br>      <span class="hljs-comment">/*发一个退出消息*/</span><br>      socket.Shutdown(SocketShutdown.Both);<br>      socket.Close();<br>      socket = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="UDP异步"><a href="#UDP异步" class="headerlink" title="UDP异步"></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97socket%E7%B1%BB"><code>UDP</code>异步</a></h4><ul><li><code>Begin</code>方法<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#">IAsyncResult socket.BeginSendTo(<span class="hljs-built_in">byte</span>[] buffer, <span class="hljs-comment">//bytes</span><br>                                <span class="hljs-built_in">int</span> offset, <span class="hljs-comment">//偏移量</span><br>                                <span class="hljs-built_in">int</span> size, <span class="hljs-comment">//字节长度</span><br>                                SocketFlags flag, <span class="hljs-comment">//使用None就可以</span><br>                                EndPoint remoteEP, <span class="hljs-comment">//远程IP</span><br>                                AsyncCallback callback,<br>                                <span class="hljs-built_in">object</span> state <span class="hljs-comment">/*额外的参数*/</span>)<br><span class="hljs-comment">//在回调委托中使用EndSendTo()</span><br><span class="hljs-comment">//BeginReceiveFrom()同</span><br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C#">socket.BeginSendTo(bytes,<br>                    <span class="hljs-number">0</span>,<br>                    bytes.Length,<br>                    SocketFlags.None,<br>                    ipPoint,<br>                    SendToCallback,<br>                    socket);<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendToCallback</span>(<span class="hljs-params">IAsyncResult res</span>)</span><br>&#123;<br>  <span class="hljs-keyword">try</span><br>  &#123;<br>    Socket s = res.AsyncState <span class="hljs-keyword">as</span> Socket;<br>    s.EndSendTo(res);<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (SocketException e)<br>  &#123;<br>    Debug.Log(e.SocketErrorCode + e.Message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>Async</code>方法<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#">SocketEventAsyncArgs args = <span class="hljs-keyword">new</span> ();<br>args.SetBuffer(bytes,<span class="hljs-number">0</span>, bytes.Length);<br>args.Completed += SendToAsyncCallback;<br>socket.SendToAsync(args);<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendToAsyncCallback</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> s,SocketEventAsyncArgs args</span>)</span><br>&#123;<br>  <span class="hljs-comment">//回调事件</span><br>  <span class="hljs-keyword">if</span>(args.SocketErrorCode == SocketError.Success)&#123;<br>    <span class="hljs-comment">//成功</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//失败</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//ReceiveFromAsync同理</span><br><span class="hljs-comment">//接收后继续接收</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="文件传输FTP"><a href="#文件传输FTP" class="headerlink" title="文件传输FTP"></a><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1">文件传输<code>FTP</code></a></h3><ul><li><code>File Transfer Protocol</code>: 上传下载文件的一套规则<blockquote><p>本质是两个<code>TCP</code>连接, 一个控制传输, 一个传输数据<br><br>两种传输模式: 1. 主动(<code>Port</code>)模式, 传输数据请求由服务器发起, 受到客户端防火墙影响用的较少; 2. 被动(<code>Passive</code>)模式, 传输数据请求由客户端发起<br><br>两种传输方式: 1. <code>ASCII</code>, 适用于<strong>仅包含英文</strong>的<strong>命令</strong>, <strong>参数</strong>和<strong>英文文本文件</strong>; 2. <code>二进制</code>方式(<em><strong>推荐</strong></em>), 可以指定编码方式, 传输非英文文本</p></blockquote></li><li>相关类: <code>FtpWebRequest</code>, <code>FtpWebResponse</code>, <code>NetworkCredential</code></li><li>解决的问题: 1. 搭建<code>FTP</code>服务器; 2. 上传; 3. 下载</li></ul><h4 id="搭建FTP服务器"><a href="#搭建FTP服务器" class="headerlink" title="搭建FTP服务器"></a><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93ftp">搭建<code>FTP</code>服务器</a></h4><ul><li>三种方式<blockquote><ol><li>使用别人写好的<code>FTP</code>软件搭建(推荐)(<code>Serv-U</code>)<br></li><li>根据原理写<code>FTP</code>(一般后端, 后端一般也不写)<br></li></ol></blockquote></li><li><code>NetworkCredential</code>: 设置账号密码<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#">NetworkCredential n = <span class="hljs-keyword">new</span> (<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password);<br></code></pre></td></tr></table></figure></li><li><code>FtpWebRequest</code>: 客户端操作类, 发送上传下载删除文件的命令<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//方法</span><br><span class="hljs-comment">//1. 绑定服务器对象Create()</span><br>FtpWebRequest r = FtpWebRequest.Create(<span class="hljs-string">&quot;ftp://127.0.0.1/a.txt&quot;</span>) <span class="hljs-keyword">as</span> FtpWebRequest;<br><span class="hljs-comment">//2. 正在进行文件传输时中止传输Abort()</span><br>r.Abort();<br><span class="hljs-comment">//3. 获取上传流GetRequestStream()</span><br>Stream s = r.GetRequestStream();<br><span class="hljs-comment">//4. 服务器响应WebResponse GetResponse()</span><br>FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//成员变量</span><br><span class="hljs-comment">//1. Credentials通信凭证</span><br>r.Credentials = n;<br><span class="hljs-comment">//2. KeepAlive完成传输后是否继续保持连接状态, 默认true</span><br>r.KeepAlive = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//3. 操作命令, 使用WebResquestMethods.Ftp静态类的静态常量实现的枚举string</span><br><span class="hljs-comment">//  删除文件,下载文件,文件列表,详细列表,创建目录,删除目录,上传文件</span><br>r.Method = WebResquestMethods.Ftp.DownloadFile;<br><span class="hljs-comment">//4. 是否使用二进制传输UseBinary</span><br>r.UseBinary = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//5. 重命名RenameTo(string s)</span><br>r.RenameTo(<span class="hljs-string">&quot;b.txt&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><code>FtpWebResponse</code>类: 服务器对请求的响应, 使用成员方法<code>GetResponse()</code>获取, 使用完毕后要<code>Close()</code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#">FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br><span class="hljs-comment">/*r属性设置完毕后, 调用GetResponse()方法才会发送r并获得响应*/</span><br><span class="hljs-comment">//1. 关闭Close()</span><br>res.Close();<br><span class="hljs-comment">//2. 获取下载数据流</span><br>Stream s = res.GetResponseStream();<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//1. 接收数据长度ContentLength</span><br><span class="hljs-built_in">int</span> l = res.ContentLength;<br><span class="hljs-comment">//2. 接收数据类型ContentType</span><br><span class="hljs-built_in">string</span> typeString = res.ContentType;<br><span class="hljs-comment">//3. 服务器发送的最新状态码StatusCode枚举</span><br>print(res.StatusCode);<br><span class="hljs-comment">//4. 服务器发送的最新状态文本StatusDescription</span><br>print(res.StatusDescription);<br><span class="hljs-comment">//5. 建立连接时/会话结束时服务器发送的消息BannerMessage/ExitMessage</span><br>print(res.BannerMessage);<br><span class="hljs-comment">//6. 文件上次修改日期</span><br>print(res.LastModified);<br></code></pre></td></tr></table></figure></li></ul><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93ftp">上传</a></h4><ul><li>上传流程<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">try</span>&#123;<br>  FtpWebRequest r = FtpWebRequest.Create(<span class="hljs-string">&quot;ftp://127.0.0.1/a.txt&quot;</span>) <span class="hljs-keyword">as</span> FtpWebRequest;<br>  NetworkCredential n = <span class="hljs-keyword">new</span> (<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>  r.Credentials = n;<br>  r.Proxy = <span class="hljs-literal">null</span>; <span class="hljs-comment">//避免使用ftp的同时启动http服务</span><br>  r.Method = WebResquestMethods.Ftp.UploadFile;<br>  r.KeepAlive = <span class="hljs-literal">false</span>;<br>  r.UseBinary = <span class="hljs-literal">true</span>;<br>  Stream s = r.GetRequestStream();<br>  <span class="hljs-keyword">using</span>(FileStream file = File.OpenRead(<span class="hljs-string">&quot;文件目录.txt&quot;</span>))<br>  &#123;<br>    <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-built_in">int</span> l = file.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>    <span class="hljs-keyword">while</span>(l != <span class="hljs-number">0</span>)&#123;<br>      s.Write(bytes,<span class="hljs-number">0</span>,l);<br>      l = file.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>    &#125;<br>    file.Close();<br>    s.Close();<br>    <span class="hljs-comment">/*上传完毕*/</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception e)<br>&#123;<br>  Debug.Log(e.Message);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>上传单例类<code>FtpMgr</code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FtpMgr</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> FtpMgr instance = <span class="hljs-keyword">new</span> FtpMgr();<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FtpMgr Instance =&gt; instance;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> FTP_PATH = <span class="hljs-string">&quot;ftp://127.0.0.1/&quot;</span>;<br>  <span class="hljs-keyword">private</span> NetworkCredential n = <span class="hljs-keyword">new</span> (<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;adminpwd&quot;</span>);<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UploadFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, <span class="hljs-built_in">string</span> localPath, UnityAction action = <span class="hljs-literal">null</span></span>)</span><br>  &#123;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      <span class="hljs-keyword">try</span>&#123;<br>        FtpWebRequest r = FtpWebRequest.Create(FTP_PATH + fileName) <span class="hljs-keyword">as</span> FtpWebRequest;<br>        r.Credentials = n;<br>        r.Proxy = <span class="hljs-literal">null</span>; <span class="hljs-comment">//避免使用ftp的同时启动http服务</span><br>        r.Method = WebResquestMethods.Ftp.UploadFile;<br>        r.KeepAlive = <span class="hljs-literal">false</span>;<br>        r.UseBinary = <span class="hljs-literal">true</span>;<br>        Stream s = r.GetRequestStream();<br>        <span class="hljs-keyword">using</span>(FileStream file = File.OpenRead(localPath))<br>        &#123;<br>          <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>          <span class="hljs-built_in">int</span> l = file.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>          <span class="hljs-keyword">while</span>(l != <span class="hljs-number">0</span>)&#123;<br>            s.Write(bytes,<span class="hljs-number">0</span>,l);<br>            l = file.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>          &#125;<br>          file.Close();<br>          s.Close();<br>          <span class="hljs-comment">/*上传完毕*/</span><br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Debug.Log(e.Message);<br>      &#125;<br>    &#125;);<br>    action?.Invoke();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93ftp">下载</a></h4><ul><li>下载流程<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">try</span><br>&#123;<br>  FtpWebRequest r = FtpWebRequest.Create(<span class="hljs-string">&quot;ftp://127.0.0.1/a.txt&quot;</span>) <span class="hljs-keyword">as</span> FtpWebRequest;<br>  <span class="hljs-comment">//这个文件必须是服务器上有的</span><br>  r.Credentials = <span class="hljs-keyword">new</span> NetworkCredential(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>  r.Method = WebResquestMethods.Ftp.DownloadFile;<br>  r.Proxy = <span class="hljs-literal">null</span>;<br>  r.KeepAlive = <span class="hljs-literal">false</span>;<br>  r.UseBinary = <span class="hljs-literal">true</span>;<br>  FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse; <span class="hljs-comment">/*下载请求*/</span><br>  Stream dlStream = res.GetResponseStream(); <span class="hljs-comment">/*下载流*/</span><br>  <span class="hljs-keyword">using</span>(FileStream file = File.Create(<span class="hljs-string">&quot;下载地址加文件名.txt&quot;</span>))&#123;<br>    <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-built_in">int</span> l = dlStream.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>    <span class="hljs-keyword">while</span>(l != <span class="hljs-number">0</span>)&#123;<br>      file.Write(bytes,<span class="hljs-number">0</span>,l);<br>      l = dlStream.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>    &#125;<br>    dlStream.Close();<br>    file.Close();<br>  &#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception e)<br>&#123;<br>  Debug.Log(e.Message);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>下载单例类<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FtpMgr</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DownloadFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, <span class="hljs-built_in">string</span> localPath, UnityAction action = <span class="hljs-literal">null</span></span>)</span><br>  &#123;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        FtpWebRequest r = FtpWebRequest.Create(FTP_PATH + fileName) <span class="hljs-keyword">as</span> FtpWebRequest;<br>        r.Credentials = n;<br>        r.Method = WebResquestMethods.Ftp.DownloadFile;<br>        r.Proxy = <span class="hljs-literal">null</span>;<br>        r.KeepAlive = <span class="hljs-literal">false</span>;<br>        r.UseBinary = <span class="hljs-literal">true</span>;<br>        FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>        Stream dlStream = res.GetResponseStream();<br>        <span class="hljs-keyword">using</span>(FileStream file = File.Create(localPath))&#123;<br>          <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>          <span class="hljs-built_in">int</span> l = dlStream.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>          <span class="hljs-keyword">while</span>(l != <span class="hljs-number">0</span>)&#123;<br>            file.Write(bytes,<span class="hljs-number">0</span>,l);<br>            l = dlStream.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>          &#125;<br>          dlStream.Close();<br>          file.Close();<br>        &#125;<br>        res.Close();<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Debug.Log(e.Message);<br>      &#125;<br>    &#125;);<br>    action?.Invoke();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="FTP其他操作"><a href="#FTP其他操作" class="headerlink" title="FTP其他操作"></a><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93ftp"><code>FTP</code>其他操作</a></h4><ul><li>删除文件<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FtpMgr</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, UnityAction&lt;<span class="hljs-built_in">bool</span>&gt; action = <span class="hljs-literal">null</span></span>)</span><br>  &#123;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        FtpWebRequest r = FtpWebRequest.Create(FTP_PATH + fileName) <span class="hljs-keyword">as</span> FtpWebRequest;<br>        r.Credentials = n;<br>        r.Method = WebResquestMethods.Ftp.DeleteFile;<br>        r.Proxy = <span class="hljs-literal">null</span>;<br>        r.KeepAlive = <span class="hljs-literal">false</span>;<br>        r.UseBinary = <span class="hljs-literal">true</span>;<br>        FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>        Stream dlStream = res.GetResponseStream();<br>        res.Close();<br>        action?.Invoke(<span class="hljs-literal">true</span>);<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Debug.Log(e.Message);<br>        action?.Invoke(<span class="hljs-literal">false</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>获取文件大小<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FtpMgr</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetFileSize</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, UnityAction&lt;<span class="hljs-built_in">long</span>&gt; action = <span class="hljs-literal">null</span></span>)</span><br>  &#123;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        FtpWebRequest r = FtpWebRequest.Create(FTP_PATH + fileName) <span class="hljs-keyword">as</span> FtpWebRequest;<br>        r.Credentials = n;<br>        r.Method = WebResquestMethods.Ftp.GetFileSize;<br>        r.Proxy = <span class="hljs-literal">null</span>;<br>        r.KeepAlive = <span class="hljs-literal">false</span>;<br>        r.UseBinary = <span class="hljs-literal">true</span>;<br>        FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>        Stream dlStream = res.GetResponseStream();<br>        res.Close();<br>        action?.Invoke(res.ContentLength);<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Debug.Log(e.Message);<br>        action?.Invoke(<span class="hljs-number">0</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建文件夹<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FtpMgr</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateDirectory</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> dirName, UnityAction&lt;<span class="hljs-built_in">bool</span>&gt; action = <span class="hljs-literal">null</span></span>)</span><br>  &#123;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        FtpWebRequest r = FtpWebRequest.Create(FTP_PATH + dirName) <span class="hljs-keyword">as</span> FtpWebRequest;<br>        r.Credentials = n;<br>        r.Method = WebResquestMethods.Ftp.MakeDirectory;<br>        r.Proxy = <span class="hljs-literal">null</span>;<br>        r.KeepAlive = <span class="hljs-literal">false</span>;<br>        r.UseBinary = <span class="hljs-literal">true</span>;<br>        FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>        res.Close();<br>        action?.Invoke(<span class="hljs-literal">true</span>);<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Debug.Log(e.Message);<br>        action?.Invoke(<span class="hljs-literal">false</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>获取文件列表<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FtpMgr</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetFileList</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> dirName, UnityAction&lt;List&lt;<span class="hljs-built_in">string</span>&gt;&gt; action = <span class="hljs-literal">null</span></span>)</span><br>  &#123;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        FtpWebRequest r = FtpWebRequest.Create(FTP_PATH + dirName) <span class="hljs-keyword">as</span> FtpWebRequest;<br>        r.Credentials = n;<br>        r.Method = WebResquestMethods.Ftp.ListDirectory;<br>        r.Proxy = <span class="hljs-literal">null</span>;<br>        r.KeepAlive = <span class="hljs-literal">false</span>;<br>        r.UseBinary = <span class="hljs-literal">true</span>;<br>        FtpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> FtpWebResponse;<br>        StreamReader sr = <span class="hljs-keyword">new</span> (res.GetResponseStream());<br>        List&lt;<span class="hljs-built_in">string</span>&gt; l = <span class="hljs-keyword">new</span> ();<br>        <span class="hljs-built_in">string</span> line = sr.ReadLine();<br>        <span class="hljs-keyword">while</span>(line != <span class="hljs-literal">null</span>)&#123;<br>          l.Add(line);<br>          line = sr.ReadLine();<br>        &#125;<br>        res.Close();<br>        action?.Invoke(l);<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Debug.Log(e.Message);<br>        action?.Invoke(<span class="hljs-literal">null</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="超文本传输HTTP"><a href="#超文本传输HTTP" class="headerlink" title="超文本传输HTTP"></a><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1">超文本传输<code>HTTP</code></a></h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><a href="#%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93http">原理</a></h4><ul><li><code>HTTP</code>: HyperText Transfer Protocol, 主要传输超文本的网络协议. 本质是<code>TCP</code>通信</li><li><code>http</code>协议规定了在数据前添加<strong>元信息</strong>(<code>metainformation</code>)<strong>标头</strong>(<code>header</code>)解释数据, 包含数据类型&#x2F;编码方式等</li><li>请求类型(<code>HTTP/1.1</code>): <code>GET</code>,<code>POST</code>,<code>HEAD</code>,<code>PUT</code>,<code>DELETE</code>,<code>OPTIONS</code>,<code>TRACE</code>,<code>CONNECT</code><table><thead><tr><th>请求类型</th><th></th></tr></thead><tbody><tr><td><code>GET</code></td><td>请求获取特定资源, 如一个web页面或资源</td></tr><tr><td><code>POST</code></td><td>提交数据, 如上传文件</td></tr><tr><td><code>HEAD</code></td><td>请求获取特定资源, 但不返回具体内容, 可以判断有没有特定文件</td></tr></tbody></table></li><li>响应状态码: 1**, 2**, 3**, 4**, 5**<table><thead><tr><th>编号</th><th>状态码</th><th></th></tr></thead><tbody><tr><td>200</td><td><code>OK</code></td><td>找到资源, 一切正常</td></tr><tr><td>304</td><td><code>NOT MODIFIED</code></td><td>资源在上次请求后没有更改(缓存机制中用)</td></tr><tr><td>401</td><td><code>UNAUTHORIZED</code></td><td>客户端无权访问, 通常需要账号和密码</td></tr><tr><td>403</td><td><code>FORBIDDON</code></td><td>客户端未授权, 如错误的密码</td></tr><tr><td>404</td><td><code>NOT FOUND</code></td><td>资源不存在</td></tr><tr><td>405</td><td><code>METHOD NOT ALLOWED</code></td><td>请求方法不支持</td></tr><tr><td>501</td><td><code>NOT IMPLEMENTED</code></td><td>服务器不能识别请求或未能实现请求</td></tr></tbody></table></li><li><code>C#</code>相关类: <code>WebRequest</code>,<code>HttpWebRequest</code>,<code>HttpWebResponse</code></li><li><code>Unity</code>相关类: <code>UnityWebRequest</code>,<code>WWW</code>,<code>WWWFrom</code></li></ul><h4 id="搭建http服务器"><a href="#搭建http服务器" class="headerlink" title="搭建http服务器"></a><a href="#%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93http">搭建<code>http</code>服务器</a></h4><ul><li>使用别人做好的软件搭建(推荐)(<code>hfs</code>)</li><li>默认<code>80</code>端口号, 不是则显示<code>:端口号</code></li></ul><h4 id="C-相关类"><a href="#C-相关类" class="headerlink" title="C#相关类"></a><a href="#%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93http"><code>C#</code>相关类</a></h4><ul><li><p><code>HttpWebRequest</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//重要方法</span><br><span class="hljs-comment">//1. Create</span><br>HttpWebRequest r = HttpWebRequest.Create(<span class="hljs-string">&quot;http://baidu.com&quot;</span>) <span class="hljs-keyword">as</span> HttpWebRequest;<br><span class="hljs-comment">//2. Abort 中止</span><br>r.Abort();<br><span class="hljs-comment">//3. GetRequestStream 获取请求流, 支持Begin/End异步</span><br>Stream s = r.GetRequestStream();<br><span class="hljs-comment">//4. GetResponse 返回服务器响应, 支持Begin/End异步</span><br>HttpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br><br><span class="hljs-comment">//重要成员变量</span><br><span class="hljs-comment">//1. Credentials 账号密码凭证</span><br><span class="hljs-comment">//2. PreAuthenticate 是否需要身份验证</span><br><span class="hljs-comment">//3. Headers 标头键值对</span><br><span class="hljs-comment">//4. ContentLength 发送字节长度, Request时需要设置</span><br><span class="hljs-comment">//5. ContentType POST时需要对内容设置Type</span><br><span class="hljs-comment">//6. Method 操作命令: WehRequestMethods.Http.</span><br><span class="hljs-comment">//    Get</span><br><span class="hljs-comment">//    Post</span><br><span class="hljs-comment">//    Head</span><br></code></pre></td></tr></table></figure></li><li><p><code>HttpWebResponse</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//成员方法</span><br><span class="hljs-comment">//1. Close()</span><br><span class="hljs-comment">//2. GetResponseStream() 获取下载流</span><br><br><span class="hljs-comment">//成员变量</span><br><span class="hljs-comment">//1. ContentLength 接收到的数据的长度</span><br><span class="hljs-comment">//2. ContentType 接收到的数据类型</span><br><span class="hljs-comment">//3. StatusCode 服务器下发的最新状态码</span><br><span class="hljs-comment">//4. StatusDescription 服务器下发的状态文本</span><br><span class="hljs-comment">//5. BannerMessage</span><br><span class="hljs-comment">//6. ExitMessage</span><br><span class="hljs-comment">//7. LastModified</span><br></code></pre></td></tr></table></figure></li><li><p>下载数据流程</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//检测资源可用性</span><br><span class="hljs-keyword">try</span><br>&#123;<br>  HttpWebRequest r = HttpWebRequest.Create(<span class="hljs-string">&quot;http://baidu.com/logo.png&quot;</span>) <span class="hljs-keyword">as</span> HttpWebRequest;<br>  r.Method = WebRequestMethods.Http.Head;<br>  r.Timeout = <span class="hljs-number">2000</span>;<br>  HttpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br>  <span class="hljs-keyword">if</span>(res.StatusCode == HttpStatusCode.OK)&#123;<br>    <span class="hljs-comment">//资源可用</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    print(r.StatusCode + r.StatusDescription);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (WebException e)<br>&#123;<br>  Debug.Log(e.Status + e.Message);<br>&#125;<br><br><span class="hljs-comment">//下载资源</span><br><span class="hljs-keyword">try</span><br>&#123;<br>  HttpWebRequest r = HttpWebRequest.Create(<span class="hljs-string">&quot;http://baidu.com/logo.png&quot;</span>) <span class="hljs-keyword">as</span> HttpWebRequest;<br>  r.Method = WebRequestMethods.Http.Get;<br>  r.Timeout = <span class="hljs-number">2000</span>;<br>  HttpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br>  <span class="hljs-keyword">if</span>(res.StatusCode == HttpStatusCode.OK)&#123;<br>    <span class="hljs-keyword">using</span>(FileStream fs = File.Create(<span class="hljs-string">&quot;Path路径.png&quot;</span>))&#123;<br>      Stream s = res.GetResponseStream();<br>      <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">2048</span>];<br>      <span class="hljs-built_in">int</span> l = s.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>      <span class="hljs-keyword">while</span>(l!=<span class="hljs-number">0</span>)&#123;<br>        s.Write(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>        l = s.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>      &#125;<br>      fs.Close();<br>      s.Close();<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    print(r.StatusCode + r.StatusDescription);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (WebException e)<br>&#123;<br>  Debug.Log(e.Status + e.Message);<br>&#125;<br><br><span class="hljs-comment">//Get携带额外信息: 链接加?</span><br></code></pre></td></tr></table></figure></li><li><p>下载数据单例管理</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HttpMgr</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HttpMgr instance = <span class="hljs-keyword">new</span> HttpMgr();<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpMgr Instance =&gt; instance;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> HTTP_PATH = <span class="hljs-string">&quot;http://127.0.0.1:8080/httpserver/&quot;</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DownloadFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, <span class="hljs-built_in">string</span> localPath, UnityAction&lt;HttpStatusCode&gt; action</span>)</span><br>  &#123;<br>    HttpStatusCode result = HttpStatusCode.OK;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        HttpWebRequest r = HttpWebRequest.Create(HTTP_PATH + fileName) <span class="hljs-keyword">as</span> HttpWebRequest;<br>        r.Method = WebRequestMethods.Http.Head;<br>        r.Timeout = <span class="hljs-number">2000</span>;<br>        HttpWebResponse res = r.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br>        <span class="hljs-keyword">if</span>(res.StatusCode == HttpStatusCode.OK)&#123;<br>          res.Close();<br>          <span class="hljs-comment">//资源可用</span><br>          r.Method = WebRequestMethods.Http.Get;<br>          res = r.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br>          <span class="hljs-keyword">if</span>(res.StatusCode == HttpStatusCode.OK)&#123;<br>            <span class="hljs-keyword">using</span>(FileStream fs = File.Create(localPath))&#123;<br>              Stream s = res.GetResponseStream();<br>              <span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">2048</span>];<br>              <span class="hljs-built_in">int</span> l = s.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>              <span class="hljs-keyword">while</span>(l!=<span class="hljs-number">0</span>)&#123;<br>                s.Write(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>                l = s.Read(bytes,<span class="hljs-number">0</span>,bytes.Length);<br>              &#125;<br>              fs.Close();<br>              s.Close();<br>            &#125;<br>            result = HttpStatusCode.OK;<br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>            result = res.StatusCode;<br>          &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          result = res.StatusCode;<br>        &#125;<br>        res.Close();<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (WebException e)<br>      &#123;<br>        result = HttpStatusCode.InternalServerError;<br>        Debug.Log(e.Status + e.Message);<br>      &#125;<br>    &#125;);<br>    action?.Invoke(result);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Post</code>VS<code>Get</code></p><ul><li>相同: 都可以携带参数发送数据, 并接收数据</li><li>不同: 1. <code>Post</code>参数不可见, 更安全; 2. <code>Get</code>需要拼接链接参数, 但<code>url</code>有长度限制; 3. <code>Get</code>内容可被浏览器缓存, <code>Post</code>不会被缓存; 4. <code>Get</code>所有请求一次性发送, <code>Post</code>可能分多次发送</li><li><code>Post</code>携带参数: 设置<code>HttpWebRequest</code>对象的<code>ContentType</code>为<code>&quot;application/x-www-form-urlencoded&quot;</code></li><li><code>ContentType</code>类型<blockquote><p>文本型: <em><strong><code>text/plain</code></strong></em>, <code>text/html</code>, <code>text/css</code>, <code>text/javascript</code><br><br>图片型: <code>image/</code> + <code>gif</code>&#x2F;<code>png</code>&#x2F;<code>jpeg</code>&#x2F;<code>bm</code>&#x2F;<code>webp</code><br><br>音频型: <code>audio/</code> + <code>midi</code>&#x2F;<code>mpeg</code>&#x2F;<code>webm</code>&#x2F;<code>ogg</code>&#x2F;<code>wav</code><br><br>视频型: <code>video/</code> + <code>webm</code>&#x2F;<code>ogg</code><br><br>二进制类型: <code>application/</code> + <em><strong><code>octet-stream</code>(没有其他类型)</strong></em>&#x2F;<em><strong><code>x-www-form-urlencoded</code>(键值对)</strong></em>&#x2F;<code>xml</code>&#x2F;<code>pdf</code><br><br>复合类型: <code>multipart/</code> + <em><strong><code>form-data</code></strong></em>&#x2F;<code>byteranges</code></p></blockquote></li></ul></li><li><p>上传数据流程</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//1. 实例化并设置参数</span><br>HttpWebRequest rq = HttpWebRequest.Create(<span class="hljs-string">&quot;无文件名目录&quot;</span>) <span class="hljs-keyword">as</span> HttpWebRequest;<br>rq.Method = WebRequestMethods.Http.Post;<br>rq.Timeout = <span class="hljs-number">30000</span>; <span class="hljs-comment">//根据文件大小设置</span><br><span class="hljs-built_in">string</span> boundry = DataTime.Now;<br>rq.ContentType = <span class="hljs-string">&quot;application/form-data;boundry=&quot;</span> + boundry;<br>rq.PreAuthenticate = <span class="hljs-literal">true</span>; <span class="hljs-comment">/*是否先验证身份再上传*/</span><br>rq.Credentials = <span class="hljs-keyword">new</span> NetworkCredential(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;pwd&quot;</span>);<br><br><span class="hljs-comment">//2. 设置头部和尾部信息</span><br><span class="hljs-comment">//2.1 头部格式</span><br><span class="hljs-comment">//    --boundry字符</span><br><span class="hljs-comment">//    Content-Disposition:form-data;name=&quot;文件数据名&quot;;filename=&quot;上传后名&quot;</span><br><span class="hljs-comment">//    Content-Type:自定义文件类型对应的Type</span><br><span class="hljs-comment">//    空行</span><br><span class="hljs-built_in">string</span> head = <span class="hljs-string">$&quot;--<span class="hljs-subst">&#123;boundry&#125;</span>\r\n&quot;</span> + <br>      <span class="hljs-string">&quot;Content-Disposition:form-data;name=\&quot;file\&quot;;filename=\&quot;a.exe\&quot;\r\n&quot;</span> +<br>      <span class="hljs-string">&quot;Content-Type:application/octet-stream\r\n\r\n&quot;</span>;<br><span class="hljs-built_in">byte</span>[] headBytes = Encoding.UTF8.GetBytes(head);<br><span class="hljs-comment">//2.2 尾部格式</span><br><span class="hljs-comment">//    --boundry字符--</span><br><span class="hljs-built_in">byte</span>[] endBytes = Encoding.UTF8.GetBytes(<span class="hljs-string">$&quot;\r\n--<span class="hljs-subst">&#123;boundry&#125;</span>--\r\n&quot;</span>);<br><br><span class="hljs-comment">//3. 文件</span><br><span class="hljs-keyword">using</span>(FileStream fs = File.OpenRead(<span class="hljs-string">&quot;本地文件.exe&quot;</span>))<br>&#123;<br>  rq.ContentLength = headBytes.Length + fs.Length + endBytes.Length;<br>  Stream uploadStream = rq.GetRequestStream(); <span class="hljs-comment">/*上传流*/</span><br>  uploadStream.Write(headBytes,<span class="hljs-number">0</span>,headBytes.Length); <span class="hljs-comment">/*头部字节*/</span><br>  <span class="hljs-built_in">byte</span>[] fileBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">2048</span>]; <span class="hljs-comment">/*文件字节*/</span><br>  <span class="hljs-built_in">int</span> l = fs.Read(fileBytes,<span class="hljs-number">0</span>,fileBytes.Length);<br>  <span class="hljs-keyword">while</span>(l!=<span class="hljs-number">0</span>)&#123;<br>    uploadStream.Write(fileBytes,<span class="hljs-number">0</span>,fileBytes.Length);<br>    l = fs.Read(fileBytes,<span class="hljs-number">0</span>,fileBytes.Length);<br>  &#125;<br>  uploadStream.Write(endBytes,<span class="hljs-number">0</span>,endBytes.Length);<br>  uploadStream.Close();<br>  fs.Close();<br>&#125;<br><br><span class="hljs-comment">//4. 上传, 获得响应</span><br>HttpWebResponse res = rq.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br><span class="hljs-keyword">if</span>(res.StatusCode == HttpStatusCode.OK)&#123;<br>  <span class="hljs-comment">//成功</span><br>&#125; <span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-comment">//失败</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>上传数据单例管理</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HttpMgr</span><br>&#123;<br>  <span class="hljs-keyword">private</span> HttpStatusCode result = HttpStatusCode.BadRequest;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UploadFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName, <span class="hljs-built_in">string</span> localPath, UnityAction&lt;HttpStatusCode&gt; action</span>)</span><br>  &#123;<br>    <span class="hljs-keyword">await</span> Task.Run(() =&gt; &#123;<br>      HttpWebRequest rq = HttpWebRequest.Create(HTTP_PATH) <span class="hljs-keyword">as</span> HttpWebRequest;<br>      rq.Method = WebRequestMethods.Http.Post;<br>      rq.Timeout = <span class="hljs-number">30000</span>; <span class="hljs-comment">//根据文件大小设置</span><br>      <span class="hljs-built_in">string</span> boundry = DataTime.Now;<br>      rq.ContentType = <span class="hljs-string">&quot;application/form-data;boundry=&quot;</span> + boundry;<br>      rq.PreAuthenticate = <span class="hljs-literal">true</span>;<br>      rq.Credentials = n;<br>      <span class="hljs-built_in">string</span> head = <span class="hljs-string">$&quot;--<span class="hljs-subst">&#123;boundry&#125;</span>\r\n&quot;</span> + <br>      <span class="hljs-string">$&quot;Content-Disposition:form-data;name=\&quot;file\&quot;;filename=\&quot;<span class="hljs-subst">&#123;fileName&#125;</span>\&quot;\r\n&quot;</span> +<br>      <span class="hljs-string">&quot;Content-Type:application/octet-stream\r\n\r\n&quot;</span>;<br>      <span class="hljs-built_in">byte</span>[] headBytes = Encoding.UTF8.GetBytes(head);<br>      <span class="hljs-built_in">byte</span>[] endBytes = Encoding.UTF8.GetBytes(<span class="hljs-string">$&quot;\r\n--<span class="hljs-subst">&#123;boundry&#125;</span>--\r\n&quot;</span>);<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>        <span class="hljs-keyword">using</span>(FileStream fs = File.OpenRead(<span class="hljs-string">&quot;本地文件.exe&quot;</span>))<br>        &#123;<br>          rq.ContentLength = headBytes.Length + fs.Length + endBytes.Length;<br>          Stream uploadStream = rq.GetRequestStream();<br>          uploadStream.Write(headBytes,<span class="hljs-number">0</span>,headBytes.Length);<br>          <span class="hljs-built_in">byte</span>[] fileBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">2048</span>];<br>          <span class="hljs-built_in">int</span> l = fs.Read(fileBytes,<span class="hljs-number">0</span>,fileBytes.Length);<br>          <span class="hljs-keyword">while</span>(l!=<span class="hljs-number">0</span>)&#123;<br>            uploadStream.Write(fileBytes,<span class="hljs-number">0</span>,fileBytes.Length);<br>            l = fs.Read(fileBytes,<span class="hljs-number">0</span>,fileBytes.Length);<br>          &#125;<br>          uploadStream.Write(endBytes,<span class="hljs-number">0</span>,endBytes.Length);<br>          uploadStream.Close();<br>          fs.Close();<br>        &#125;<br>        HttpWebResponse res = rq.GetResponse() <span class="hljs-keyword">as</span> HttpWebResponse;<br>        result = HttpStatusCode.OK;<br>        res.Close();<br>      &#125;<br>      <span class="hljs-keyword">catch</span> (Exception e)<br>      &#123;<br>        Debug.Log(e.Message);<br>      &#125;<br>    &#125;);<br>    action?.Invoke(result);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Unity相关类"><a href="#Unity相关类" class="headerlink" title="Unity相关类"></a><a href="#%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93http"><code>Unity</code>相关类</a></h4><ul><li><code>WWW</code>类<blockquote><p>支持协议: <code>http(s)</code>, <code>ftp</code>匿名下载, <code>file</code>三端本地文件异步加载<br><br>一般配合协程使用<br>; 不支持携带账户密码等信息<br><em><strong>过时类</strong></em>, 整合进<code>UnityWebRequest</code>中, 但仍可以使用</p></blockquote><ul><li>方法<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//构造</span><br>WWW www = <span class="hljs-keyword">new</span> WWW(<span class="hljs-string">&quot;文件地址.jpeg&quot;</span>);<br><br><span class="hljs-comment">//将下载数据转换为AudioClip/MovieTexture</span><br>www.GetAudioClip();<br>www.GetMovieTexture();<br><br><span class="hljs-comment">//转换为Texture2D</span><br>Texture2D t = <span class="hljs-keyword">new</span> (<span class="hljs-number">96</span>,<span class="hljs-number">96</span>);<br>www.LoadImageIntoTexture(t);<br></code></pre></td></tr></table></figure></li><li>变量<ul><li><code>assetBundle</code>: 直接转换为AB包资源</li><li><code>text</code>: 直接转换为文本读取</li><li><code>bytes</code>: 以<code>byte[]</code>形式加载数据</li><li><code>bytesDownloaded</code>: 下载中时已下载的字节数</li><li><code>error</code>: 下载中出错时返回错误信息, 如果<code>www.error!=null</code>则出错了</li><li><code>isDone</code>: 下载是否已完成</li><li><code>progress</code>: 下载进度(0-1)</li></ul></li><li>异步下载流程<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C#">StartCoroutine(Download());<br><span class="hljs-function">IEnumerator <span class="hljs-title">Download</span>()</span><br>&#123;<br>  WWW w = <span class="hljs-keyword">new</span> (<span class="hljs-string">&quot;http/ftp/file下载直链&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> w; <span class="hljs-comment">//先return, 同时等待w加载结束再加载后面的代码</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  //返回进度</span><br><span class="hljs-comment">  while(!w.isDOne)&#123;</span><br><span class="hljs-comment">    print(w.bytesDownloaded);</span><br><span class="hljs-comment">    print(w.progress);</span><br><span class="hljs-comment">    yield return null;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span>(w.error == <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-comment">//加载成功</span><br>    <span class="hljs-comment">//直接使用w.GetXXX()或w.xxx获取对应资源</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    print(w.error);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>异步下载单例管理<code>NetWWWMgr</code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//同样动态添加一个空GO并挂载</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NetWWWMgr</span>:<span class="hljs-title">MonoBehaviour</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NetWWWMgr instance;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> NetWWWMgr Instance =&gt; instance;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>  &#123;<br>    instance = <span class="hljs-keyword">this</span>;<br>    DontDestroyOnLoad(<span class="hljs-keyword">this</span>.gameObject);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadRes</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path, UnityAction&lt;T&gt; action</span>) </span><br><span class="hljs-function">                                                        <span class="hljs-keyword">where</span> T:<span class="hljs-keyword">class</span></span><br>  &#123;<br>    StartCoroutine(Download&lt;T&gt;(path,action));<br>  &#125;<br>  <span class="hljs-function">IEnumerator <span class="hljs-title">Download</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> path, UnityAction&lt;T&gt; action</span>) </span><br><span class="hljs-function">                                                        <span class="hljs-keyword">where</span> T:<span class="hljs-keyword">class</span></span><br>    &#123;<br>      WWW w = <span class="hljs-keyword">new</span> (path);<br>      <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> w;<br>      <span class="hljs-keyword">if</span>(w.error == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">switch</span>(<span class="hljs-keyword">typeof</span>(T))<br>        &#123;<br>          <span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">typeof</span>(<span class="hljs-params">AssetBundle</span>):</span><br><span class="hljs-function">            action?.<span class="hljs-title">Invoke</span>(<span class="hljs-params">w.assetBundle <span class="hljs-keyword">as</span> T</span>)</span>;<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">typeof</span>(<span class="hljs-params">Texture</span>):</span><br><span class="hljs-function">            action?.<span class="hljs-title">Invoke</span>(<span class="hljs-params">w.texture <span class="hljs-keyword">as</span> T</span>)</span>;<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">typeof</span>(<span class="hljs-params">AudioClip</span>):</span><br><span class="hljs-function">            action?.<span class="hljs-title">Invoke</span>(<span class="hljs-params">w.GetAudioClip(</span>) <span class="hljs-keyword">as</span> T)</span>;<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">typeof</span>(<span class="hljs-params"><span class="hljs-built_in">string</span></span>):</span><br><span class="hljs-function">            action?.<span class="hljs-title">Invoke</span>(<span class="hljs-params">w.text <span class="hljs-keyword">as</span> T</span>)</span>;<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">typeof</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[]</span>):</span><br><span class="hljs-function">            action?.<span class="hljs-title">Invoke</span>(<span class="hljs-params">w.bytes <span class="hljs-keyword">as</span> T</span>)</span>;<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-comment">//其他自定义类型</span><br>        &#125;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        print(w.error);<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><code>WWWForm</code>类<blockquote><p>功能: 使用http post上传数据, 需要配合后端处理获得的数据</p></blockquote><ul><li>方法<ul><li>构造函数<code>WWWform data = new ()</code></li><li>添加二进制数据<code>data.AddBinaryData(字段名,byte[],文件名,文件类型)</code></li><li>添加字段<code>data.AddField()</code></li></ul></li><li>上传流程<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#">StartCoroutine(UpdateData());<br><span class="hljs-function">IEnumerator <span class="hljs-title">UpdateData</span>()</span><br>&#123;<br>  WWWForm wf = <span class="hljs-keyword">new</span> ();<br>  wf.AddField(<span class="hljs-string">&quot;Name&quot;</span>,<span class="hljs-string">&quot;John&quot;</span>,Encoding.UTF8);<br>  wf.AddField(<span class="hljs-string">&quot;Age&quot;</span>,<span class="hljs-number">18</span>);<br>  wf.AddBinaryData(<span class="hljs-string">&quot;file&quot;</span>,FIle.ReadAllBytes(<span class="hljs-string">&quot;本地文件名.exe&quot;</span>));<br>  wf.AddBinaryData(<span class="hljs-string">&quot;file2&quot;</span>,<span class="hljs-comment">/*otherFIle*/</span>,<span class="hljs-string">&quot;/a.exe&quot;</span>,<br>                                  <span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>  WWW w = <span class="hljs-keyword">new</span> (<span class="hljs-string">&quot;上传地址&quot;</span>,wf);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> w;<br>  <span class="hljs-keyword">if</span>(w.error==<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-comment">//成功</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    Debug.Log(w.error);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>上传<code>BaseMsg</code>单例<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NetWWWMgr</span>:<span class="hljs-title">MonoBehaviour</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">BaseMsg m, UnityAction&lt;T&gt; action</span>) <span class="hljs-keyword">where</span> T:BaseMsg</span><br>  &#123;<br>    StartCoroutine(SendMsgAsync&lt;T&gt;(m,action));<br>  &#125;<br><br>  <span class="hljs-function">IEnumerator <span class="hljs-title">SendMsgAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">BaseMsg m, UnityAction&lt;T&gt; action</span>) <span class="hljs-keyword">where</span> T:BaseMsg</span><br>  &#123;<br>    WWWForm wf = <span class="hljs-keyword">new</span> ();<br>    wf.AddBinaryData(<span class="hljs-string">&quot;Msg&quot;</span>,m.Writing());<br>    WWW w = <span class="hljs-keyword">new</span> (<span class="hljs-string">&quot;上传地址&quot;</span>,wf);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> w;<br>    <span class="hljs-keyword">if</span>(w.error==<span class="hljs-literal">null</span>)&#123;<br>      <span class="hljs-comment">//成功, 解析返回的BaseMsg</span><br>      <span class="hljs-comment">//Invoke解析的信息</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      Debug.Log(w.error);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><code>UnityWebRequest</code>类<blockquote><p>集成了<code>WWW</code>相关功能, 同样使用协程, 支持<code>http</code>&#x2F;<code>ftp</code>&#x2F;<code>file</code>, 支持下载上传<br><br>常用操作: Get文本, Get二进制, Get纹理, Get AB包, Post数据</p></blockquote><ul><li><code>Get</code>数据流程<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function">IEnumerator <span class="hljs-title">LoadText</span>()</span><br>&#123;<br>  UnityWenRequest rq = UnityWebRequest.Get(<span class="hljs-string">&quot;s.txt&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> rq.SendWebRequest();<br>  <span class="hljs-keyword">if</span>(rq.result == UnityWebRequest.Result.Success)&#123;<br>    print(rq.dowmloadHandler.text); <span class="hljs-comment">//文本</span><br>    <span class="hljs-built_in">byte</span>[] bytes = rq.dowmloadHandler.data; <span class="hljs-comment">//二进制数据</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    Debug.Log(rq.result + rq.error + rq.responseCode);<br>  &#125;<br>&#125;<br><br><span class="hljs-function">IEnumerator <span class="hljs-title">LoadTexture</span>()</span><br>&#123;<br>  UnityWenRequest rq = UnityWebRequestTexture.GetTexture(<span class="hljs-string">&quot;纹理地址&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> rq.SendWebRequest();<br>  <span class="hljs-keyword">if</span>(rq.result == UnityWebRequest.Result.Success)&#123;<br>    go.Texture = DownloadHandlerTexture.GetContent(rq);<br>    <span class="hljs-comment">//或者</span><br>    <span class="hljs-comment">//(rq.downloadHandler as DownloadHandlerTexture).texture;</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    Debug.Log(rq.result + rq.error + rq.responseCode);<br>  &#125;<br>&#125;<br><br><span class="hljs-function">IEnumerator <span class="hljs-title">LoadAB</span>()</span><br>&#123;<br>  UnityWenRequest rq = UnityWebRequestAssetBundle.GetAssetBundle(<span class="hljs-string">&quot;地址&quot;</span>);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> rq.SendWebRequest();<br>  <span class="hljs-keyword">if</span>(rq.result == UnityWebRequest.Result.Success)&#123;<br>    AssetBundle ab = DownloadHandlerAssetBundle.GetContent(rq);<br>    <span class="hljs-comment">//或者</span><br>    <span class="hljs-comment">//(rq.downloadHandler as DownloadHandlerAssetBundle).assetBundle;</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    Debug.Log(rq.result + rq.error + rq.responseCode);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>Post</code>数据流程<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//所有数据都继承了IMultipartFormSection接口, 使用该接口装数据</span><br>List&lt;IMultipartFormSection&gt; list = <span class="hljs-keyword">new</span> ();<br><span class="hljs-comment">//使用IMultipartFormDataSectino装键值对, 值可以是任何内容</span><br>list.Add(<span class="hljs-keyword">new</span> IMultipartFormDataSection(<span class="hljs-string">&quot;Name&quot;</span>,<span class="hljs-string">&quot;John&quot;</span>));<br><span class="hljs-comment">//使用IMultipartFormFileSectino传文件</span><br><span class="hljs-comment">//  文件名,字节数组</span><br>    list.Add(<span class="hljs-keyword">new</span> IMultipartFormFileSection(<span class="hljs-string">&quot;a.exe&quot;</span>, File.ReadAllBytes(<span class="hljs-string">&quot;文件地址&quot;</span>)));<br><span class="hljs-comment">//  字符串, 文件名</span><br>    list.Add(<span class="hljs-keyword">new</span> IMultipartFormFileSectino(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;服务器地址.txt&quot;</span>));<br><span class="hljs-comment">//  字符串, 编码格式, 文件名</span><br><span class="hljs-comment">//  表单名, 字节数组, 文件名, 文件类型</span><br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function">IEnumerator <span class="hljs-title">Upload</span>()</span><br>&#123;<br>  List&lt;IMultipartFormSection&gt; list = <span class="hljs-keyword">new</span> ();<br>  <span class="hljs-comment">//list.Add() 添加键值对</span><br>  UnityWenRequest rq = UnityWebRequest.Post(<span class="hljs-string">&quot;地址&quot;</span>,list);<br>  rq.SendWebRequest();<br>  <span class="hljs-keyword">while</span>(!rq.isDone)&#123;<br>    print(rq.uploadProgress);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(rq.result == UnityWebRequest.Result.Success)&#123;<br>    print(<span class="hljs-string">&quot;成功&quot;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    Debug.Log(rq.result + rq.error + rq.responseCode);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>Post</code>上传单例<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NetWWWMgr</span>:<span class="hljs-title">MonoBehaviour</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UploadFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filename, <span class="hljs-built_in">string</span> localPath, UnityAction action</span>)</span><br>  &#123;<br>    StartCoroutine(UploadFileAsync(filename,localPath,action));<br>  &#125;<br>  <span class="hljs-function">IEnumerator <span class="hljs-title">UploadFileAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filename, <span class="hljs-built_in">string</span> localPath, UnityAction action</span>)</span><br>  &#123;<br>    List&lt;IMultipartFormSection&gt; list = <span class="hljs-keyword">new</span> ();<br>    list.Add(<span class="hljs-keyword">new</span> IMultipartFormDataSection(filename, File.ReadAllBytes(localPath));<br>    UnityWenRequest rq = UnityWebRequest.Post(<span class="hljs-string">&quot;地址&quot;</span>,list);<br>    rq.SendWebRequest();<br>    <span class="hljs-keyword">while</span>(!rq.isDone)&#123;<br>      print(rq.uploadProgress);<br>      <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    action?.Invoke(rq.result);<br>    <span class="hljs-keyword">if</span>(rq.result == UnityWebRequest.Result.Success)&#123;<br>      print(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      Debug.Log(rq.result + rq.error + rq.responseCode);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>Get</code>自定义类型数据<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//关键类:</span><br><span class="hljs-comment">//1. DownloadHandlerBuffer 简单二进制数据</span><br><span class="hljs-comment">//2. DownloadHandlerFile 下载保存文件(占用小)</span><br><span class="hljs-comment">//3. DownloadHandlerTexture/AssetBundle/AudioClip 下载图片/AB包/音频</span><br><span class="hljs-comment">//4. DownloadHandlerScript 可继承的类, 用于自定义数据</span><br><span class="hljs-function">IEnumerator <span class="hljs-title">DownloadBuffer</span>()</span><br>&#123;<br>  UnityWebRequest r = <span class="hljs-keyword">new</span> (<span class="hljs-string">&quot;地址&quot;</span>,UnityWebRequest.kHttpVerbGET);<br>  r.downloadHandler = <span class="hljs-keyword">new</span> DownloadHandlerBuffer();<span class="hljs-comment">/*替换不同内容*/</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> r.SendWebRequest();<br>  <span class="hljs-keyword">if</span>(r.result == UnityWebRequest.Result.Success)&#123;<br>      <span class="hljs-comment">//数据: r.downloadHandlerBuffer.data</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      Debug.Log(r.result + r.error + r.responseCode);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomDOwnloadHandler</span>:<span class="hljs-title">DOwnloadHandlerScript</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> savePath;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] cacheBytes;<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomDOwnloadHandler</span>():<span class="hljs-title">base</span>()</span>&#123;&#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomDOwnloadHandler</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes</span>):<span class="hljs-title">base</span>(<span class="hljs-params">bytes</span>)</span>&#123;&#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomDOwnloadHandler</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> path</span>):<span class="hljs-title">base</span>()</span>&#123;<br>    <span class="hljs-keyword">this</span>.savePPth = path;<br>  &#125;<br><br>  <span class="hljs-comment">//获取数据</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">GetData</span>()</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> cacheBytes;<br>  &#125;<br><br>  <span class="hljs-comment">//收到数据后每帧自动调用</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReceiveData</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] data, <span class="hljs-built_in">int</span> dataLength</span>)</span><br>  &#123;<br>    data.CopyTo(cacheBytes, index);<br>    index += data.Length;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//消息收完自动调用</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CompleteContent</span>()</span><br>  &#123;<br>    <span class="hljs-comment">//保存到本地</span><br>    File.WriteAllBytes(savePath, cacheBytes);<br>    <span class="hljs-comment">//或者其他解析操作</span><br>  &#125;<br><br>  <span class="hljs-comment">//收到ContentLength标头时自动调用</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReceiveContentLengthHeader</span>(<span class="hljs-params"><span class="hljs-built_in">ulong</span> contentLength</span>)</span><br>  &#123;<br>    cacheBytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[contentLength];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>Post</code>自定义数据类型<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//关键类</span><br><span class="hljs-comment">//1. UploadHandlerRaw 字节数组</span><br><span class="hljs-comment">//2. UploadHandlerFile 文件</span><br><span class="hljs-comment">//用法同上, 实际使用较少</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a><a href="#%E7%9B%AE%E5%BD%95">消息处理</a></h2><h3 id="分包与黏包"><a href="#分包与黏包" class="headerlink" title="分包与黏包"></a><a href="#%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86">分包与黏包</a></h3><h3 id="自定义协议工具"><a href="#自定义协议工具" class="headerlink" title="自定义协议工具"></a><a href="#%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86">自定义协议工具</a></h3><ul><li>协议(消息)生成工具<blockquote><p>每一种消息对应一种消息类, 在不同语言中的处理方式不同, 因而使用<code>xml</code>(或<code>json</code>)语言来定义消息类, 然后使用工具根据<code>xml</code>消息类统一生成不同语言对应的消息类代码</p></blockquote><ul><li>编辑<code>xml</code>文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--枚举配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">enum</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;E_PLAYER_TYPE&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;PLAYER&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;P1&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">field</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;P2&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">enum</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--数据结构类配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PlayerInfo&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;Player&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">field</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">field</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">field</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;List&quot;</span> <span class="hljs-attr">T</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--消息类配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">msg</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1001&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PlayerMsg&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;Player&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">field</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;PlayerInfo&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;data&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">msg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>读取<code>xml</code>信息<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C#">XmlDocument xml = <span class="hljs-keyword">new</span> ();<br>xml.Load(<span class="hljs-string">&quot;地址文件.xml&quot;</span>);<br><span class="hljs-comment">//选择唯一节点</span><br>XmlNode root = xml.SelectSingleNode(<span class="hljs-string">&quot;message&quot;</span>);<br><span class="hljs-comment">//选择一个节点下的所有节点</span><br>XmlNodeList enumList = root.SelectNodes(<span class="hljs-string">&quot;enum&quot;</span>);<br><span class="hljs-keyword">foreach</span>(XmlNode x <span class="hljs-keyword">in</span> enumList)&#123;<br>  <span class="hljs-comment">//输出每个枚举的属性</span><br>  print(x.Attribute[<span class="hljs-string">&quot;name&quot;</span>].Value);<br>  print(x.Attribute[<span class="hljs-string">&quot;namespace&quot;</span>].Value);<br>  <span class="hljs-comment">//输出枚举下的所有值</span><br>  XmlNodeList fields = x.SelectNodes(<span class="hljs-string">&quot;field&quot;</span>);<br>  <span class="hljs-keyword">foreach</span>(XmlNode f <span class="hljs-keyword">in</span> x)&#123;<br>    print(f.Attribute[<span class="hljs-string">&quot;type&quot;</span>].Value + <span class="hljs-string">&quot; &quot;</span> + f.Attribute[<span class="hljs-string">&quot;name&quot;</span>].Value);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建Unity菜单<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProtocolTool</span><br>&#123;<br>  [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;ProtocolTool/创建C#脚本&quot;</span>)</span>]<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateCSharp</span>()</span><br>  &#123;<br>    <span class="hljs-comment">//内部拼接字符串</span><br>  &#125;<br><br>  [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;ProtocolTool/创建Java脚本&quot;</span>)</span>]<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateJava</span>()</span><br>  &#123;&#125;<br><br>  [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;ProtocolTool/创建C++脚本&quot;</span>)</span>]<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateCpp</span>()</span><br>  &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="第三方协议工具Protobuf"><a href="#第三方协议工具Protobuf" class="headerlink" title="第三方协议工具Protobuf"></a><a href="#%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86">第三方协议工具<code>Protobuf</code></a></h3><p>谷歌开发的生成工具</p><h4 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7protobuf"><code>Protobuf</code></a></h4><ul><li>下载开发平台的<code>dll</code>, 下载运行平台的编译器, 使用<code>.proto</code>扩展名</li><li>导入<code>dll</code>文件</li><li><code>proto</code>文件配置规则<ul><li>注释: 同<code>C#</code></li><li>版本号: 默认<code>&quot;proto2&quot;</code>, 必须放在第一行, <code>syntax=&quot;proto3&quot;;</code></li><li>命名空间: <code>package 名;</code></li><li>消息类: <code>message 类名&#123;/*声明*/&#125;</code></li><li>成员类型和唯一编号<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs proto">//浮点数: float double<br>float f = 1;<br>//整数<br>//  变长: int32 int64 uint32 uint64 sint32 sint64<br>int32 i = 2;<br>uint32 ui = 3; //正数<br>sint32 si = 4; //负数<br>//  固定: fixed32 fixed64 sfixed32 sfixed64<br>fixed32 fx = 5; //始终是4个字节<br>//其他: bool(默认false) string bytes(字符串字节数组, 少用)<br>//每个变量必须有一个唯一编号<br></code></pre></td></tr></table></figure></li><li>变量修饰符<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs proto">//数组: repeated<br>repeated int32 listInt = 6; //类似List&lt;int&gt;<br>//字段是否必须赋值: required(不支持proto3) optional<br>//字典: map<br>map&lt;int32,string&gt; m = 7; //类似Dictionary&lt;int,string&gt;<br></code></pre></td></tr></table></figure></li><li>枚举<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs proto">TestEnum testEnum = 8;<br>enum TestEnum&#123;<br>  First = 0; //第一个必须是0<br>  Second = 5;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>自定义类对象, 同样需要编号, 默认为<code>null</code></li><li>更新删除变量时, 注释变量, 并保留唯一编号不准使用: <code>reserved 2, 15 to 19;</code> 保留变量名不准使用: <code>reserved &quot;testEnum&quot;;</code> 两者选其一就可以, 也可以同时使用</li><li>导入其他<code>proto</code>: <code>import &quot;另一个路径.proto&quot;;</code>使用时需包含命名空间</li></ul></li><li>生成代码: 传参运行对应平台的<code>protoc.exe</code><ul><li>参数(不能有中文): <code>-I=proto文件路径 --csharp_out=输出文件路径 原文件名</code></li></ul></li><li>加入<code>Unity</code>菜单<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProtobufTool</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> PROTO_PATH = <span class="hljs-string">&quot;proto文件目录&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> CS_PATH = <span class="hljs-string">&quot;proto文件输出CS目录&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> CPP_PATH = <span class="hljs-string">&quot;proto文件输出C++目录&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> JAVA_PATH = <span class="hljs-string">&quot;proto文件输出Java目录&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> PROTOC_PATH = <span class="hljs-string">&quot;编译器路径&quot;</span>;<br>  <br>  [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;ProtobufTool/生成C#代码&quot;</span>)</span>]<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateCS</span>()</span><br>  &#123;<br>    Generate(<span class="hljs-string">&quot;cssharp_out&quot;</span>,CS_PATH);<br>  &#125;<br><br>  [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;ProtobufTool/生成C++代码&quot;</span>)</span>]<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateCPP</span>()</span><br>  &#123;<br>    Generate(<span class="hljs-string">&quot;cpp_out&quot;</span>,CPP_PATH);<br>  &#125;<br><br>  [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;ProtobufTool/生成Java代码&quot;</span>)</span>]<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateJAVA</span>()</span><br>  &#123;<br>    Generate(<span class="hljs-string">&quot;java_out&quot;</span>,JAVA_PATH);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Generate</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> outCmd, <span class="hljs-built_in">string</span> outPath</span>)</span><br>  &#123;<br>    DirectoryInfo di = Directory.CreateDirectory(PROTO_PATH);<br>    FileInfo[] files = di.GetFiles();<br>    <span class="hljs-keyword">foreach</span>(FileInfo f <span class="hljs-keyword">in</span> files)&#123;<br>      <span class="hljs-keyword">if</span>(f.Extension==<span class="hljs-string">&quot;.proto&quot;</span>)&#123;<br>        Process cmd = <span class="hljs-keyword">new</span> ();<br>        cmd.StartInfo.FileName = PROTO_PATH;<br>        cmd.StartInfo.Arguments = <br>                  <span class="hljs-string">$&quot;-I=<span class="hljs-subst">&#123;PROTO_PATH&#125;</span> --<span class="hljs-subst">&#123;outCmd&#125;</span>=<span class="hljs-subst">&#123;outPath&#125;</span> <span class="hljs-subst">&#123;f&#125;</span>&quot;</span>;<br>        cmd.Start();<br>        Debug.Log(f + <span class="hljs-string">&quot; Completed.&quot;</span>);<br>      &#125;<br>    &#125;<br>    Debug.Log(<span class="hljs-string">&quot;All Completed.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>序列化与反序列化<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//引入Protobuf命名空间</span><br><span class="hljs-comment">//以message Msg&#123;&#125;为例</span><br>Msg msg = <span class="hljs-keyword">new</span> ();<br><span class="hljs-comment">/*填充成员变量*/</span><br><br><span class="hljs-comment">//序列化为本地文件: Protobuf提供基类成员方法WriteTo</span><br><span class="hljs-keyword">using</span>(FileStream fs = File.Create(Application.persistentDataPath + <span class="hljs-string">&quot;/msg.Msg&quot;</span>))&#123;<br>  msg.WriteTo(fs);<br>&#125;<br><br><span class="hljs-comment">//序列化为字节数组: WriteTo到MemoryStream中再ToArray()</span><br><span class="hljs-built_in">byte</span>[] bytes = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">using</span>(MemoryStream ms = <span class="hljs-keyword">new</span> ())&#123;<br>  msg.WriteTo(ms);<br>  bytes = ms.ToArray();<br>&#125;<br><br><span class="hljs-comment">//反序列化到内存中: Protobuf提供基类方法Parser.ParseFrom(字节数组或流)</span><br>Msg rcvMsg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">using</span>(FileStream fs = File.Read(Application.persistentDataPath + <span class="hljs-string">&quot;/msg.Msg&quot;</span>))&#123;<br>  rcvMsg = Msg.Parser.ParseFrom(fs);<br>&#125;<br><br><span class="hljs-comment">//从字节数组反序列化</span><br>Msg rcvMsg2 = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">using</span>(MemoryStream ms = <span class="hljs-keyword">new</span> (bytes))&#123;<br>  rcvMsg2 = Msg.Parser.ParseFrom(ms);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>静态工具类<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">NetTool</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">GetProtoBytes</span>(<span class="hljs-params">IMessage msg</span>)</span><br><span class="hljs-function">  <span class="hljs-comment">/*工具将所有写的类继承了IMessage*/</span></span><br>  &#123;<br>    <span class="hljs-keyword">return</span> msg.ToByteArray();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">GetProtoMsg</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] bytes</span>) <span class="hljs-keyword">where</span> T:<span class="hljs-keyword">class</span>, IMessage</span><br>  &#123;<br>    <span class="hljs-comment">//反射</span><br>    Type type = <span class="hljs-keyword">typeof</span>(T);<br>    PropertyInfo pi = type.GetProperty(<span class="hljs-string">&quot;Parser&quot;</span>);<br>    <span class="hljs-built_in">object</span> parserobj = pi.GetValue(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>    Type parserType = parserobj.GetType();<br>    MethodInfo mi = parserType.GetMethod(<span class="hljs-string">&quot;ParseFrom&quot;</span>,<span class="hljs-keyword">new</span> Type[] &#123;<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">byte</span>[])&#125;);<br>    <span class="hljs-built_in">object</span> msg = mi.Invoke(parserobj,<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123;bytes&#125;);<br>    <span class="hljs-keyword">return</span> msg <span class="hljs-keyword">as</span> T;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//外部使用</span><br>Msg msg2;<br><span class="hljs-comment">//  把一个msg2序列化</span><br><span class="hljs-built_in">byte</span>[] bytes2 = NetTool.GetProtoBytes(msg2);<br><span class="hljs-comment">//  把一个byte[]反序列化为Msg</span><br>Msg msg3 = NetTool.GetProtoMsg&lt;Msg&gt;(bytes2);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Protobuf-Net"><a href="#Protobuf-Net" class="headerlink" title="Protobuf-Net"></a><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7protobuf"><code>Protobuf-Net</code></a></h4><blockquote><p>早期的<code>Protobuf</code>不支持<code>C#</code>, 第三方<code>Protobuf-Net</code>添加了对<code>C#</code>的支持. <code>Protobuf</code>不支持<code>.Net3.5</code>及以下版本, 对于较旧的Unity只能使用<code>Protobuf-Net</code>, 新版的Unity可以使用<code>Protobuf</code></p></blockquote><h3 id="大小端模式-大小端字节序"><a href="#大小端模式-大小端字节序" class="headerlink" title="大小端模式&#x2F;大小端字节序"></a><a href="#%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86">大小端模式&#x2F;大小端字节序</a></h3><ul><li>概念<ul><li>大端模式: 数据的高字节保存在低地址中, 符合人的阅读习惯</li><li>小端模式: 数据的高字节保存在高地址中</li></ul></li><li>产生背景: 计算机系统处理都是小端模式, 人创造大端模式便于阅读</li><li>影响: 不同系统不同平台不同语言采用的模式可能不同, 一个数在另一个不同模式的环境中数据不同, 在接收处理数据时必须考虑不同环境的处理<ul><li><code>C#</code>与<code>C++</code>为小端模式, <code>Java</code>&#x2F;<code>Erlang</code>&#x2F;<code>AS3</code>是大端模式, 两方之间通信需要进行大小端转换</li></ul></li><li>大小端模式转换<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//short/int/long</span><br><span class="hljs-comment">//  1. 判断是否小端模式</span><br>print(BitConverter.IsLittleEndian); <span class="hljs-comment">//C#和Unity中显示为True</span><br><br><span class="hljs-comment">//  2. 转网络字节序(大端模式)</span><br><span class="hljs-built_in">int</span> i = <span class="hljs-number">99</span>;<br><span class="hljs-built_in">byte</span>[] bytes = BitConverter.GetBytes(i); <span class="hljs-comment">//小端模式的99的byte[]</span><br><span class="hljs-built_in">byte</span>[] bytes2 = BitConverter.GetBytes(IPAddress.HostToNetworkOrder(i));<br><span class="hljs-comment">/*大端模式的99的byte[]*/</span><br><br><span class="hljs-comment">//  3. 网络字节序转本机字节序(大→小)</span><br><span class="hljs-built_in">int</span> i1 = BitConverter.ToInt32(bytes,<span class="hljs-number">0</span>); <span class="hljs-comment">//直接转</span><br><span class="hljs-built_in">int</span> i2 = IPAddress.NetworkToHostOrder(BitConverter.ToInt32(bytes2,<span class="hljs-number">0</span>));<br><span class="hljs-comment">/*大转小*/</span><br><br><span class="hljs-comment">//通用转换: 反转位置</span><br><span class="hljs-keyword">if</span>(BitConverter.IsLittleEndian)&#123;Array.Reverse(bytes);&#125;<br><span class="hljs-comment">/*或*/</span><br><span class="hljs-keyword">if</span>(!BitConverter.IsLittleEndian)&#123;Array.Reverse(bytes);&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="消息加密与解密"><a href="#消息加密与解密" class="headerlink" title="消息加密与解密"></a><a href="#%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86">消息加密与解密</a></h3><ul><li>单向加密(不可逆): 将数据计算为另一种固定长度的值<ul><li>案例: <code>MD5</code>, <code>SHA1</code>, <code>SHA256</code></li><li>用途: 网络传输不用, 一般用于为密码加密传输</li></ul></li><li>对称加密: 密钥加密明文, 解密密文<ul><li>案例: <code>DES</code>, <code>3DES</code>, <code>IDEA</code>, <code>AES</code></li><li>优点: 计算量小, 加密速度快</li><li>缺点: 知道了密钥和算法可以破解</li><li>用途: 消息传输, 密钥由服务器生成下发, 每次建立通讯都变化</li></ul></li><li>非对称加密&#x2F;公开密钥加密: 分为公钥和私钥, 两者之间不能计算出另一个, 其中一个加密, 只能用另一个解密<ul><li>案例: <code>RSA</code>, <code>DSA</code></li><li>优点: 安全性高</li><li>缺点: 算法复杂, 加密速度慢</li><li>用途: 安全性要求较高, 接收速度慢的场景, 如支付<code>SDK</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是一篇加密文章</title>
    <link href="/2024/02/19/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    <url>/2024/02/19/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4dfb817eb9bbe42fa2831cdf403798a96995d37057e080034b46b7a317b74ef3">4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f584592818669145e60c06fd7904587ca16ecfa4a56638c790dd696af3095533ca6491ee6441f09545a5fcebb0b3508fe8333e99765a36ea3efd20d316713fbd2668f5b5994c40e703b72d9967365c1ffa70529314657a1b23d0ab434251de2180c0da1c1f84963d1d983def3dc9260f855b0e1780916f2eaaeca3262aa2e37ef0cafb2f603bf0f6e506b35af4fd7f8293e25c9bb554c072d6358f16b4e98decf27b578bc59978174080d0d66ea3d920a8c6844b2b9575945a326f534eeed7db18330a44c94bf726145302613f538d68b02a9fb3ce2b5668a743c769a430ff9691b9cf8d2326431a8cc4ca88d5afbe9841411ca36522f5f5427b9414f25ea2eed7c6e0a93cce84da470a5f92897808f2733ec3a2c2f2380cb6aa3a88465c45a39c1e0ae47e825c7685dfb4bde531279fd32344ba866077d2440567b1902b932a402d30e24a80419c033de52dbfeb466f4dea299a0c455bf78869b03a589234296878c5afbbac45f238be63506f7c5e0cff9ea87c372b79c34a1ad39768b0d82121bc695a3079d5a7536c58d692a421f7ee4d8eb13187603d8fcd4525a01162dbd66d5558bede4e441b078b0b4338c49a92325f6b8a86b77aa4e8e01bc116e7f562c4c1463177281dbd8366e0a74886349e08fd0cb9a0be9023037241f62a6d46bda5597b96cc1f9e60ef07b7b79634f3c0dfcbe562ebb6e8b44924a317e28edabbf0c14be62662745dd377125a75588f27e16021fffb3ab0127279557e90adf3c1acd11c81491527d856e53d2bea54907a4438764b12638d73dfc67432d32299aa9224e1393e89beea5f4cc29eb30b712be0e4d521752a7fbb399315db5fa17c04945f941aa5590275949d560fae8a719d6749b2d9797583d238e37d2ccebb6f456d02e1b18a9fd6c982c1c7f10664441b1cfe808fd9318dcabd72745889a13a7ee23b84ef3a3c5f96136968cdf757d57aac82f28dc0ec76d3c1d3fecfe5d3a6bbde1428d465cfe065c0ad001c6f9c19417379d2bf0a5fca7460bd729243712e7bdd4216e6ffdeca3ec5e834535a36eb9a4845b7507bb64a61884795132e6011a8347942b349c86cf6ced2342b5e43f523060ef701e1833139f833717a2a5b87be62ea32d044d054d1dff0431a86e50d3f9b82c5d3abb11d0c5c21c8c73666d8ee9031ef4644322aa880bcd64f3760b68fb4d8461db36e6683def4bf2284d816bb520bc025ca1a8c27b5f010f3873765cd172fa68f6c9c001880d2aa0935ae809d0decd386c471b1d48870c0c88fbfb57d1405507085e009adfffe27b56c1eec763b00ebd003be34062daf240cd2ea9088764565f3b6f029fbb9e5b2f0709c2740a097b26f571fa2fbee6eef1083a3126536927afd51a11c738fd6c38ea40c9cb3735422e283deda7f0df502a1a5763849ce587a100e3d0a2d71e2fb6986c75c6eb1b66c1bfb73d8354f4f302abdd84d471b2f098db0648190690e1845bb469618f1e62b91aba98026cadede95c3b45c9586813f6c5d0e45b912b3161c781810dd5aa581b66194999d02e411fe8db2eeee38fe541270869d447c8011d34377d3afa03fa73f142ca01ae1be9eed06e22f4d6209fd8e77820c0b6aa979f555f8597e9b7fba9100db6c1273611b3ad3aa463a32e384e772085c904c2126085f5e550ecdf13a4eb21372a79c51f18a07ab5d87dd2461dec2320a53f6d7d81b4e63b7bf81287a3ffa154b5db09fae103696a9f51f0de9f2ee4ec2a359613569c03ac97f89850d38441d719e7e9d0a5f1a23d610b1ae7637c62b6eebd80e5b14621862a31b3ca0850d7e4ce95ef1b752003fea9a9b04adddf9374d3428777198c54c8116d8120606b1f8b2848eaaf56818a7832ac9c4e7e96e08b14d0a0c3c337f68fbe8f933aca2c88389ffaa03d9d1c806b45bdea04c432e0b00ff89c0e873fdb574eb1d0c51f7d3175cf357b0913e8d6191aa60ccf89d7f1dffdec85fa9dd876c7de85aa7684cbc45bf81649c6c63a54fe4ccee042c4bfaf3247af870e33fc09e73ae4f32e9db74d076909c0d4e385607423406805482ed07c5731cfee9858ae518d5f0036dd82f29d40a94a52b5c9596fbd9406e7938e853f31626595754fd6c1b2f0f2446a7f1a70e15cf73d8f29dc2fcfcbedb9f945be6e512bdc5f5a8b297a97bc494847763a967c8a7fb42f4f8657a1b4eb82d893f52f620530ef314066b1e3c840c193d94d3a0be7894b705915b8c45d3252a87f50ee8c2eac9656462b231165373a1d7893045378a4f10a72bc7befcd25b9e1db68eba8b2ebcd56c96932a586fff8344067ad1b898de1e0a561c0e525868f9171b70e1d55eed914448bf1ffae7429e58dcfb9621ac138216131bb64b73687547e1b71b6f2e646fbb0f7c4c8b0d930b59a4cac4aa27d2c9ba5cf4536357ce778b507a07920474c3c2a3d7942e9a4934cc3c7e326a61d4dde258522890baa79d948828cdb81250a53ee80c67e1773acf61923ed22a2c46ca2d2321187ba98b694dae55ad2fa41a471fb993aaca7554264d68faa5120d66c25a4e5627141f92b5aa5582af4450739d66653149ef1709050d383c8f866e3bd6097a5fbc9247500aeffc78ea43f5095f81c946daa21058ccf366022790d0acc297b3f8f35a91d0b1e2bb114ca58418e6ca07ae6cc4852842bfa60c51f40e8334eabb2e3c0ea605267bfb3f246eecef9197ca81d2624a13c79cd6d4d93e9b0428c6848a829d3f3096ea6ec2463708bfabb7adb7e2afc855bb0167d3dcb7bae492b3bf0d1a7cd86a17b8c5287ca5a36b9491281868b8f9ccdc37cdaa2fd13f0fa0c97fb01a743479dc683c6ab9f5519f8d745bc585581c829ec78c0f4de14fcf95f86c5644f4a4dfb124d95bbc84b368d03b36043de9667b7db1987afd58460d5b1d8c56a845d7f2cd0ee001a496b084563b773c0df6cb7811afe2abb50f5658821748f38b734ba2f6b998ece5d108ea286ac37dbc3bb97356c3380a51c2f8e83717d49d4ea12713e123ab64eec57ec1428dacb3aa5286feaa05b1a6bc8856ee714ec9db2013c9414ea0d91802846920bcdc564d2a6166e84a01ef56f4f885c2be2f80ec4c8877227c710bf8b8da284561ea050cbb1bd52f0a41a828e9b5de98eecbd4820f10e13006fc3de4283049fc67176ec36607ffcf6b866e62614a6853179eb122951b6deb59756a5e3ade0cb6dc23f0533de8d2ec0349b695cc83b72b46e624a75f87c25b997ae85b6bc48c07c0617fa58823a6247922f62de79211b8a5737b4b1706676db3efe12008aa59167395cc907442f7a6b229b7ff6aa5af6bf6d9b77f640f3fa043eac1cbf410769ad7da8728a29bd5469b2e1393990018df3052aceeed24a266c839665417144bd1cf315bad822e417dcbe6bd51dfbb907d9dd26ca8df5c7cf39d417f90495e72630dc6c8432cc0342e0799c2d3241fc298cd0b6d0ed010d4e85ece9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码：123456</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity14 - ScriptableObject</title>
    <link href="/2024/02/18/Unity14%20-%20ScriptableObject/"/>
    <url>/2024/02/18/Unity14%20-%20ScriptableObject/</url>
    
    <content type="html"><![CDATA[<p>通过<code>ScriptableObject</code>实现了多个<code>gameObject</code>共享同一套数据（节约内存）、在Unity编辑器Inspector窗口中修改非持久化开发配置（方便）的目的。</p><span id="more"></span><!-- omit in toc --><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#scriptableobject%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98"><code>ScriptableObject</code>解决的问题</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6">创建数据文件</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6">使用数据文件</a><ul><li><a href="#%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E6%8C%81%E4%B9%85%E5%8C%96">编辑器中持久化</a></li></ul></li><li><a href="#%E5%BA%94%E7%94%A8">应用</a><ul><li><a href="#%E5%8F%AA%E7%94%A8%E4%B8%8D%E6%94%B9%E5%8F%AF%E5%9C%A8unity%E4%B8%AD%E7%BC%96%E8%BE%91%E4%B8%8D%E9%9C%80%E8%A6%81%E5%8F%91%E5%B8%83%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E9%85%8D%E7%BD%AE">只用不改，可在Unity中编辑，不需要发布，不需要持久化的配置</a></li><li><a href="#%E5%A4%8D%E7%94%A8%E6%95%B0%E6%8D%AE">复用数据</a></li><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%8E%B7%E5%8F%96%E5%9F%BA%E7%B1%BB">单例模式获取基类</a></li></ul></li></ul><h1 id="ScriptableObject解决的问题"><a href="#ScriptableObject解决的问题" class="headerlink" title="ScriptableObject解决的问题"></a><a href="#%E7%9B%AE%E5%BD%95"><code>ScriptableObject</code>解决的问题</a></h1><ul><li>数据复用：批量生成子弹时，所有子弹对象具有相同的成员属性(<code>speed</code>,<code>atk</code>,<code>lifespan</code>等)，但每生成一个子弹就要开辟一块内存存储相同的内容，使用<code>ScriptableObject</code>可以让所有子弹共用同一块内存空间来存储这些相同的内容</li><li>数据外显：让数据显示在<code>Inspector</code>窗口中，便于修改</li></ul><h1 id="创建数据文件"><a href="#创建数据文件" class="headerlink" title="创建数据文件"></a><a href="#%E7%9B%AE%E5%BD%95">创建数据文件</a></h1><ul><li>继承：<code>public class MyData : ScriptableObject &#123;&#125;</code><ul><li>继承<code>ScriptableObject</code>后在类中<code>public</code>的变量会显示在<code>Inspector</code>窗口中</li></ul></li><li>添加到<code>Create</code>资源菜单：<code>[CreateAssetMenu(fileName=&quot;添加后显示在目录上的文件名&quot;,menuName=&quot;Create菜单显示的名,/分隔多级目录&quot;,order=在菜单上显示的顺序)]</code></li></ul><h1 id="使用数据文件"><a href="#使用数据文件" class="headerlink" title="使用数据文件"></a><a href="#%E7%9B%AE%E5%BD%95">使用数据文件</a></h1><ul><li>本质是创建了一个类似<code>Material</code>一样的Unity资源文件，内容完全自定义。在go上添加脚本，<code>public</code>一个<code>MyData</code>属性，就可以将创建的自定义资源文件拖上去</li><li><code>Resources</code>&#x2F;<code>AB包</code>&#x2F;<code>Addressables</code>都支持添加该资源</li><li>多个go添加同一个资源时共享一个数据，一处修改多处改变</li></ul><h2 id="编辑器中持久化"><a href="#编辑器中持久化" class="headerlink" title="编辑器中持久化"></a>编辑器中持久化</h2><ul><li>在<code>MyData</code>类中<code>public</code>后赋值，每次运行都会运行赋值代码，等效于编辑器中持久化，但发布后不会加载</li><li>每次修改都会修改本地文件<ul><li>不使用本地文件，而是动态创建，实现不读取本地的非持久化<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//与go关联的组件脚本中</span><br><span class="hljs-keyword">public</span> MyData data;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    data = ScriptableObject.CreateInstance&lt;MyData&gt;();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>可以通过保存数据到<code>json</code>&#x2F;<code>xml</code>等文件实现持久化，但多此一举，不建议</li></ul><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a><a href="#%E7%9B%AE%E5%BD%95">应用</a></h1><h2 id="只用不改，可在Unity中编辑，不需要发布，不需要持久化的配置"><a href="#只用不改，可在Unity中编辑，不需要发布，不需要持久化的配置" class="headerlink" title="只用不改，可在Unity中编辑，不需要发布，不需要持久化的配置"></a>只用不改，可在Unity中编辑，不需要发布，不需要持久化的配置</h2>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//角色信息</span><br>[<span class="hljs-meta">CreateAssetMenu(fileName=<span class="hljs-string">&quot;Role&quot;</span>,menuName=<span class="hljs-string">&quot;MyData/Role&quot;</span>,order=0)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Role</span><br>&#123;<br>  [<span class="hljs-meta">System.Serialable</span>] <span class="hljs-comment">//自定义类要显示需要加特性</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RoleInfo</span><br>  &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>      <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>      <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span> &#123;<br>          print(name);<br>          print(age);<br>          print(sex);<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">public</span> List&lt;RoleInfo&gt; roleList;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="复用数据"><a href="#复用数据" class="headerlink" title="复用数据"></a>复用数据</h2><ul><li>为所有用到的go添加一个包含自定义数据资源属性的脚本组件，调用同一个数据资源</li></ul><h2 id="单例模式获取基类"><a href="#单例模式获取基类" class="headerlink" title="单例模式获取基类"></a>单例模式获取基类</h2><ul><li>所有的go为了获得该数据，都需要<code>public关联</code>或<code>动态CreateInstance&lt;&gt;()</code>，每一个go都需要获取一次。通过建立单例模式获取基类来获取数据，让子类获取数据更方便<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SingleScriptableObject</span>&lt;<span class="hljs-title">T</span>&gt;:<span class="hljs-title">ScriptableObject</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span>:<span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-keyword">private</span> T instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T Instance<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-comment">//自定义数据资源的路径是 Resources/类名.asset</span><br>            <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>                instance = Resources.Load&lt;T&gt;(<span class="hljs-string">&quot;ScriptableObject/&quot;</span> + <span class="hljs-keyword">typeof</span>(T).Name);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>                instance = CreateInstance&lt;T&gt;();<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>所有的自定义数据资源类都可以通过继承<code>SingleScriptableObject&lt;类名&gt;</code>，然后go脚本组件通过访问<code>自定义数据类.Instance</code>获得自定义数据资源的数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>ScriptableObject</tag>
      
      <tag>复用数据</tag>
      
      <tag>数据持久化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity11 - Java快速入门</title>
    <link href="/2024/02/17/Unity11%20-%20Java%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2024/02/17/Unity11%20-%20Java%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>在<code>C#</code>基础上快速入门<code>Java</code></p><span id="more"></span><!-- omit in toc --><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E5%8F%98%E9%87%8F">变量</a></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a></li><li><a href="#%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF">条件分支</a></li><li><a href="#%E5%BE%AA%E7%8E%AF">循环</a></li><li><a href="#%E6%95%B0%E7%BB%84">数组</a><ul><li><a href="#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">二维数组</a></li><li><a href="#%E4%BA%A4%E9%94%99%E6%95%B0%E7%BB%84">交错数组</a></li><li><a href="#arrays%E7%B1%BB-%E4%B8%93%E9%97%A8%E6%93%8D%E4%BD%9C%E6%95%B0%E7%BB%84javautilarrays"><code>Arrays</code>类: 专门操作数组(<code>java.util.Arrays</code>)</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a><ul><li><a href="#%E5%B0%81%E8%A3%85">封装</a></li><li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="#%E5%A4%9A%E6%80%81">多态</a></li></ul></li><li><a href="#%E5%8C%85package-%E7%B1%BB%E4%BC%BCc%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4namespace">包<code>package</code>: 类似<code>C#</code>中的命名空间<code>namespace</code></a><ul><li><a href="#%E5%8C%85%E5%90%8D%E8%A7%84%E5%88%99">包名规则</a></li><li><a href="#%E6%96%B0%E5%BB%BA%E5%8C%85">新建包</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%8C%85">使用包</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5-%E4%BD%9C%E4%B8%BA%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E4%BD%BF%E7%94%A8">静态导入: 作为静态成员使用</a></li></ul></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB">内部类</a><ul><li><a href="#%E9%9D%9E%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB">非匿名内部类</a></li><li><a href="#%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E8%BE%83%E5%B0%91%E7%94%A8">匿名内部类(较少用)</a></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C">字符串操作</a><ul><li><a href="#string"><code>String</code></a></li><li><a href="#stringbuilder"><code>StringBuilder</code></a></li></ul></li><li><a href="#%E9%9B%86%E5%90%88%E7%B1%BB">集合类</a><ul><li><a href="#%E6%B3%9B%E5%9E%8B">泛型</a></li><li><a href="#arraylist%E5%92%8Clinkedlist%E7%B1%BB%E4%BC%BCc%E7%9A%84list%E5%92%8Clinkedlist"><code>ArrayList</code>和<code>LinkedList</code>(类似<code>C#</code>的<code>List</code>和<code>LinkedList</code>)</a></li><li><a href="#hashset%E5%92%8Ctreeset"><code>HashSet</code>和<code>TreeSet</code></a></li><li><a href="#hashmap%E5%92%8Ctreemap"><code>HashMap</code>和<code>TreeMap</code></a></li></ul></li><li><a href="#%E5%85%B6%E4%BB%96%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E5%81%9A%E4%BA%86%E8%A7%A3">其他不常用内容做了解</a><ul><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-%E5%9F%BA%E6%9C%AC%E5%90%8Cc">异常处理: 基本同<code>C#</code></a></li><li><a href="#lambda"><code>lambda</code></a></li><li><a href="#%E6%96%B9%E6%B3%95%E7%9A%84%E5%BC%95%E7%94%A8%E5%92%8Cfunction-%E7%94%A8%E5%87%BD%E6%95%B0%E8%A3%85%E8%BD%BD%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-%E7%B1%BB%E4%BC%BCc%E5%A7%94%E6%89%98">方法的引用和<code>Function</code>: 用函数装载函数式接口, 类似<code>C#</code>委托</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93">常用类库</a><ul><li><a href="#number-%E6%89%80%E6%9C%89%E6%95%B0%E7%9A%84%E7%88%B6%E7%B1%BB"><code>Number</code>: 所有数的父类</a></li><li><a href="#biginteger-%E5%AD%98%E5%82%A8%E4%BB%BB%E6%84%8F%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%95%B4%E6%95%B0"><code>BigInteger</code>: 存储任意大小的整数</a></li><li><a href="#bigdecimal-%E5%AD%98%E5%82%A8%E5%A4%A7%E6%B5%AE%E7%82%B9%E6%95%B0"><code>BigDecimal</code>: 存储大浮点数</a></li><li><a href="#math-%E9%9D%99%E6%80%81%E7%B1%BB"><code>Math</code>: 静态类</a></li><li><a href="#date%E6%97%A5%E6%9C%9F%E7%B1%BB-system%E7%B3%BB%E7%BB%9F%E7%B1%BB"><code>Date</code>日期类, <code>System</code>系统类</a></li></ul></li></ul></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a href="#%E7%9B%AE%E5%BD%95">变量</a></h1><ul><li><code>Java</code>中没有专门的无符号类型</li><li>常量是<code>final</code></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><a href="#%E7%9B%AE%E5%BD%95">运算符</a></h1><p>同<code>C#</code></p><h1 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a><a href="#%E7%9B%AE%E5%BD%95">条件分支</a></h1><ul><li><code>if</code>: 同<code>C#</code></li><li><code>switch</code>: 贯穿时可以加入逻辑语句, 其他同<code>C#</code><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//C#</span><br><span class="hljs-comment">//一个int i</span><br><span class="hljs-keyword">switch</span> (i)<br>&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">/*贯穿时case 1不允许有代码*/</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      Console.WriteLine(i);<br>      <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Java</span><br><span class="hljs-comment">//一个int i</span><br><span class="hljs-keyword">switch</span>(i)<br>&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">/*case 1中允许有自己单独的逻辑语句再贯穿*/</span><br>      i++;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      System.out.println(i);<br>      <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a><a href="#%E7%9B%AE%E5%BD%95">循环</a></h1><ul><li><code>while</code>同<code>C#</code></li><li><code>do &#123;&#125; while()</code>同<code>C#</code></li><li><code>for</code>同<code>C#</code></li><li><code>foreach</code>: 使用同名<code>for</code>, 使用<code>:</code>替换<code>in</code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : arr)&#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>break</code>&#x2F;<code>continue</code>: 同<code>C#</code></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a href="#%E7%9B%AE%E5%BD%95">数组</a></h1><ul><li>声明方式多了一种: <ul><li><code>int[] arr;</code></li><li><code>int arr[];</code></li></ul></li></ul><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ul><li><code>Java</code>的二维数组与<code>C#</code>的交错数组写法一致: <code>int[][] arr</code></li></ul><h2 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h2><ul><li><code>int[][] arr = new int[n][]</code></li></ul><h2 id="Arrays类-专门操作数组-java-util-Arrays"><a href="#Arrays类-专门操作数组-java-util-Arrays" class="headerlink" title="Arrays类: 专门操作数组(java.util.Arrays)"></a><code>Arrays</code>类: 专门操作数组(<code>java.util.Arrays</code>)</h2><ul><li>使用一个值填充数组: <code>fill</code><ul><li><code>Arrays.fill(数组,填充值)</code></li><li><code>Arrays.fill(数组,填充起始位置,填充最后位置,填充值)</code></li></ul></li><li>排序: <code>sort</code></li><li>复制数组: <code>copyOf</code><ul><li><code>Arrays.copyOf(被复制数组, 复制长度)</code></li></ul></li><li>复制数组特定范围: <code>copyOfRange</code><ul><li><code>Arrays.copyOfRange(被复制数组,起始位置,最后位置(不包括))</code></li></ul></li><li>二分法查询数组: <code>binarySearch</code>(使用前必须先排序)<ul><li><code>Arrays.binarySearch(数组,元素)</code></li><li><code>Arrays.binarySearch(数组,起始搜索位置,最后搜索位置(不包括),元素)</code></li></ul></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a href="#%E7%9B%AE%E5%BD%95">函数</a></h1><ul><li><code>java</code>函数没有<code>ref</code>和<code>out</code></li><li><code>java</code>函数的可变参数写法与<code>C#</code>不同<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String... strs)</span>&#123;<br>  <span class="hljs-comment">/*按String[]使用*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>java</code>函数没有默认参数的说法</li><li><code>java</code>函数一般驼峰命名法(第一个小写,第二个单词开始大写)</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><a href="#%E7%9B%AE%E5%BD%95">面向对象</a></h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>声明<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名<br>&#123;<br>  <span class="hljs-comment">//成员变量</span><br>  <span class="hljs-comment">//成员方法</span><br>  <span class="hljs-comment">//构造函数</span><br>  <span class="hljs-comment">//finalize函数</span><br>  <span class="hljs-comment">//静态函数</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>与<code>C#</code>的不同<ul><li>没有成员属性, 但有可以对成员变量自动生成<code>get</code>,<code>set</code>方法</li><li>没有析构函数, 但有类似的<code>finalize</code>函数<blockquote><p>主动垃圾回收: <code>System.gc();</code></p></blockquote></li><li>没有索引器</li><li>没有运算符重载</li></ul></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>与<code>C#</code>的相同<ul><li>类与类只能单继承</li><li>万物之父<code>Object</code>类</li><li>遵循里氏替换</li></ul></li><li>继承关键字: <code>extends</code>替代<code>C#</code>中的<code>:</code></li><li><code>Object</code>类的一些方法<ul><li><code>getClass()</code>: 类似<code>C#</code>的<code>getType()</code></li><li><code>toString()</code></li><li><code>equals()</code><blockquote><p><code>equals</code>比较两个对象的内容是否相等, <code>==</code>比较两个对象的引用地址是否相同</p></blockquote></li></ul></li><li><code>instanceof</code>判断类型, 类似<code>C#</code>中的<code>is</code><blockquote><p>没有<code>as</code>, 只能用括号强转</p></blockquote></li><li><code>final</code>的作用<ul><li>禁止变量的修改 &#x3D;&gt; 成为常量</li><li>禁止函数的重写</li><li>禁止类的继承</li></ul></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><code>Java</code>中没有<code>VOB</code><ul><li>没有<code>virtual</code>&#x2F;<code>override</code>关键字, 重写时直接实现同名方法就可以覆盖父类方法, 使用<code>super</code>调用父类(类似<code>base</code>)<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//C#里氏替换后默认调用父类方法</span><br>Father s = <span class="hljs-keyword">new</span> Son();<br>s.Eat(); <span class="hljs-comment">//父亲吃</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java里氏替换后直接调用子类方法(如果重写了)</span><br><span class="hljs-type">Father</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>s.eat(); <span class="hljs-comment">//子吃</span><br></code></pre></td></tr></table></figure></li><li><code>java</code>会自动补一个<code>@override</code>, 注释作用, 可有可无</li></ul></li><li>抽象类和抽象方法<code>abstract</code>: 同<code>C#</code></li><li>接口<ul><li>默认只能<code>public</code></li><li>字段只能是静态常量<code>static final</code></li><li>关键字<code>implements</code>, 用逗号<code>,</code>分隔多个接口</li><li>没有显式实现接口: 多个接口有同名方法时, 重写的方法所有接口共享<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//C#: 多个接口具有同名方法时, 必须显式实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SampleClass</span> : <span class="hljs-title">IControl</span>, <span class="hljs-title">ISurface</span><br>&#123;<br>    <span class="hljs-keyword">void</span> IControl.Paint()<br>    &#123;<br>        System.Console.WriteLine(<span class="hljs-string">&quot;IControl.Paint&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> ISurface.Paint()<br>    &#123;<br>        System.Console.WriteLine(<span class="hljs-string">&quot;ISurface.Paint&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//C#: 对象不可直接使用, 需要用接口装一次用对应接口使用</span><br>SampleClass sample = <span class="hljs-keyword">new</span> SampleClass();<br>IControl control = sample;<br>control.Paint();<br><span class="hljs-comment">//C#: 或使用as</span><br>(sample <span class="hljs-keyword">as</span> IControl).Paint();<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="包package-类似C-中的命名空间namespace"><a href="#包package-类似C-中的命名空间namespace" class="headerlink" title="包package: 类似C#中的命名空间namespace"></a><a href="#%E7%9B%AE%E5%BD%95">包<code>package</code>: 类似<code>C#</code>中的命名空间<code>namespace</code></a></h1><h2 id="包名规则"><a href="#包名规则" class="headerlink" title="包名规则"></a>包名规则</h2><ul><li>多人完成, 版权归属发起者: <code>indi.发起者名.项目名.模块名</code></li><li>独立完成, 公开, 版权归属个人: <code>pers.个人名.项目名.模块名</code></li><li>独立完成, 非公开, 版权归属个人: <code>priv.个人名.项目名.模块名</code></li><li>团队研发, 版权归属团队: <code>team.团队名.项目名.模块名</code></li><li>公司研发, 版权归属公司: <code>com.公司名.项目名.模块名</code></li></ul><h2 id="新建包"><a href="#新建包" class="headerlink" title="新建包"></a>新建包</h2><ul><li>包的本质是文件夹, <code>class</code>类是文件夹中的<code>.java</code>文件</li><li>需要在文件夹内新建包, 对应的<code>.java</code>文件头部需要注明包名<code>package 完整包名;</code></li></ul><h2 id="使用包"><a href="#使用包" class="headerlink" title="使用包"></a>使用包</h2><ul><li>关键字: <code>import</code>, 类似<code>using</code></li><li><code>import</code>的对象必须是特定的<code>.java</code>文件, 即必须引用到具体的<code>class</code>, 如果引用包中有多个<code>.java</code>文件则使用<code>包名.*</code>引入全部, 或仅引入特定几个<ul><li><code>.java</code>文件&#x2F;<code>class</code>以大写字幕开头, 文件夹&#x2F;<code>package</code>是小写字母</li></ul></li></ul><h2 id="静态导入-作为静态成员使用"><a href="#静态导入-作为静态成员使用" class="headerlink" title="静态导入: 作为静态成员使用"></a>静态导入: 作为静态成员使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不导入包</span><br>System.out.println(<span class="hljs-string">&quot;不导入包&quot;</span>);<br><br><span class="hljs-comment">//静态导入所有成员</span><br><span class="hljs-keyword">import</span> java.lang.System.*;<br>out.println(<span class="hljs-string">&quot;a&quot;</span>);<br><br><span class="hljs-comment">//静态导入特定成员</span><br><span class="hljs-keyword">import</span> java.lang.System.out;<br>println(<span class="hljs-string">&quot;a&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a><a href="#%E7%9B%AE%E5%BD%95">内部类</a></h1><h2 id="非匿名内部类"><a href="#非匿名内部类" class="headerlink" title="非匿名内部类"></a>非匿名内部类</h2><ul><li>声明与<code>C#</code>相同, 使用不同: <code>java</code>内部类在外部的实例化必须依赖外部类对象<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//C#声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span><br>&#123;<br>  <span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span><br>  &#123;&#125;<br>&#125;<br><br><span class="hljs-comment">//C#使用</span><br>Outer.Inner i = <span class="hljs-keyword">new</span> Outer.Inner();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span><br>&#123;<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span><br>  &#123;&#125;<br>&#125;<br><br><span class="hljs-comment">//java使用</span><br><span class="hljs-type">Outer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">o</span>.Inner();<br></code></pre></td></tr></table></figure></li><li>外部类的所有成员(包括<code>private</code>)都可以直接供内部类使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//同名变量层级: 就近原则</span><br><span class="hljs-keyword">import</span> java.lang.System.out;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ;<br><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span><br>  &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span><br>      &#123;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>          println(i); <span class="hljs-comment">//3</span><br>          println(<span class="hljs-built_in">this</span>.i); <span class="hljs-comment">//2</span><br>          println(Outer.<span class="hljs-built_in">this</span>.i); <span class="hljs-comment">//1</span><br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="匿名内部类-较少用"><a href="#匿名内部类-较少用" class="headerlink" title="匿名内部类(较少用)"></a>匿名内部类(较少用)</h2><ul><li>类似继承与重写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span><br>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-type">Outer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>()&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span><br>  &#123;<br>      <span class="hljs-comment">/*自己的逻辑*/</span><br>  &#125;<br>&#125;;<br>o.Test(); <span class="hljs-comment">//自己的逻辑</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a><a href="#%E7%9B%AE%E5%BD%95">字符串操作</a></h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a><code>String</code></h2><ul><li>声明时直接赋值则存储在公共内存池, 使用<code>new</code>则主动划分一块区域<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-comment">//以上两个变量指向同一个地址</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-comment">//以上两个变量指向两个区域</span><br></code></pre></td></tr></table></figure></li><li>拼接: 同<code>C#</code>, 生成新<code>String</code></li><li>常用方法<ul><li>判断相同: <code>equals</code>&#x2F;<code>equalsIgnoreCase</code><blockquote><p>❗❗❗<code>==</code>判断引用地址, 因此只能用<code>equals</code></p></blockquote></li><li>长度: <code>length()</code><blockquote><p>❗❗❗<code>java</code>中没有属性, 只有方法和变量(的<code>getter</code>和<code>setter</code>), 要获得对象的特定变量值, 要么使用对应的方法, 要么用对应的<code>getter</code></p></blockquote></li><li>正反向查找: <code>indexOf(String s)</code>&#x2F;<code>lastIndexOf(String s)</code>, 无则<code>-1</code></li><li>指定位置字符: <code>charAt(int i)</code></li><li>取中间文本: <code>substring(起始index,[结尾index(不包含)])</code></li><li>去除首尾空格: <code>trim()</code></li><li>字符替换: <code>replace(char 原, char 新)</code></li><li>判断开头和结尾: <code>startsWith(String s)</code>&#x2F;<code>endsWith(String s)</code></li><li>大小写转换: <code>toLowerCase()</code>&#x2F;<code>toUpperCase()</code></li><li>字符串分割: <code>split(String sign)</code></li><li>字符串格式化: <code>format(文本,数据...)</code><ul><li><code>%tF</code>: 年-月-日</li><li><code>%tD</code>: 月&#x2F;日&#x2F;年</li><li><code>%tr</code>: 时:分:秒 12h</li><li><code>%tT</code>: 时:分:秒 24h</li><li><code>%tR</code>: 时:分 24h</li></ul></li></ul></li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><code>StringBuilder</code></h2><ul><li>拼接: <code>append(内容)</code></li><li>插入: <code>insert(位置,内容)</code></li><li>删除: <code>delete(起始位置, 结尾位置(不包含))</code></li><li>转<code>String</code>: <code>toString()</code></li></ul><h1 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a><a href="#%E7%9B%AE%E5%BD%95">集合类</a></h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型类的声明同`C#`一样, 调用时需要使用包装类而不是变量类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&lt;T&gt;&#123;&#125;<br>Test&lt;Integer&gt; t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>&lt;&gt;();<br>  <span class="hljs-comment">//约束在&lt;&gt;中extends, 类或接口都是</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Test</span>&gt;&#123;&#125;<br>  <span class="hljs-comment">//泛型通配符?表示暂时不确定什么类型, 实例化时才确定, 可以extends</span><br>  Test&lt;?&gt; t = <span class="hljs-literal">null</span>;<br>  t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><br><span class="hljs-comment">//泛型函数的声明需要写在访问修饰符后, 调用时直接调用</span><br><span class="hljs-keyword">public</span>&lt;K&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(K k)</span>&#123;&#125;<br>Fun(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><h2 id="ArrayList和LinkedList-类似C-的List和LinkedList"><a href="#ArrayList和LinkedList-类似C-的List和LinkedList" class="headerlink" title="ArrayList和LinkedList(类似C#的List和LinkedList)"></a><code>ArrayList</code>和<code>LinkedList</code>(类似<code>C#</code>的<code>List</code>和<code>LinkedList</code>)</h2><ul><li><code>ArrayList</code>和<code>LinkedList</code>都实现了<code>List</code>接口, <code>List</code>接口实现了<code>Collection</code>接口</li><li><code>ArrayList</code>和<code>LinkedList</code>具有相同的调用方法, 使用完全一致, 区别在于前者的本质是顺序存储的数组, 后者的本质是链式存储的链表</li><li><code>Collection</code>接口方法<ul><li><code>add()</code></li><li><code>remove()</code></li><li><code>clear()</code></li><li><code>isEmpty()</code></li><li><code>iterator()</code>: 获取迭代器, 用于遍历</li><li><code>size()</code></li><li><code>contains()</code></li><li><code>toArray()</code>将容器中的元素转为数组</li></ul></li><li><code>List</code>接口方法<ul><li><code>get(int index)</code></li><li><code>set(int index, object obj)</code></li></ul></li><li><code>ArrayList</code>和<code>LinkedList</code>使用<ul><li>声明: <code>ArrayList&lt;T&gt; list = new ArrayList&lt;&gt;();</code></li><li>增: <code>list.add(T t);</code></li><li>删: <code>list.remove(int index);</code>&#x2F;<code>list.remove(T t)</code>&#x2F;<code>list.clear();</code><ul><li>可以传入<code>int索引</code>或<code>元素</code>, 如果元素是<code>int</code>则只能传索引</li><li>删除后后面的元素往前移动占位</li></ul></li><li>查: <code>list.get(int index)</code>&#x2F;<code>list.contains(T t)</code></li><li>改: <code>list.set(int index, T t)</code></li><li>遍历: <code>for</code>&#x2F;<code>for:</code>&#x2F;<code>Iterator</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;T t&gt; it = list.iterator(); <span class="hljs-comment">//Iterator泛型必须与list相同</span><br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    println(it.next());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="HashSet和TreeSet"><a href="#HashSet和TreeSet" class="headerlink" title="HashSet和TreeSet"></a><code>HashSet</code>和<code>TreeSet</code></h2><pre><code class=" mermaid">classDiagramdirection LRclass Collection&#123; &lt;&lt;interface&gt;&gt;&#125;class Set&#123; &lt;&lt;interface&gt;&gt;&#125;class HashSetclass SortedSetclass TreeSetCollection &lt;|.. Set:实现Set &lt;|.. HashSet:实现Set &lt;|.. SortedSet:实现SortedSet &lt;|-- TreeSet:继承</code></pre><ul><li>相同点<ul><li>不允许重复元素, <code>ArrayList</code>和<code>LinkedList</code>允许重复</li><li>不能索引查改</li></ul></li><li>不同<table><thead><tr><th></th><th><code>HashSet</code></th><th><code>TreeSet</code></th></tr></thead><tbody><tr><td>底层数据结构</td><td>哈希表</td><td>树</td></tr><tr><td>排列顺序</td><td>不一定有序</td><td>自动排序</td></tr></tbody></table><blockquote><p><code>TreeSet</code>的自动排序: 元素是数字时按大小排序, <code>String</code>按字符编码升序, 自定义类时需要实现<code>Comparable</code>接口重载排序方法</p></blockquote></li><li><code>HashSet</code>和<code>TreeSet</code>使用<ul><li>声明: <code>HashSet&lt;T t&gt; h = new HashSet&lt;&gt;()</code></li><li>增: <code>h.add(T t)</code></li><li>删: <code>h.remove(T t)</code> 无法使用索引</li><li>查: <code>h.contains(T t)</code></li><li>没有改</li><li>遍历: <code>for:</code>&#x2F;<code>Iterator</code></li></ul></li><li><code>TreeSet</code>独有方法<ul><li>返回<u>第一个&#x2F;最后一个</u>元素: <code>first()</code>&#x2F;<code>last()</code></li><li>取出<u>第一个&#x2F;最后一个</u>元素: <code>pollFirst()</code>&#x2F;<code>pollLast()</code></li><li>取中间元素的集合: <code>subSet(T tStart, T sEnd)</code>(含左不含右)</li><li>取<u>头部&#x2F;尾部</u>元素的集合: <code>headSet(T t)</code>&#x2F;<code>tailSet(T t)</code></li></ul></li></ul><h2 id="HashMap和TreeMap"><a href="#HashMap和TreeMap" class="headerlink" title="HashMap和TreeMap"></a><code>HashMap</code>和<code>TreeMap</code></h2><pre><code class=" mermaid">classDiagramdirection LRclass Map&#123; &lt;&lt;interface&gt;&gt;&#125;class HashMapclass TreeMapMap &lt;|.. HashMap:实现Map &lt;|.. TreeMap:实现</code></pre><ul><li><code>Map</code>方法<ul><li>添加: <code>put(K key,V value)</code></li><li>是否存在: <code>containsKey(Object key)</code>&#x2F;<code>containsValue(Object value)</code></li><li>获取<code>key</code>的值: <code>get(Object key)</code> 没有<code>key</code>返回<code>null</code></li><li>所有<code>key</code>形成的<code>Set</code>: <code>keySet()</code></li><li>所有<code>value</code>形成的<code>Collection</code>: <code>values()</code></li><li>键值对对数: <code>size()</code></li><li>是否为空: <code>isEmpty()</code></li><li>移除by <code>key</code>: <code>remove(Object key)</code></li><li>清空: <code>clear()</code></li></ul></li><li><code>HashMap</code>和<code>TreeMap</code>相同点: 使用键值对存储数据, 方法基本相同</li><li><code>HashMap</code>和<code>TreeMap</code>不同<table><thead><tr><th></th><th><code>HashMap</code></th><th><code>TreeMap</code></th></tr></thead><tbody><tr><td>关于<code>null</code></td><td>允许<code>null</code>键和<code>null</code>值<br>(但必须保证键的唯一性)</td><td>不允许<code>null</code>键</td></tr><tr><td>数据存储顺序</td><td></td><td>内部会排序, 添加&#x2F;删除&#x2F;定位时效率较差</td></tr><tr><td>数据结构</td><td>基于哈希表</td><td>基于树</td></tr></tbody></table><blockquote><p>一般都使用<code>HashMap</code>, 除非需要排序时才使用<code>TreeMap</code></p></blockquote></li><li><code>HashMap</code>和<code>TreeMap</code>使用<ul><li>声明: <code>HashMap&lt;K k, V v&gt; m = new HashMap&lt;&gt;()</code></li><li>增&#x2F;改: <code>m.put(K k, V v)</code></li><li>删: <code>m.remove(K k)</code></li><li>查: <code>m.get(K k)</code>&#x2F;<code>m.containsKey(K k)</code>&#x2F;<code>m.containsValue(V v)</code></li></ul></li></ul><h1 id="其他不常用内容做了解"><a href="#其他不常用内容做了解" class="headerlink" title="其他不常用内容做了解"></a><a href="#%E7%9B%AE%E5%BD%95">其他不常用内容做了解</a></h1><h2 id="异常处理-基本同C"><a href="#异常处理-基本同C" class="headerlink" title="异常处理: 基本同C#"></a>异常处理: 基本同<code>C#</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;&#125;<br><span class="hljs-keyword">finally</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a><code>lambda</code></h2><ul><li>基本结构: <code>(参数)-&gt;&#123;代码&#125;</code> 只有一行代码时省略<code>&#123;&#125;</code></li><li>函数式接口声明<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITest</span>&#123; <span class="hljs-comment">//一个空接口</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>; <span class="hljs-comment">//一个空函数</span><br>&#125;<br><br><span class="hljs-type">ITest</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> ()-&gt;&#123; <span class="hljs-comment">//对函数式接口中函数的lambda实现</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>&#125;<br><br>t.Test(); <span class="hljs-comment">//调用</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="方法的引用和Function-用函数装载函数式接口-类似C-委托"><a href="#方法的引用和Function-用函数装载函数式接口-类似C-委托" class="headerlink" title="方法的引用和Function: 用函数装载函数式接口, 类似C#委托"></a>方法的引用和<code>Function</code>: 用函数装载函数式接口, 类似<code>C#</code>委托</h2><ul><li>原理<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITest</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITest2</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Test <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITest3</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Test <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ITest4</span>&lt;T&gt;<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Test <span class="hljs-title function_">fun</span><span class="hljs-params">(T t)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span>&lt;T&gt; <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">FX</span><span class="hljs-params">(T t)</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">//1.静态方法</span><br><span class="hljs-type">ITest</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> Test::Add;<br>t1.Test(); <span class="hljs-comment">//等于Test.Add();</span><br><br><span class="hljs-comment">//2.成员方法</span><br><span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-type">ITest</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> t::Add();<br>t2.Test(); <span class="hljs-comment">//等于t.Add();</span><br><br><span class="hljs-comment">//3.构造</span><br><span class="hljs-type">ITest2</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> Test::<span class="hljs-keyword">new</span>;<br><span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> t3.fun(); <span class="hljs-comment">//无参构造Test, 等于new Test()</span><br><br><span class="hljs-type">ITest3</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> Test::<span class="hljs-keyword">new</span>;<br><span class="hljs-type">Test</span> <span class="hljs-variable">tt</span> <span class="hljs-operator">=</span> t4.fun(<span class="hljs-number">5</span>); <span class="hljs-comment">//有参构造Test, 等于new Test(5)</span><br><br><span class="hljs-comment">//4.泛型</span><br>ITest4&lt;Integer&gt; t5 = Test::FX;<br>t5.fun(<span class="hljs-number">55</span>); <span class="hljs-comment">//等于Test.FX(55);</span><br></code></pre></td></tr></table></figure></li><li>封装: <code>Function&lt;T,R&gt;</code>接口, <code>T</code>是参数,<code>R</code>是返回值, 调用方法<code>apply</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;Integer,String&gt; f = (i)-&gt;&#123; <span class="hljs-keyword">return</span> (i+<span class="hljs-number">1</span>).toString();&#125;;<br>f.apply(<span class="hljs-number">5</span>); <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h2><ul><li>基本变量类型包装类: <code>Integer</code>,<code>Boolean</code>,<code>Double</code>,<code>Character</code>,<code>Number</code>等</li><li>较大数据<code>BigInteger</code>,<code>BigDecimal</code></li><li>数学计算类<code>Math</code></li><li>随机数类<code>Random</code></li></ul><h3 id="Number-所有数的父类"><a href="#Number-所有数的父类" class="headerlink" title="Number: 所有数的父类"></a><code>Number</code>: 所有数的父类</h3><ul><li><code>byteValue()</code>以<code>byte</code>形式返回数值</li><li><code>intValue</code>&#x2F;<code>floatValue</code>等等</li></ul><h3 id="BigInteger-存储任意大小的整数"><a href="#BigInteger-存储任意大小的整数" class="headerlink" title="BigInteger: 存储任意大小的整数"></a><code>BigInteger</code>: 存储任意大小的整数</h3><ul><li>使用<code>add</code>,<code>subtract</code>等方法运算, 不能用运算符运算</li></ul><h3 id="BigDecimal-存储大浮点数"><a href="#BigDecimal-存储大浮点数" class="headerlink" title="BigDecimal: 存储大浮点数"></a><code>BigDecimal</code>: 存储大浮点数</h3><h3 id="Math-静态类"><a href="#Math-静态类" class="headerlink" title="Math: 静态类"></a><code>Math</code>: 静态类</h3><h3 id="Date日期类-System系统类"><a href="#Date日期类-System系统类" class="headerlink" title="Date日期类, System系统类"></a><code>Date</code>日期类, <code>System</code>系统类</h3>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我家里新开了个饭店，很多客人结账时要求抹零，该怎么解决这种问题？</title>
    <link href="/2024/02/14/%E6%88%91%E5%AE%B6%E9%87%8C%E6%96%B0%E5%BC%80%E4%BA%86%E4%B8%AA%E9%A5%AD%E5%BA%97%EF%BC%8C%E5%BE%88%E5%A4%9A%E5%AE%A2%E4%BA%BA%E7%BB%93%E8%B4%A6%E6%97%B6%E8%A6%81%E6%B1%82%E6%8A%B9%E9%9B%B6%EF%BC%8C%E8%AF%A5%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E8%BF%99%E7%A7%8D%E9%97%AE%E9%A2%98%EF%BC%9F/"/>
    <url>/2024/02/14/%E6%88%91%E5%AE%B6%E9%87%8C%E6%96%B0%E5%BC%80%E4%BA%86%E4%B8%AA%E9%A5%AD%E5%BA%97%EF%BC%8C%E5%BE%88%E5%A4%9A%E5%AE%A2%E4%BA%BA%E7%BB%93%E8%B4%A6%E6%97%B6%E8%A6%81%E6%B1%82%E6%8A%B9%E9%9B%B6%EF%BC%8C%E8%AF%A5%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E8%BF%99%E7%A7%8D%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>抹零与定价：<br>抹零以提高回头率；定价以8、9结尾便于实现抹零；以小于4定价的商品为可以白送的添头。<br></p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>这个问题其实非常有意思，答案是 <strong>尽量把菜单里常点菜的单价尾数设成8或者9</strong><br><br>也就是说一盘菜38、48、58或者39、49、59……<br><br>这还得从十多年前暑假我在姑姑家饭店打零工说起<br><br>当时饭店小本经营，饭店里10个四人小桌，两个小包间，<br><br>一桌饭四个人100块钱左右，<br><br>当时我姑父特别喜欢<strong>抹零头，一般100以下就是抹5块（四舍五不入），100以上的抹10块（个位抹掉），</strong>而且是主动抹零头，以招揽顾客。如此经营，饭店的口碑还真是便宜实惠，且生意兴隆。<br><br>年轻的我就问：“这么抹零头不亏么？”<br><br>姑父：“都包在里面了，能吃亏么？”<br><br>我说：“那不也少赚了么？”<br><br>姑父：“少赚不了多少，还能多招回头客。”<br><br>我表示不懂。<br><br>姑父：“看看菜单，是不是都是28、38的？”<br><br>我依然表示不明白。<br><br>姑父：“这样<strong>他点一个菜或者两个菜，没法抹零，如果点三、四个菜，我最多就抹5块钱</strong>，也不亏，还能落个好。”<br><br>我表示依然不懂。<br><br>姑父：“你要把单价都设成22或者32的，你点俩菜，是不是我就得给你抹了？”<br><br>我好像懂点了，姑父说：“8或者9都行……”<br><br>我说：“那100块以上的抹十块不亏了么？”<br><br>姑父：“100块以上得点5个菜以上，最多抹10块，还是赚”<br><br>但是我看到菜单里还有个菜：“这个大拌菜要12 啊，米饭2块啊，这怎么说？”<br><br>姑父：“像凉拌菜、米饭、饮料这种，只要点到，我就赚到，我白给他都行，明白吗？”<br><br>题主，你明白了么？<br><br></p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p>&gt;&gt; 转自：<a href="https://www.zhihu.com/question/422108658/answer/2366234987">我家里新开了个饭店，很多客人结账时要求抹零，该怎么解决这种问题？</a> - <a href="https://www.zhihu.com/people/xin-yi-82-25">心一</a>的回答 - 知乎</p>]]></content>
    
    
    <categories>
      
      <category>Career</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知乎</tag>
      
      <tag>定价</tag>
      
      <tag>抹零</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么有的药需要饭前吃，有的药需要饭后吃？依据是什么？反过来有什么危害吗？</title>
    <link href="/2024/02/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E7%9A%84%E8%8D%AF%E9%9C%80%E8%A6%81%E9%A5%AD%E5%89%8D%E5%90%83%EF%BC%8C%E6%9C%89%E7%9A%84%E8%8D%AF%E9%9C%80%E8%A6%81%E9%A5%AD%E5%90%8E%E5%90%83%EF%BC%9F%E4%BE%9D%E6%8D%AE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%8F%8D%E8%BF%87%E6%9D%A5%E6%9C%89%E4%BB%80%E4%B9%88%E5%8D%B1%E5%AE%B3%E5%90%97%EF%BC%9F/"/>
    <url>/2024/02/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E7%9A%84%E8%8D%AF%E9%9C%80%E8%A6%81%E9%A5%AD%E5%89%8D%E5%90%83%EF%BC%8C%E6%9C%89%E7%9A%84%E8%8D%AF%E9%9C%80%E8%A6%81%E9%A5%AD%E5%90%8E%E5%90%83%EF%BC%9F%E4%BE%9D%E6%8D%AE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%8F%8D%E8%BF%87%E6%9D%A5%E6%9C%89%E4%BB%80%E4%B9%88%E5%8D%B1%E5%AE%B3%E5%90%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>饭前服还是饭后服，一字之差的区别在哪里？一句话可以概括——</p><p>饭前服，胃肠道里面没有食物；饭后服，胃肠道里面有食物。</p><p>虽然只有一字之差，但这两种不同的服用方式，会使得药物在人体内的吸收过程有不同之处。</p><p>药物在人体内的吸收过程，从药物代谢动力学上说是一个比较复杂的过程。但如果只是涉及到饭前服还是饭后服，我们并不需要了解那么多的参数，大致上可以将其理解为车辆在公路上的行驶过程。药物，就是那些车；人体，就是错综复杂的公路网络。</p><p>口服药物要进入这个公路网络，只有一个入口，那就是口腔。进入口腔后，会经过一条主干道，那就是胃肠道。这条主干道连接口腔、食道、胃、小肠、大肠。大多数药物“行驶”到小肠，就会从这里找到出口，离开主干道。这是因为小肠内pH值接近中性，粘膜吸收面广，是主要的吸收部位。</p><p>在此基础上，我们来回答以下几个问题——</p><p><strong>问题一：主干道上有红灯怎么办？</strong></p><p>什么是主干道上的红灯呢？那就是食物。</p><p>如果在饭前服药，那么药物在经过胃肠道这条主干道时，将会畅通无阻，一路直达小肠，在这里被吸收，进而进入全身的体循环；而如果是在饭后服药，那么药物在进入胃的时候，就会遭遇“红灯”——食物的堵塞。从而和食物混杂在一起，慢慢地进入小肠被吸收。</p><p>因此，<strong>如果想要药物快速地发挥作用，可以考虑饭前服用。</strong></p><p><strong>问题二：主干道被损毁怎么办？</strong></p><p>有些车辆不遵守交通规则，单独通过主干道的时候，会对主干道造成损毁。</p><p>这是指那些对胃有刺激性的药物，比如阿司匹林、扑热息痛、布洛芬、抗生素等药物，由于本身具有酸性，会直接或间接地损伤胃粘膜，引起上腹不适、恶心呕吐，甚至引起炎症和溃疡。</p><p>我们不放心这些药物直接接触胃壁，最好的方法就是让它们在食物包裹中，乖乖地通过胃。</p><p>因此，<strong>对胃刺激性较大的药物，应在饭后服用。</strong></p><p><strong>问题三：主干道需要维修怎么办？</strong></p><p>当主干道出问题的时候，我们也会派车辆进行维修。</p><p>这包括胃药、止泻药、驱虫药等。由于他们需要在胃肠道发挥作用，我们会更希望药物能直接接触患处，不要被埋没在食物中。值得注意的是，利胆药也在其列，因为胆汁的分泌与食物消化也有很大的关系。</p><p>这些<strong>作用于胃肠道的药物，最好饭前服用。</strong></p><p>——————————————————</p><p>有人可能会说，当以上三点冲突的时候，应该怎么服？那就需要<strong>根据个人的体质来取舍</strong>了。</p><p>如果长期都有胃病，那就多照顾照顾胃，饭后服用为宜；</p><p>如果肠道吸收功能比较差，那就多照顾照顾药物，饭前服用为宜。</p><p>最后，除了饭前服饭后服的讲究以外，有些药还要求睡前服，或者早晨服。这主要涉及人体在每天不同时刻的一些身体指征，比如血压、激素水平等。这需要具体到药，再细谈。</p><p>转自<a href="https://www.zhihu.com/question/23641358/answer/29055978">为什么有的药需要饭前吃，有的药需要饭后吃？依据是什么？反过来有什么危害吗？</a> - <a href="https://www.zhihu.com/people/podotoxin">王藐</a>的回答</p>]]></content>
    
    
    <categories>
      
      <category>Health</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知乎</tag>
      
      <tag>吃药</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>民可使由之，不可使知之</title>
    <link href="/2024/02/12/%E6%B0%91%E5%8F%AF%E4%BD%BF%E7%94%B1%E4%B9%8B%EF%BC%8C%E4%B8%8D%E5%8F%AF%E4%BD%BF%E7%9F%A5%E4%B9%8B/"/>
    <url>/2024/02/12/%E6%B0%91%E5%8F%AF%E4%BD%BF%E7%94%B1%E4%B9%8B%EF%BC%8C%E4%B8%8D%E5%8F%AF%E4%BD%BF%E7%9F%A5%E4%B9%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>子曰：“兴于诗，立于礼，成于乐。”</p></blockquote><p>兴，兴起，起始。立，自立，立足于社会。成，完成。</p><p>诗，诗经，也可理解为基本的文学素养，包含识字、历史、音律、民俗等包罗万象的内容。礼，周礼，礼节，社会互动之基本规则。乐，音乐。</p><p>一个人，以学习文字的听说读写为起点；在成长过程中学习社会的经济制度、社会制度、文化制度，认识社会的运行、社交的礼仪，由此得以立足于社会；在此基础之上，遵循自身的兴趣和社会主流文化，选择并坚持自己的志趣，从而完成自我实现。<br><br></p><blockquote><p>子曰：“民可使由之，不可使知之。”</p></blockquote><p>这句话解读版本较多。</p><ul><li><p>愚民说（对君）：可以指导人（效法）做什么，但不可以让他知道为什么这么做。</p></li><li><p>君君说（对君）：对于民，让他效法君（的崇德做法）是可实现的（able），让他完全理解这些（但缺少君的以身作则）是困难的（unable）。（因此君应当以身作则。）</p></li></ul><p>还有联系上文一起理解：</p><ul><li>对于“兴于诗，立于礼，成于乐”这件事，如果民可以达到（accessible）就让（encourage to follow）他这么做（this way），如果不能达到就让他知道（子孙／其他人）应该这么做。这一说法的立足之处在于其符合克己复礼的主张。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过量补充维生素B的副作用</title>
    <link href="/2024/02/10/%E8%BF%87%E9%87%8F%E8%A1%A5%E5%85%85%E7%BB%B4%E7%94%9F%E7%B4%A0B%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8/"/>
    <url>/2024/02/10/%E8%BF%87%E9%87%8F%E8%A1%A5%E5%85%85%E7%BB%B4%E7%94%9F%E7%B4%A0B%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="过量补充维生素B的副作用"><a href="#过量补充维生素B的副作用" class="headerlink" title="过量补充维生素B的副作用"></a>过量补充维生素B的副作用</h2><ul><li>过量补充维生素B1（每天服用剂量超过5g），可能会引起心跳加快，发抖，疱疹，浮肿，过敏等副作用。</li><li>过量补充维生素B2，可能会引起感觉异常，比如瘙痒，刺痛等症状。服用维生素B2后，可能会出现尿液呈亮黄色的现象，这种情况不必担心，是药物排泄的正常颜色，停药后即可恢复。</li><li>过量服用维生素B3（烟酸），会出现皮肤潮红、瘙痒，胃痛恶心等消化道症状，肝功能异常以及视物模糊等症状。另外，维生素B3还会影响尿酸的排泄，高尿酸患者应该慎用补充剂。</li><li>补充维生素B6（吡哆醇）过量，可以导致神经系统出现问题，甚至可能导致皮肤感觉丧失。</li><li>过量补充维生素B9（叶酸），会掩盖维生素B12缺乏的问题，导致神经或血液系统出现问题，同时过量补充叶酸，还有可能影响锌的吸收。</li><li>过量补充维生素B12，会导致心悸、心前区疼痛等心血管症状，同时还有可能出现皮疹、哮喘、寒颤等过敏症状，还可能导致叶酸的缺乏。</li></ul><h2 id="【补充知识】"><a href="#【补充知识】" class="headerlink" title="【补充知识】"></a>【补充知识】</h2><h3 id="一、维生素B介绍"><a href="#一、维生素B介绍" class="headerlink" title="一、维生素B介绍"></a>一、维生素B介绍</h3><p>维生素是人体所需的一大类营养素，而B族维生素就是其中的重要一类。之所以称之为“族”，是因为不同于维生素A、维生素C等具有固定结构的维生素，这类维生素是一大类水溶性维生素的总称。</p><p>在B族维生素中，我们常见的有维生素B1，维生素B2，维生素B3（烟酸），维生素B5（泛酸），维生素B6（吡哆醇），维生素B9（叶酸），维生素B12（钴胺素）等多种。</p><h3 id="二、B族维生素共同点"><a href="#二、B族维生素共同点" class="headerlink" title="二、B族维生素共同点"></a>二、B族维生素共同点</h3><ol><li>其理化特性上有一定的相似性。所有的B族维生素都是水溶性的维生素，因此难以在人体内大量贮存，通常可通过汗液、尿液等体液排出。</li><li>其生理功能有相互交叉。在营养身体的神经系统、维持造血功能，改善身体代谢能力，维护皮肤黏膜健康等方面，B族维生素都发挥着重要的作用。</li><li>相互之间有一定的协同作用。只有全面的保持各种营养的均衡充足，才能够更好的发挥其生理功能。比如维生素B2的缺乏，会影响维生素B6的吸收和利用。</li></ol><h3 id="三、补充维生素B的建议"><a href="#三、补充维生素B的建议" class="headerlink" title="三、补充维生素B的建议"></a>三、补充维生素B的建议</h3><ol><li>通常情况下，每日从饮食中摄入的B族维生素能够满足人体所需，没有必要服用额外的补充剂。在我们的日常膳食中，B族维生素可以说来源还是非常多的，不管是谷物、豆类，还是动物内脏，不管是蔬菜，还是各种水果，不管是蛋黄还是肉类，其中都含有各种各样的B族维生素，如果能够在日常生活中能够保持均衡营养的合理膳食，是不会缺乏维生素B的。</li><li>如果身体确实存在缺乏B族维生素的情况，也可以在日常膳食以外，通过服用补充剂来补充B族维生素。比如缺乏维生素B1导致的脚气病，缺乏维生素B2导致的口唇炎、阴部瘙痒等问题，叶酸摄入不足导致的血同型半胱氨酸偏高等问题，前提是要确定确实缺乏，必要时可咨询医生、采取血液检查。</li><li>建议选择价格便宜量又足的“药字号”产品。比如最常见的复合维生素B片，里面含有维生素B1，B2，B3，B5，B6，一瓶100片只要几元钱，是补充B族维生素的好选择。不建议选择价格高昂，质量还不一定有保证的保健品。包装上印着“国药准字H****”的，就是药字号产品。</li><li>对于B族维生素的补充，一是要强调针对性：缺什么？缺多少？缺哪种，就可以服用补充剂适量补充。虽然B族维生素长期服用通常安全性也较高，其水溶性的特性也会使过量补充的B族维生素通过尿液排出体外，但过量补充B族维生素同样可能产生不良反应风险。</li></ol><details><summary>文章来源</summary><li>原网页</li><a href="https://www.cn-healthcare.com/articlewm/20200427/content-1108223.html">维生素B适量补充很重要，医生提醒：过量补充，6种不良反应要注|导致|维生素|-健康界</a><li>网页快照（2023.03.09）</li><img src="https://pic2.zhimg.com/v2-44b385a444e188664414c42167a802f1_r.jpg" alt="网页快照"></details><p>本文转自 <a href="https://zhuanlan.zhihu.com/p/612640750">https://zhuanlan.zhihu.com/p/612640750</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <categories>
      
      <category>Health</category>
      
    </categories>
    
    
    <tags>
      
      <tag>维生素B</tag>
      
      <tag>维生素</tag>
      
      <tag>过量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity1 - Gamer羽飞</title>
    <link href="/2024/02/08/unity1/"/>
    <url>/2024/02/08/unity1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li>一定要多练习</li><li>扩展发散</li><li>学完后尝试建立自己的游戏框架</li></ol><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="场景区"><a href="#场景区" class="headerlink" title="场景区"></a>场景区</h3><ul><li>中键: 同Q</li><li>右键+wasd: 作为player移动</li><li>Alt+左键: 转动视角</li><li>E: 旋转Rotate</li><li>R: 缩放Scale</li><li>T: 矩形缩放Rect，只管一个平面矩形的缩放，一般用于2D平面，如UI</li><li>Y: 全都有</li></ul><h2 id="Game-Object"><a href="#Game-Object" class="headerlink" title="Game Object"></a>Game Object</h2><ul><li>Sphere平面和Quad矩形的区别<ul><li>Sphere三角面更多, 可以支撑更精确复杂的计算; Quad三角面只有两个</li><li>Sphere一般没有y, Quad一般没有z</li></ul></li><li>不同GO的本质区别在于不同GO的Mesh Filter组件中Mesh属性的取值不同</li></ul><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><ul><li>在C#中通过Transform实例化的对象来访问对象本身的Position，Rotation变量是世界坐标系下的值。<br><code>transform.position; transform.rotation;</code></li><li>若想获取与组件上的本地坐标则应访问<code>transform.localPosition</code>和<code>transform.localRotation</code></li><li>从世界坐标转成相对父对象的局部坐标: <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#">transform.TransformPoint(transform.localPosition);<br><span class="hljs-comment">//局部坐标转世界坐标</span><br>transform.parent.InverseTransformPoint(transform.position);<br><span class="hljs-comment">//世界坐标转局部坐标</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="游戏资源管理"><a href="#游戏资源管理" class="headerlink" title="游戏资源管理"></a>游戏资源管理</h2><ul><li>导入导出包UnityPackageFile: unity自身的一个压缩包</li><li>fbx: 3D模型文件</li><li>默认Material材质不可更改, 更改需要新建一个Material并应用到对应的GO上. 通过GO的MeshRenderer组件中Material组件可以添加各自的Material, 不同的Material通过选定的Shader着色器(默认Standard)渲染到GO上. </li><li>Window-&gt;Package Manager管理在Assets Store下载的资源包</li></ul><h2 id="Terrain地形"><a href="#Terrain地形" class="headerlink" title="Terrain地形"></a>Terrain地形</h2><ol><li>添加相邻地形</li></ol><ul><li>FillHeightmapUsing: 连接地形的方法<ul><li>clamp: 相邻瓦片交叉混合</li><li>mirror: 镜像</li></ul></li></ul><ol start="2"><li>绘制地形<blockquote><p>Opacity: 不透明度</p></blockquote></li></ol><ul><li>Paint Holes: 镂空画洞</li><li>Set Height: 设置高度<ul><li>Flatten Tile: 展平当前terrain</li><li>Flatten All: 展平所有terrain</li></ul></li><li>Smooth Height: 平滑高度<ul><li>Blur Direction: 仅向下舍去-1,双向0,仅向上进入1</li></ul></li><li>Stamp Terrain: 只能点一下, 不能滑动绘制</li><li>Paint Texture: 绘制纹理<ul><li>在Terrain Layer中选择Texture资源<blockquote><p>Tips: 一般不用绘制, 只需要了解</p></blockquote></li></ul></li></ul><ol start="3"><li>画树</li></ol><ul><li>Mass Place Tree: 大量放置树</li></ul><ol start="4"><li>绘制细节</li></ol><ul><li>Add Grass Texture: 给地面添加草<ul><li>最终强度: 草的密集程度</li></ul></li></ul><ol start="5"><li>地形设置</li></ol><h2 id="脚本的生命周期"><a href="#脚本的生命周期" class="headerlink" title="脚本的生命周期"></a>脚本的生命周期</h2><p>![Unity官方图解](D:\Program Files\Typora\assets\unity1\f366aa7d27e1514bb579b495f09942bf.png)</p><ol><li><p>Awake：初始化时调用，通常使用为需要提前初始化的逻辑。比如单例赋值<code>private void Awake()&#123;Instance = this;&#125;</code></p></li><li><p>OnEnable：在对象启用时调用，处理每次显示时都需要进行初始化的逻辑，通常和OnDisable配合使用。<br>比如: 游戏逻辑使用并修改了变量<code>Number</code>，而下次显示时使用是又需要<code>Number = 1</code>，此时就可以写<code>private void Awake()&#123;Number = 1;&#125;</code></p></li><li><p>Start：仅当启用脚本实例时，才会在第一帧调用。通常使用为一些变量初始化逻辑。比如：获取指定物体：<code>private void Start()&#123;child1 = transform.GetChild(0);&#125;</code></p></li><li><p>Fixed Update：固定时间调用，所有物理计算和更新都在Fixed Update中处理，不受帧率影响。比如：一些物理属性的更新操作Force，Collider，Rigidbody等。</p></li><li><p>Update：每帧调用一次，根据帧率的快慢影响执行速度。通常的游戏逻辑都写在这里，比如：和玩家交换，当用户按下空格时进行执行什么操作。</p></li><li><p>LateUpdate：在Update完成后，每帧调用一次。常见用处是相机跟随主角，比如：主角在Update中移动，则可以在LateUpdate执行相机的移动，这将可以保证摄像机跟着的时候之前的逻辑一起完全执行完成。</p></li><li><p>OnMouseXXX: 通过鼠标的射线检测来判断鼠标当前位置是否碰到了挂载脚本游戏对象的碰撞体。</p><ul><li><p>前提：</p><ul><li>只能检测当前脚本挂载的游戏对象。</li><li>当前游戏对象需要有碰撞体。</li><li>不能有其他物体(UI)遮挡到此游戏对象。</li></ul></li><li><p>函数：</p><ul><li>OnMouseEnter: 鼠标进入时调用一次</li><li>OnMouseOver: 鼠标停留(经过)时一直调用</li><li>OnMouseExit: 鼠标退出时调用一次</li><li>OnMouseDown: 鼠标按下时调用一次</li><li>OnMouseDrag: 鼠标拖拽(按住)时一直调用</li><li>OnMouseUp: 鼠标抬起时调用一次</li></ul></li><li><p>应用（一般成对使用）：</p><ul><li>OnMouseEnter，OnMouseOver，OnMouseExit 一组。比如模拟选中状态：鼠标进入时物体变色，鼠标退出时再变回来。</li><li>OnMouseDown，OnMouseDrag，OnMouseUp 一组。比如射击游戏：鼠标按下拖拽时调整方向，抬起时发射子弹。</li><li>当鼠标按下并停留在当前游戏对象上时，OnMouseOver，OnMouseDrag会同时触发。</li></ul></li></ul></li><li><p>OnTriggerXX:</p><ul><li><p>函数</p><ul><li>OnCollisionEnter: 进入碰撞时触发一次。</li><li>OnCollisionStay: 在碰撞体中停留时每帧触发一次。</li><li>OnCollisionExit: 离开碰撞体时触发一次。</li><li>OnTriggerEnter: 进入碰撞体时触发一次。</li><li>OnTriggerStay: 在碰撞体中停留时每帧触发一次。</li><li>OnTriggerExit: 离开碰撞体是触发一次。</li></ul><blockquote><p>还有对应2D碰撞体的六个方法（如：<code>OnCollisionEnter2D</code>） 函数后面添加2D接口，触发条件和使用方式和3D一致。 使用时注意碰撞体和检测函数同步接口，即用2D碰撞体必须用2D函数。</p></blockquote></li><li><p>前提同上</p></li></ul></li><li><p>OnApplicationXX:</p><ul><li>函数:<ul><li>OnApplicationPause: 检测到暂停的帧结束 –&gt; 切换到后台和回来时调用。游戏停止保存数据&#x2F;游戏继续数据初始化。</li><li>OnApplicationFocus: 当屏幕 获得&#x2F;失去 焦点时调用。失去焦点关闭背景音乐&#x2F;获得焦点继续播放音乐。</li><li>OnApplicationQuit: 当程序退出时调用。在移动端大退时也会对调用，但不会触发上面两个方法。</li></ul></li></ul></li><li><p>禁用与销毁</p><ul><li><code>OnDisable</code>: 当对象被禁用时调用此函数（其父物体被禁用也会触发）。通常和OnEnable配合使用。比如：在OnEnable添加监听，在OnDisable移除监听</li><li><code>OnDestroy</code>: 在对象存在的最后一帧的所有帧更新之后调用此函数。当物体销毁或者场景关闭时触发。比如：子弹打到墙壁时，需要销毁子弹并触发一个打击音效。</li></ul></li></ol><h2 id="脚本执行顺序"><a href="#脚本执行顺序" class="headerlink" title="脚本执行顺序"></a>脚本执行顺序</h2><ul><li><p>先执行所有的<code>Awake()</code>, 再执行所有的<code>Start()</code></p></li><li><p>Execution Order中设置cs脚本执行顺序, 数值越小越先执行</p></li></ul><h2 id="标签和图层"><a href="#标签和图层" class="headerlink" title="标签和图层"></a>标签和图层</h2><ul><li>给GO分组的工具</li><li>图层可以在Camera组件Culling Mask属性中选择遮罩图层, 实现显隐不同图层的功能</li></ul><h2 id="Prefab预制体与变体"><a href="#Prefab预制体与变体" class="headerlink" title="Prefab预制体与变体"></a>Prefab预制体与变体</h2><ul><li><p>以.prefab文件存储的GO, 可以通过GO快速创建别人打包好的GO</p></li><li><p>在Scene中的GO组件发生改变, 可以通过右键组件应用到Prefab文件的修改</p></li><li><p>通过预制体创建的GO发生大改变, 将GO独立为新的prefab时, 选择<code>原始预制体</code>将保留对原始预制体的引用, 选择<code>预制体变体</code>将不再保留对原始预制体的引用</p></li><li><p>通过代码来创建GO就可以考虑使用预制体</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> GameObject sphere; <span class="hljs-comment">//首先public一个GO变量, 然后在unity面板中拖入特定的预制体</span><br>Instantiate(sphere,transform); <span class="hljs-comment">//使用Instantiate初始化这个变量, 并将其设置为当前GO的子GO.该函数返回值为go对象</span><br>Destroy(Instantiate(sphere,transform)); <span class="hljs-comment">//创建并销毁go</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Vector3"><a href="#Vector3" class="headerlink" title="Vector3"></a>Vector3</h2><ul><li><p>常用常量</p><ul><li><p><code>Vector3.zero</code>: (0,0,0)</p></li><li><p><code>Vector3.one</code>: (1,1,1)</p></li></ul></li><li><p>函数</p><ul><li><p><code>Vector3.Angle(new Vector3(0,0,0),new Vector3(1,1,1))</code>: 两个向量之间的夹角</p></li><li><p><code>Vector3.Distance(new Vector3(0,0,0),new Vector3(1,1,1))</code>: 两个坐标之间的距离</p></li><li><p><code>Vector3.Dot(new Vector3(0,0,0),new Vector3(1,1,1))</code>: 两个向量的乘积(返回&#x3D;&#x3D;标量&#x3D;&#x3D;)</p><blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//Dot源码</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> <span class="hljs-title">Dot</span>(<span class="hljs-params">Vector3 lhs, Vector3 rhs</span>)</span><br>&#123;<br> <span class="hljs-keyword">return</span> lhs.x * rhs.x + lhs.y * rhs.y + lhs.z * rhs.z;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>a</strong>⋅<strong>b</strong>&#x3D;(x<del>1</del>,y<del>1</del>,z<del>1</del>)⋅(x2,y2,z2)&#x3D;x1×x2+y1×y2+z1×z2&#x3D;|<strong>a</strong>|×|<strong>b</strong>|×<em>cos</em>θ</p><p>通过<strong>取值正负</strong>可以判断两向量<strong>方向是否相同</strong>; 通过<strong>取值是否为0</strong>可以判断<strong>是否垂直</strong></p></blockquote></li><li><p><code>Vector3.Cross(new Vector3(0,0,0),new Vector3(1,1,1))</code>: 两个向量的叉乘(返回&#x3D;&#x3D;Vector3对象&#x3D;&#x3D;)</p><blockquote><p>&#x2F;&#x2F;Cross源码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Vector3 <span class="hljs-title">Cross</span>(<span class="hljs-params">Vector3 lhs, Vector3 rhs</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vector3(lhs.y * rhs.z - lhs.z * rhs.y, lhs.z * rhs.x - lhs.x * rhs.z, lhs.x * rhs.y - lhs.y * rhs.x);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>a</strong>×<strong>b</strong>&#x3D;(a1,a2,a3)×(b1,b2,b3)&#x3D;(a2×b3−a3×b3,a3×b1−a1×b3,a1×b2−a2×b1))</p><p>|<strong>a</strong>×<strong>b</strong>|&#x3D;|<strong>a</strong>|×|<strong>b</strong>|×sinβ</p><p>叉乘的几何意义表示为求得以<strong>a</strong>和<strong>b</strong>为平面的法线向量<strong>c</strong>, <strong>c</strong>⊥<strong>a</strong>与<strong>b</strong>组成的平面, <strong>c</strong>的模|<strong>c</strong>|&#x3D;|<strong>a</strong>|×|<strong>b</strong>|×sinβ, 或以<strong>a</strong>和<strong>b</strong>组成的平行四边形的面积</p><p>若两者叉乘之模为0, 则<strong>a</strong>与<strong>b</strong>相互平行; 若两者叉乘之模等于两者各自的模的乘积, 则<strong>a</strong>与<strong>b</strong>相互垂直</p></blockquote></li><li><p><code>Vector3.Lerp(new Vector3(0,0,0),new Vector3(1,1,1),0.5f)</code>: 两个Vector3之间插值</p></li></ul></li><li><p>对象常量(<code>Vector3 v = new Vector3(1,1,1);</code>)</p><ul><li><code>v.magnitude</code>: Vector3的模</li></ul></li></ul><h2 id="Euler欧拉角与Quaternion四元数"><a href="#Euler欧拉角与Quaternion四元数" class="headerlink" title="Euler欧拉角与Quaternion四元数"></a>Euler欧拉角与Quaternion四元数</h2><ul><li><p>Euler的实例化: 同Vector3</p><p><code>Vector3 rotate = new Vector3(0,30,0);</code></p></li><li><p>Quaternion的实例化: </p><ul><li>常量(0,0,0,0): <code>Quaternion.identity</code></li><li>欧拉角to四元数: <code>Quaternion quaternion = Quaternion.Euler(new Vector3(0,30,0));</code></li><li>四元数to欧拉角: <code>Vector3 vector3 = quaternion.eulerAngles;</code></li></ul></li></ul><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><ul><li>输出文本Text: <ul><li>调试输出: <code>Debug.log(&quot;Text&quot;);</code></li><li>调试输出警告: <code>Debug.logWarning(&quot;Text&quot;);</code></li><li>调试输出错误: <code>Debug.logError(&quot;Text&quot;);</code></li></ul></li><li>画线<ul><li>画直线: <code>Debug.DrawLine(Vector3.zero,Vector3.one,[Color.Green]); //两个必需参数为两个点坐标</code></li><li>画射线: <code>Debug.DrawRay(Vector3.zero,Vector3.one,[Color.Green]); //第一个参数是起始点坐标, 第二个参数为射线向量</code></li></ul></li></ul><h2 id="组件属性的修改"><a href="#组件属性的修改" class="headerlink" title="组件属性的修改"></a>组件属性的修改</h2><ul><li><p>获取GO和transform: </p><ul><li><p>获取本GO: <code>GameObject go = this.gameObject;</code> 也可直接使用<code>gameObject</code>代替<code>this.gameObject</code> </p><blockquote><p>GO的父子关系控制在<code>transform</code>组件中, 上面的<code>this</code>表示的是本<code>GO</code>的<code>transform</code>, 所以上面的<code>this.gameObject</code>也可以写为<code>transform.gameObject</code></p></blockquote></li><li><p>获取其他无关GO: </p><ul><li><p><code>public GameObject go;</code> 然后通过unity面板选择</p></li><li><p><code>GameObject.Find(&quot;name&quot;)</code>; 使用<code>GameObject</code>类方法根据name寻找</p></li><li><p><code>GameObject.FindWithTag(&quot;tag&quot;)</code>; 使用<code>GameObject</code>类方法根据tag寻找</p></li></ul></li><li><p>获取父物体GO:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#">Transform parent = transform.parent; <span class="hljs-comment">// 获取物体的直接父物体</span><br>Transform root = transform.root; <span class="hljs-comment">// 获取物体的根物体</span><br><span class="hljs-built_in">int</span> hierarchy = transform.GetSiblingIndex(); <span class="hljs-comment">// 获取物体在父物体中的层级索引.根物体的层级索引为0，其直接子物体的层级索引依次递增</span><br></code></pre></td></tr></table></figure></li><li><p>获取子物体GO: </p><ul><li>获取所有层级所有子物体, 包括本物体: <code>GetComponentsInChildren()</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C#">Transform[] myTransforms = GetComponentsInChildren&lt;Transform&gt;();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> child <span class="hljs-keyword">in</span> myTransforms)&#123;Debug.Log(child.name);&#125;<br></code></pre></td></tr></table></figure><ul><li><p>通过name获取<strong>一级</strong>子物体: <code>transform.Find(&quot;Child0&quot;)</code></p><blockquote><p>获取<strong>二级</strong>子物体需要<strong>全路径</strong>: <code>transform.Find(&quot;Child0/Child00&quot;)</code></p><p>&#x3D;&#x3D;注意: 对象<code>gameObject</code>没有此方法, <code>transform</code>有此方法, <code>transform</code>对象的方法只能寻找本身及子物体, <code>GameObject</code>类方法是从所有层级所有物体中寻找&#x3D;&#x3D;</p></blockquote></li><li><p>通过index获取一级子物体: <code>transform.GetChild(1)</code></p><blockquote><p>获取<strong>二级</strong>子物体需要<strong>连续两次调用</strong>: <code>transform.GetChild(1).GetChild(0)</code></p></blockquote></li></ul></li><li><p><code>GameObject</code>类的实例化需要到unity面板中选择, 在代码中的<code>gameObject</code>是<code>transform</code>对象的一个属性, 获得的所有父子GO物体均为相应的<code>transform</code>对象</p></li></ul></li><li><p>GO&#x2F;transform的属性和函数: </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C#">go.name<br>go.tag<br>go.layer<br>go.activeInHierarchy <span class="hljs-comment">//是否激活状态在层级中</span><br>go.activeSelf <span class="hljs-comment">//本身是否激活状态</span><br><span class="hljs-comment">//两个同时为真才是激活状态, 只要有一个为假就不是激活状态</span><br>go.AddComponent&lt;BoxCollider&gt;(); <span class="hljs-comment">//添加组件</span><br>go.SetActive(<span class="hljs-literal">true</span>); <span class="hljs-comment">//设置是否激活, 这是go的函数, transform无法管控GO是否激活</span><br></code></pre></td></tr></table></figure></li><li><p>获取其他组件: <code>BoxCollider bc = GetComponent&lt;BoxCollider&gt;();</code>或直接使用匿名函数接想用的属性<code>GetComponent&lt;BoxCollider&gt;().xxx</code></p></li><li><p>获取父物体的特定组件: <code>GetComponentInParent&lt;BoxCollider&gt;()</code></p></li><li><p>获取子物体的特定组件: <code>BoxCollider[] bc = GetComponentInChidren&lt;BoxCollider&gt;()</code>, 会遍历包含本身在内的所有层级所有子物体</p></li></ul><h2 id="Time类"><a href="#Time类" class="headerlink" title="Time类"></a>Time类</h2><ol><li><p>Time类属性</p><table><thead><tr><th>总时间</th><th></th></tr></thead><tbody><tr><td><code>Time.time</code></td><td>帧时间</td></tr><tr><td><code>Time.unscaledTime</code></td><td>不受Scale约束的帧时间</td></tr><tr><td><code>Time.fixedTime</code></td><td>频率时间&#x2F;不受帧约束的时间</td></tr><tr><td><code>Time.unscaledFixedTime</code></td><td>不受Scale约束的频率时间</td></tr><tr><td><code>Time.realtimeSinceStartup</code></td><td>不受Scale影响的实际时间</td></tr><tr><td><code>Time.timeSinceLevelLoad</code></td><td>自最后一个非添加场景（non-additive scene）完成加载以来的Scaled时间</td></tr><tr><td><strong>增量时间</strong></td><td></td></tr><tr><td><code>Time.deltaTime</code></td><td>帧间隔时间&#x2F;Δ帧时间</td></tr><tr><td><code>Time.unscaledDeltaTime</code></td><td>不受Scale约束的帧间隔时间</td></tr><tr><td><code>Time.fixedDeltaTime</code></td><td>频率间隔时间&#x2F;不受帧约束的时间间隔</td></tr><tr><td><code>Time.fixedUnscaledDeltaTime</code></td><td>不受Scale约束的频率间隔时间</td></tr><tr><td><strong>其他</strong></td><td></td></tr><tr><td><code>Time.frameCount</code></td><td>总帧数</td></tr><tr><td><code>Time.timeScale</code></td><td>时间缩放尺度, 默认为1, 为0停止, 为2二倍速</td></tr><tr><td><code>Time.maximumDeltaTime</code></td><td>最大帧增量时间</td></tr><tr><td><code>Time.maximumParticleDeltaTime</code></td><td>粒子更新的最大帧增量时间</td></tr></tbody></table><ul><li>过于卡顿时, <code>Time.deltaTime</code>会增大, 但不会无限增大, 受<code>Time.maximumDeltaTime</code>限制, 而<code>Time.unscaledDeltaTime</code>不受此限制, 因此<code>Time.time</code>会比<code>Time.unscaledTime</code>慢一些.</li></ul></li></ol><h2 id="Application类"><a href="#Application类" class="headerlink" title="Application类"></a>Application类</h2><table><thead><tr><th>静态变量</th><th></th></tr></thead><tbody><tr><td><code>Application.persistentDataPath</code></td><td>不同平台持久化的Assets文件夹(读写)</td></tr><tr><td><code>Application.streamingAssetsPath</code></td><td>游戏安装目录Assets目录中<code>streamingAssets</code>文件夹, 无加密(只读)</td></tr><tr><td><code>Application.temporaryCachePath</code></td><td>临时文件夹</td></tr><tr><td><code>Application.runInBackground</code></td><td>是否在后台运行</td></tr><tr><td><code>Application.platform</code></td><td>返回游戏运行平台(只读)</td></tr><tr><td><code>Application.systemLanguage</code></td><td>返回系统语言(只读)</td></tr><tr><td><code>Application.unityVersion</code></td><td>返回unity版本</td></tr><tr><td><strong>静态函数</strong></td><td></td></tr><tr><td><code>Application.OpenURL(&quot;http&quot;)</code></td><td>打开URL</td></tr><tr><td><code>Application.Quit</code></td><td>退出游戏</td></tr></tbody></table><h2 id="Scene类与SceneManagement类"><a href="#Scene类与SceneManagement类" class="headerlink" title="Scene类与SceneManagement类"></a><code>Scene</code>类与<code>SceneManagement</code>类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> UnityEngine.SceneManagement <span class="hljs-comment">//引入namespace使用SceneManager类</span><br>SceneManager.LoadScene(<span class="hljs-number">1</span>); <span class="hljs-comment">//在File-BildSettings中引入不同scene获得index, 通过index加载scene</span><br>SceneManager.LoadScene(<span class="hljs-string">&quot;MyScene&quot;</span>,[defalt:LoadSceneMode.Single]LoadSceneMode.Addictive); <span class="hljs-comment">//通过name加载scene</span><br>SceneManager.UnloadSceneAsync(s); <span class="hljs-comment">//卸载scene</span><br><br>Debug.log(SceneManager.sceneCount); <span class="hljs-comment">//数量</span><br><br>Scene s = SceneManager.GetActiveScene(); <span class="hljs-comment">//当前活动scene</span><br>Scene s = SceneManager.CreateScene(<span class="hljs-string">&quot;MyScene&quot;</span>); <span class="hljs-comment">//创建scene</span><br><br>Debug.log(s.name); <span class="hljs-comment">//名字</span><br>Debug.log(s.isLoaded); <span class="hljs-comment">//是否已加载</span><br>Debug.log(s.path); <span class="hljs-comment">//文件路径</span><br>Debug.log(s.buildIndex); <span class="hljs-comment">//获取index</span><br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//异步加载场景需要用IEnumerator协程:</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AsyncTest</span>:<span class="hljs-title">Monobehavior</span><br>&#123;<br>    AsyncOperation o; <span class="hljs-comment">//实例化一个AsyncOperation对象用以记录加载过程信息</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        StartCoroutine(loading()); <span class="hljs-comment">//使用StartCoroutin()启动协程, 参数为协程函数名</span><br>    &#125;<br>    <br>    <span class="hljs-function">IEnumerator <span class="hljs-title">loading</span>() <span class="hljs-comment">//定义协程事件</span></span><br>    &#123;<br>        o = SceneManager.LoadSceneAsync(<span class="hljs-string">&quot;MyScene&quot;</span>/<span class="hljs-number">1</span>); <span class="hljs-comment">//在协程中使用异步加载场景函数, 函数返回值为AsyncOperation类对象</span><br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> o; <span class="hljs-comment">//将加载过程的信息写入o中</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        Debug.log(o.progress); <span class="hljs-comment">//0-0.9</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Transform类"><a href="#Transform类" class="headerlink" title="Transform类"></a>Transform类</h2><table><thead><tr><th>实例变量</th><th></th></tr></thead><tbody><tr><td><code>transform.position</code></td><td>世界位置</td></tr><tr><td><code>transform.localPosition</code></td><td>相对位置</td></tr><tr><td><code>transform.rotation</code></td><td>世界旋转四元数</td></tr><tr><td><code>transform.localRotation</code></td><td>相对旋转四元数</td></tr><tr><td><code>transform.eulerAngles</code></td><td>世界旋转欧拉角</td></tr><tr><td><code>transform.localEulerAngles</code></td><td>相对旋转欧拉角</td></tr><tr><td><code>transform.localScale</code></td><td>缩放</td></tr><tr><td><code>transform.forward</code></td><td>GO的前后左右上下</td></tr><tr><td><strong>实例函数</strong></td><td></td></tr><tr><td><code>transform.LookAt(Vector3.zero)</code></td><td>一直看向某一个点(点坐标)</td></tr><tr><td><code>transform.Rotate(Vector3.up)</code></td><td>旋转(方向向量)</td></tr><tr><td><code>transform.Translate(Vector3.forward * 50 * Time.deltaTime)</code></td><td>向(0,0,1)移动(方向向量)</td></tr></tbody></table><h2 id="Input类"><a href="#Input类" class="headerlink" title="Input类"></a>Input类</h2><ol><li><p>按键Key</p><table><thead><tr><th>静态属性</th><th></th></tr></thead><tbody><tr><td><code>Input.anyKey</code></td><td>如果用户按下任何键(包含任意设备任意输入)，在按住不放的过程中一直返回true（只读）</td></tr><tr><td><code>Input.anyKeyDown</code></td><td>按下任何键(包含任意设备任意输入),按下的那一帧返回true(只读),之后的帧即使仍然被按住也返回false</td></tr><tr><td><code>Input.inputString</code></td><td>按下的键的值(配合<code>anyKey</code>实现自定义按键)</td></tr><tr><td><strong>静态方法</strong></td><td></td></tr><tr><td><code>Input.GetKey(KeyCode)</code></td><td>检测是否按下了任何指定键,一直按住则一直返回 true</td></tr><tr><td><code>Input.GetKeyDown(KeyCode)</code></td><td>检测是否按下了任何指定键,只有那一帧时true</td></tr><tr><td><code>Input.GetKeyUp(KeyCode)</code></td><td>释放的那一帧返回true</td></tr></tbody></table></li><li><p>按钮Button</p><table><thead><tr><th><strong>静态方法</strong></th><th></th></tr></thead><tbody><tr><td><code>Input.GetButton(string buttonName)</code></td><td>检测是否按下了任何按钮,一直按住则一直返回 true</td></tr><tr><td><code>Input.GetButtonDown()</code></td><td>检测是否按下了任何button,只有那一帧时true</td></tr><tr><td><code>Input.GetButtonUp()</code></td><td>释放的那一帧返回true</td></tr></tbody></table></li><li><p>鼠标</p><table><thead><tr><th>静态属性</th><th></th></tr></thead><tbody><tr><td><code>Input.mousePresent</code></td><td>是否有mouse设备连接（只读）</td></tr><tr><td><code>Input.mousePosition</code></td><td>当前鼠标位置(只读), z&#x3D;0, 左下角是(0,0,0), 右上角是分辨率</td></tr><tr><td><code>Input.mouseScrollDelta</code></td><td>鼠标滚轮滚动量(只读), 返回<code>Vector2</code>, y逆时针(0,1), 顺时针(0,-1)</td></tr><tr><td><strong>静态方法</strong></td><td></td></tr><tr><td><code>Input.GetMouseButton(int button)</code></td><td>检测是否按下了按钮,一直按住则一直返回 true, 0左键 1右键 2中键</td></tr><tr><td><code>Input.GetMouseButtonDown()</code></td><td>检测是否按下,只有那一帧时true</td></tr><tr><td><code>Input.GetMouseButtonUp()</code></td><td>释放的那一帧返回true</td></tr></tbody></table></li><li><p>虚拟轴</p><ul><li>设置内容在<code>编辑-ProjectSettings</code>中</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">float</span> h = Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>); <span class="hljs-comment">//获取水平轴(-1,1)</span><br><span class="hljs-built_in">float</span> v = Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>);<br><span class="hljs-built_in">float</span> x = Input.GetAxis(<span class="hljs-string">&quot;Mouse X&quot;</span>); <span class="hljs-comment">//获取鼠标横向从移动, 左-1</span><br></code></pre></td></tr></table></figure><p><code>Input.GetAxisRaw</code>只返回-1,0,1三个值,没有过渡态, 一般用于2D游戏中</p></li><li><p>触摸</p><table><thead><tr><th>静态属性</th><th></th></tr></thead><tbody><tr><td><code>Input.touchCount</code></td><td>返回整数，代表在当前帧所有触摸点数量（只读）</td></tr><tr><td><code>Input.touches</code></td><td>返回一个 Touch[] 数组(只读)，包含了当前帧所有触摸点</td></tr><tr><td><strong>静态方法</strong></td><td></td></tr><tr><td><code>Input.GetTouch(int index)</code></td><td>返回特定Touch</td></tr><tr><td><strong>对象属性</strong></td><td></td></tr><tr><td><code>touch.position</code></td><td></td></tr><tr><td><code>touch.phase</code></td><td>包含Began, Moved, Stationary, Ended, Canceled五个阶段的属性, 用switch判断</td></tr></tbody></table></li><li><p>陀螺仪&#x2F;重力感应</p><ul><li>前提: <code>Input.gyro.enabled = true;</code></li></ul><table><thead><tr><th>默认成员属性</th><th></th></tr></thead><tbody><tr><td><code>Input.gyro.gravity</code></td><td>重力加速度向量</td></tr><tr><td><code>Input.gyro.rotateRate</code></td><td>旋转速度</td></tr><tr><td><code>Input.gyro.attitude</code></td><td>当前的旋转方向的四元数</td></tr></tbody></table></li><li><p>设备按钮</p><p><code>Input.backButtonLeavesApp</code>: 这个值为<code>true</code>时，按下返回按钮会导致应用程序退出，否则，操作系统将处理返回按钮(Android、Windows Phone或Windows平板电脑)</p></li></ol><h2 id="Light组件-光照"><a href="#Light组件-光照" class="headerlink" title="Light组件: 光照"></a>Light组件: 光照</h2><ol><li>Directional定向光: 图穷远光源, 平行光线<ul><li>Intensity强度: 光照亮度</li><li>Shadow Type: 无阴影, 有锯齿阴影, 模糊边缘阴影</li><li>Realtime Shadows: 实时阴影<ul><li>Strength: 阴影强度</li><li>Resolution: 阴影质量</li></ul></li><li>Draw Halo: 在GO处显示光晕</li><li>Flare: 炫光</li><li>Culling Mask: 光照遮罩, 剔除不需要灯光的GO(如UI)</li></ul></li><li>Spot聚光: 手电筒</li><li>Point点光源: 灯泡球体光</li><li>Area面光源(性能消耗过高, 仅支持烘焙模式)</li></ol><h2 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h2><ul><li><p>Projection投影: </p><ul><li>Perspective透视: 近大远小</li><li>Orthographic正交: 完全平面, 一般用于2D</li></ul></li><li><p>Depth: 相机显示顺序, 数值大的优先显示</p></li><li><p>Clear Flags清除标志: </p><ul><li><p>SkyBox天空盒: 可以添加SkyBox组件更改天空</p></li><li><p>Solid Color</p></li><li><p>Don’t Clear</p></li><li><p>Depth Only: 仅显示有深度GO, 拍不到的空间不显示</p><blockquote><p>如果有多个相机, 将深度高的相机设置为DepthOnly, 可以显示高深相机的内容和低深相机的内容&amp;背景</p></blockquote></li></ul></li><li><p>FOV Axis: 用于设置Field of View视野的大小</p></li><li><p>Clipping Planes剪裁平面: 只有在近面和远面之间的空间才能被捕捉到</p></li><li><p>Viewpoint Rect显示矩形: 拍摄到的内容在屏幕中的位置(x,y)和宽高(w,h), 位置默认左下角(0,0), 宽高是百分比小数</p></li></ul><h2 id="音频-AudioSource组件"><a href="#音频-AudioSource组件" class="headerlink" title="音频: AudioSource组件"></a>音频: AudioSource组件</h2><ul><li>前提: 有且只有一个GO添加了AudioListener组件用以监听</li><li>需要播放声音的GO中添加AudioSource组件</li><li>音频文件一般分为两类: 音乐和音效</li><li>AudioSource组件:<ul><li>AudioClip: 引入音频资源文件</li><li>Mute: 静音</li><li>Pitch: 音调</li><li>3D Sound Settings - Volume Rolloff: 音量衰减</li></ul></li><li>对象属性和函数:<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#">AudioSource a = GetComponent&lt;AudioSource&gt;();<br><br><span class="hljs-comment">//属性:</span><br>Debug.log(a.isPlaying);<br>a.loop = <span class="hljs-literal">true</span>;<br>a.volume = <span class="hljs-number">0.5f</span>;<br><br><span class="hljs-comment">//音乐函数:</span><br>a.Play();<br>a.Pause();<br>a.UnPause();<br>a.stop();<br><br><span class="hljs-comment">//音效函数:</span><br>a.PlayOneShot(AudioClip audioclip); <span class="hljs-comment">//一个AudioSource只能播放一个音乐,但可以播放多个音效</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="视频-VideoPlayer组件"><a href="#视频-VideoPlayer组件" class="headerlink" title="视频: VideoPlayer组件"></a>视频: VideoPlayer组件</h2><ul><li>使用VideoClip作为资源文件变量</li><li>VideoPlayer组件:<ul><li>Renderer Mode渲染模式: 选择挂载体</li><li>属性和函数参考<code>AudioSource</code></li></ul></li></ul><h2 id="角色控制-CharacterController组件"><a href="#角色控制-CharacterController组件" class="headerlink" title="角色控制: CharacterController组件"></a>角色控制: <code>CharacterController</code>组件</h2><ul><li><code>SimpleMove</code>: 自带重力效果, y轴速度为0, 角色接触地面返回true</li><li><code>Move</code>: 绝对控制, 没有重力效果, 影响位移的只有<strong>xyz的速度</strong>和**<code>Rigidbody</code>的碰撞**, 返回<code>CollisionFlags</code>对象</li></ul><h2 id="重力-Rigidbody组件"><a href="#重力-Rigidbody组件" class="headerlink" title="重力: Rigidbody组件"></a>重力: <code>Rigidbody</code>组件</h2><ul><li><code>automatic tensor</code>: 自动张量, 计算张量旋转行为</li><li><code>automatic center of mass</code>: 自动重心计算</li><li><code>interpolate</code>: 物体运动插帧, 一般在物理帧率低于app帧率时使用, 默认关闭<blockquote><p>Interpolate：使用前两次物理更新计算当前帧, 会稍滞后于它应该在的位置, 适用于刚体速度变化较大的情况或有其他影响刚体运动的物理元素<br><br>Extrapolate：使用上一次物理更新并预测下一次物理更新以计算当前帧, 会稍超前于它应该在的位置。外推通常不太准确，并且可能在可见的范围内超出碰撞边界（然后在下一帧中进行修正）。外推通常只适用于精度不重要的情况，例如刚体以恒定速度移动，并且没有其他影响刚体运动的物理元素</p></blockquote><blockquote><p>启用时Unity会忽略任何不是来自物理系统的变换更改, 对<code>transform</code>进行任何直接（非物理）更改后使用Physics.SyncTransforms调用</p></blockquote></li><li><code>Collision Detection</code>: 碰撞检测频率<ul><li><code>Discrete</code>: 离散检测(默认,多数情况够用)</li><li><code>Continues</code>: 连续</li><li><code>Continues Dynamic</code>: 连续动态检测, 性能消耗最高</li><li><code>Continues Speculative</code>: 处于Continues和Discrete之间</li></ul></li><li><code>Constraints</code>: 冻结某一方面的transform</li></ul><h2 id="碰撞-Collider组件"><a href="#碰撞-Collider组件" class="headerlink" title="碰撞: Collider组件"></a>碰撞: <code>Collider</code>组件</h2><ul><li>碰撞的条件: 两者都有<code>Collider</code>组件 &amp; 至少一个GO有<code>Rigidbody</code>组件</li><li>碰撞方法:<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter</span>(<span class="hljs-params">Collision collision</span>)</span>&#123;<br>  <span class="hljs-comment">//collision.colider: 与之碰撞的物体的collider</span><br>  <span class="hljs-comment">//collision.gameObject: 与之碰撞的GO对象</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionStay</span>(<span class="hljs-params">Collision collision</span>)</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionExit</span>(<span class="hljs-params">Collision collision</span>)</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter</span>(<span class="hljs-params">Collider other</span>)</span>&#123;<br>  <span class="hljs-comment">//other就是触发的collider</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerStay</span>(<span class="hljs-params">Collider other</span>)</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerExit</span>(<span class="hljs-params">Collider other</span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><code>Material</code>: 使用<code>Physical Material</code>文件, 创建<code>Friction</code>摩擦力<ul><li><code>Bounciness</code>: 弹力, 1没有能量损失</li><li><code>Xx Combine</code>: 两个摩擦GO时如何计算</li></ul></li></ul><h2 id="铰链关节-弹簧关节和固定关节-Hinge-Joint-Spring-Jonit和Fixed-Joint组件"><a href="#铰链关节-弹簧关节和固定关节-Hinge-Joint-Spring-Jonit和Fixed-Joint组件" class="headerlink" title="铰链关节,弹簧关节和固定关节: Hinge Joint,Spring Jonit和Fixed Joint组件"></a>铰链关节,弹簧关节和固定关节: <code>Hinge Joint</code>,<code>Spring Jonit</code>和<code>Fixed Joint</code>组件</h2><ul><li><code>Anchor</code>: 轴原点</li><li><code>Axis</code>: 轴向量</li></ul><h2 id="射线检测"><a href="#射线检测" class="headerlink" title="射线检测"></a>射线检测</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;<br>  <span class="hljs-keyword">if</span>(Input.GetMouseButtonDown(<span class="hljs-number">0</span>))&#123;<br>    <span class="hljs-comment">//从Camera发射一个射线</span><br>    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);<br>    <span class="hljs-comment">// 声明一个RaycastHit对象接受hit结果</span><br>    RaycastHit hit;<br>    <span class="hljs-comment">//使用Physics.Raycast函数发射ray, 并将发射结果保存到引用参数hit中</span><br>    <span class="hljs-keyword">if</span>(Physics.Raycast(ray,<span class="hljs-keyword">out</span> hit))&#123;<br>      <span class="hljs-comment">//打印在3Dunity中与射线相撞的第一个rigidbody的撞击坐标</span><br>      Debug.log(hit.point);<br>    &#125;<br><br>    <span class="hljs-comment">//如果检测多个rigidbody相撞目标,需要实例化RaycastHit[]数组接收, 使用Physics.RaycastAll(Ray ray)多次检测</span><br>    RaycastHit[] hit = Physics.RaycastAll(ray,[<span class="hljs-built_in">int</span> 检测距离],[<span class="hljs-built_in">int</span> 检测图层],[...]);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="粒子系统-Partical-System组件"><a href="#粒子系统-Partical-System组件" class="headerlink" title="粒子系统: Partical System组件"></a>粒子系统: <code>Partical System</code>组件</h2><ul><li><code>Prewarm</code>: 从stop开始时, 是否从0逐渐展开</li><li><code>Start Lifetime</code>: 粒子在空中的存在时间</li><li><code>3D Start Size/Rotation</code>: 开启后转换为3D粒子;默认为面向Camera的平面粒子</li><li><code>Flip Rotation</code>: 水平翻转旋转</li><li><code>Gravity Modifier</code>: 粒子重力效果<ul><li><code>Constant</code>: 固定值,[-1上重力,1下重力]</li><li><code>Curve</code>: 受力曲线</li></ul></li><li><code>Simulation Space</code>: 生成的粒子是否随GO移动而移动;Local随,World不随,Custom绑定其他GO</li></ul><h2 id="线段和拖尾-LineRenderer和TrailRenderer组件"><a href="#线段和拖尾-LineRenderer和TrailRenderer组件" class="headerlink" title="线段和拖尾: LineRenderer和TrailRenderer组件"></a>线段和拖尾: <code>LineRenderer</code>和<code>TrailRenderer</code>组件</h2><h2 id="旧动画-Animation组件"><a href="#旧动画-Animation组件" class="headerlink" title="旧动画: Animation组件"></a>旧动画: <code>Animation</code>组件</h2><ul><li><code>Culling Typ</code>: 是否一直播放动画</li><li>动画窗体: ctrl+6</li><li>使用类似AudioSource: Play(),animation clip</li></ul><h2 id="新动画-Animator组件"><a href="#新动画-Animator组件" class="headerlink" title="新动画: Animator组件"></a>新动画: <code>Animator</code>组件</h2><ul><li><code>Controller</code>: 由<code>AnimatorController.controller</code>资源文件控制</li><li><code>Culling Mode</code>: <code>Cull Update Transforms</code>表示不在镜头时暂停渲染, <code>Cull Completely</code>表示不在镜头时完全停止</li><li>在Window-Animation中创建不同的动画资源<code>.anim</code>文件, 在Window-Animator中作为不同的动画状态<code>State</code>进行管理</li><li><code>.controller</code>文件包含了三方面内容: <ul><li>对<code>.anim</code>文件的引用</li><li>对<code>.anim</code>文件的设置</li><li><code>.anim</code>文件之间的相互连接关系</li></ul></li></ul><h3 id="动画的构成-anim文件"><a href="#动画的构成-anim文件" class="headerlink" title="动画的构成: anim文件"></a>动画的构成: <code>anim</code>文件</h3><ul><li><code>Rig</code> - <code>Animation Type</code>: 动画类型<ul><li>无: 不包含动画</li><li><code>Legacy</code>旧版: 只能用<code>Animation</code>旧版动画组件</li><li><code>Generic</code>泛型: 新版动画, 各种非人动画</li><li><code>Humanoid</code>人型: 新版动画, 用于人</li></ul></li><li><code>Rig</code> - <code>Avatar</code>骨骼: 从模型或从其他地方</li><li><code>Animation</code>: 对动画Clip进行细操<ul><li><code>Loop Match</code>: 首位帧是否相似</li><li><code>Bake Into Pose</code>: 烘焙特定方向的位移, 避免在动画过程中发生位移</li><li><code>Curves</code>曲线: 随动画播放时间的函数曲线, 其值同步在<code>animator</code>的同名<code>parameters</code>中</li><li><code>Events</code>事件: 在动画的某一帧调用函数(如脚步踏地时发出脚步声)</li></ul></li><li><code>Blend Tree</code> in AnimatorWindowContext: 混合动画(如走和跑的混合)<ul><li><code>Blend Type</code>混合模式: 由几个变量控制混合动画的计算, 变量在<code>animator</code>的同名<code>parameters</code>中</li><li><code>Motion</code>: 选择混合的动画</li><li><code>Automate Thresholds</code>: 是否默认各个<code>Motion</code>的取值范围</li></ul></li><li><code>Sub-State Machine</code> in AnimatorWindowContext子状态机: 不同的动画状态的分组归类<ul><li>如拿枪到一个子状态中, 换刀到另一个子状态中</li></ul></li><li><code>Base Layer</code>: 动画状态图层<ul><li><code>Weight</code>:权重; <code>Mask</code>: Avatar骨骼遮罩; <code>IK</code>: 反向动力学效果;</li><li>不使用<code>Mask</code>可以通过控制 <code>Weight</code>获得同<code>Blend Tree</code>一样的效果, 使用<code>Mask</code>可以精确实现不同部位动画的混合</li></ul></li></ul><h2 id="导航系统-需要在PackageManagement中安装AI-Navigation组件"><a href="#导航系统-需要在PackageManagement中安装AI-Navigation组件" class="headerlink" title="导航系统(需要在PackageManagement中安装AI Navigation组件)"></a>导航系统(需要在PackageManagement中安装<code>AI Navigation</code>组件)</h2><h3 id="1-静态障碍物"><a href="#1-静态障碍物" class="headerlink" title="1.静态障碍物"></a>1.静态障碍物</h3><ul><li>首先将道路GO勾选为<code>Navigation Static</code>, 然后在选择Window - AI - Navigation设置烘焙; 接着将PlayerGO添加<code>NavMeshAgent</code>组件</li><li><code>Bake</code>: 烘焙Agent的半径, 高度, 可上最大坡度Slope, 台阶每一阶步高, 可掉落的高度, 可跳跃的距离. (可以添加多个Agent, 作为高矮胖瘦不同的人)</li><li><code>掉落高度</code>和<code>跳跃距离</code>是通过生成<code>OffMeshLinks</code>实现, 需要勾选需要生成links的障碍物GO的<code>Object</code> - <code>Generate OffMeshLinks</code></li><li><code>Area</code>: 不同区域的成本消耗设置, 在<code>Object</code> - <code>Navigation Area</code>中更改</li><li><code>Nav Mesh Agent</code>组件:<ul><li><code>Steering</code>: 位移相关<ul><li><code>Acceleration</code>: 加速度</li></ul></li><li><code>Obstacle Avoidance</code> - <code>Priority</code>: 一个路口多个Agent待通过时的优先级</li><li><code>Area Mask</code>区域遮罩: 特定区域永远不可通过, 用于针对不同Agent设定不同的禁止区域</li></ul></li><li>代码实现:<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//前面获取代理组件</span><br><span class="hljs-keyword">using</span> UnityEngine.AI;<br>NavMeshAgent agent = GetComponent&lt;NavMeshAgent&gt;();<br><br><span class="hljs-comment">//在Update方法中逐帧更新:</span><br><span class="hljs-keyword">if</span>(GetMouseButtonDown(<span class="hljs-number">0</span>))&#123;<br>  Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);<br>  RaycastHit hit;<br>  <span class="hljs-keyword">if</span>(Physics.Raycast(ray, <span class="hljs-keyword">out</span> hit)) <span class="hljs-comment">//从屏幕点击到3D位置坐标</span><br>  &#123; <br>    agent.SetDestination(<span class="hljs-keyword">new</span> Vector3(hit.point)); <span class="hljs-comment">//将坐标设为destination</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-动态障碍物"><a href="#2-动态障碍物" class="headerlink" title="2.动态障碍物"></a>2.动态障碍物</h3><ul><li>将特定的某些GO取消勾选<code>Navigation Static</code>, 并添加<code>NavMeshObstacle</code>组件<ul><li><code>Carve</code>切割: 勾选后会根据该GO的位移重新烘焙原有的静态障碍道路<ul><li><code>Move Threshold</code>移动阈值: 最小移动多远时开始rebake</li><li><code>Time to Stationary</code>静止时间: 移动阈值后经过多少秒开始rebake</li><li><code>Carve Only Stationary</code>仅在静止时切割: 取消后会随着位移即时rebake, 性能消耗较大</li></ul></li></ul></li></ul><h3 id="3-点对点定点传送-Off-Mesh-Link组件"><a href="#3-点对点定点传送-Off-Mesh-Link组件" class="headerlink" title="3.点对点定点传送: Off Mesh Link组件"></a>3.点对点定点传送: <code>Off Mesh Link</code>组件</h3><ul><li><code>Auto Update Position</code>: 当GO位置改变时, 即时更新<code>Link</code>; 如果位置不会改变就取消,以降低能耗</li></ul><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><ul><li><code>UI</code>由<code>Canvas</code>和<code>EventSystem</code>两个GO组成, <code>Canvas</code>为所有UI控件GO的父物体</li><li><code>Canvas</code>组件:<ul><li><code>Render Mode</code>: <ul><li><code>OverLay</code>: 永远在最上层</li><li><code>Camera</code>: 可被其他GO覆盖</li><li><code>World Space</code>: 在3D世界中的一层平面, 可旋转</li></ul></li><li><code>Sort Order</code>: 多个<code>Canvas</code>时的渲染优先级</li></ul></li><li><code>Image</code>组件:<br><code>Raycast Target</code>: 是否接收射线投射<br><code>Anchors</code>: 缩放参照锚点<br><code>Pivot</code>: 图片的轴心, 图片的旋转缩放坐标都是由轴心控制</li><li>字体: 新版更清晰, 富文本更多<ul><li><code>Color Gradient</code>: 颜色渐变</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/06/hello-world/"/>
    <url>/2024/02/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
